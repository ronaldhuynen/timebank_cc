/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./vendor/rtippin/messenger-ui/resources/js/Messenger.js":
/*!***************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/Messenger.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nwindow.Messenger = function () {\n  var opt = {\n      initialized: false,\n      APP_NAME: 'Messenger',\n      API: null,\n      WEB: null,\n      SOCKET: null,\n      SOCKET_PUSHER: false,\n      SOCKET_KEY: null,\n      SOCKET_AUTH_ENDPOINT: null,\n      SOCKET_PORT: 6001,\n      SOCKET_CLUSTER: null,\n      SOCKET_TLS: false,\n      env: 'production',\n      websockets: true,\n      lockout: false,\n      model: 'guest',\n      auth: false,\n      provider_id: null,\n      provider_alias: null,\n      provider_model: 'guest',\n      name: 'Guest User',\n      slug: '#',\n      avatar_md: null,\n      avatar_sm: null,\n      mobile: false,\n      teapot: 0,\n      modal_close: null,\n      dark_mode: true,\n      css: {\n        base: null,\n        dark: null\n      },\n      csrf_token: document.querySelector('meta[name=csrf-token]').content,\n      modules: [],\n      modal_queue: []\n    },\n    methods = {\n      Initialize: function Initialize(arg, environment) {\n        if (opt.initialized) return;\n        opt.initialized = true;\n        if (\"provider\" in arg) {\n          opt.provider_id = arg.provider.id;\n          opt.provider_alias = arg.provider.alias;\n          opt.provider_model = arg.provider.model;\n          opt.auth = true;\n          opt.name = arg.provider.name;\n          opt.slug = arg.provider.slug;\n          opt.avatar_md = arg.provider.avatar_md;\n          opt.avatar_sm = arg.provider.avatar_sm;\n        }\n        if (\"common\" in arg) {\n          opt.API = arg.common.api_endpoint + '/';\n          opt.WEB = arg.common.web_endpoint;\n          opt.SOCKET = arg.common.socket_endpoint;\n          opt.SOCKET_PUSHER = arg.common.socket_pusher;\n          opt.SOCKET_KEY = arg.common.socket_key;\n          opt.SOCKET_AUTH_ENDPOINT = arg.common.socket_auth_endpoint;\n          opt.SOCKET_PORT = arg.common.socket_port;\n          opt.SOCKET_TLS = arg.common.socket_tls;\n          if (opt.SOCKET_PUSHER) {\n            opt.SOCKET_CLUSTER = arg.common.socket_cluster;\n          }\n          opt.APP_NAME = arg.common.app_name;\n          opt.mobile = arg.common.mobile;\n          opt.dark_mode = arg.common.dark_mode;\n          if ('base_css' in arg.common) opt.css.base = arg.common.base_css;\n          if ('dark_css' in arg.common) opt.css.dark = arg.common.dark_css;\n          if ('websockets' in arg.common) opt.websockets = arg.common.websockets;\n        }\n        if (\"call\" in arg) CallManager.init(arg.call);\n        if (environment) opt.env = environment;\n        PageListeners.init();\n        for (var key in arg.load) {\n          //We use the manager name to xhr load in the js\n          //If loaded, we init and add to modules\n          if (!arg.load.hasOwnProperty(key)) continue;\n          methods.loadModule(key, arg.load[key]);\n        }\n        for (var _key in arg.modules) {\n          if (!arg.modules.hasOwnProperty(_key)) continue;\n          methods.loadModule(_key, arg.modules[_key]);\n        }\n        PageListeners.listen().tooltips();\n      },\n      loadModule: function loadModule(key, obj) {\n        try {\n          if (typeof window[key] !== 'undefined') {\n            methods.initModule({\n              name: key,\n              options: obj\n            });\n          } else {\n            XHR.script({\n              file: obj.src,\n              name: key,\n              options: obj,\n              success: methods.initModule\n            });\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      initModule: function initModule(js) {\n        try {\n          if (!opt.modules.includes(js.name)) opt.modules.push(js.name);\n          if (typeof window[js.name] !== 'undefined' && typeof window[js.name]['init'] !== 'undefined') window[js.name].init(js.options);\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      LockSmith: function LockSmith() {\n        opt.teapot = 0;\n        opt.modules.forEach(function (name) {\n          if (typeof window[name] !== 'undefined' && typeof window[name]['lock'] !== 'undefined') window[name].lock(false);\n        });\n      },\n      addScripts: function addScripts(jsFile) {\n        var s = document.createElement('script');\n        s.type = 'text/javascript';\n        s.appendChild(document.createTextNode(jsFile.data));\n        document.body.appendChild(s);\n      },\n      checkCsrfToken: function checkCsrfToken(token) {\n        if (opt.csrf_token !== token) {\n          opt.csrf_token = token;\n          window.Laravel = {\n            csrfToken: token\n          };\n          window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token;\n          document.querySelector('meta[name=csrf-token]').content = token;\n        }\n      },\n      isProvider: function isProvider(id, model, alias) {\n        alias = alias || null;\n        if (model === null) {\n          return opt.provider_id === id && opt.provider_alias === alias;\n        }\n        return opt.provider_id === id && opt.provider_model === model.replace(/\\\\/g, '');\n      }\n    },\n    _format = {\n      makeHumanTime: function makeHumanTime(date) {\n        return dayjs(date).format('ddd, MMM Do YYYY, h:mm:ssa');\n      },\n      makeTimeAgo: function makeTimeAgo(date) {\n        return dayjs(date).fromNow();\n      },\n      escapeHtml: function escapeHtml(text) {\n        var map = {\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;',\n          '\"': '&quot;',\n          \"'\": '&#039;'\n        };\n        return text.replace(/[&<>\"']/g, function (m) {\n          return map[m];\n        });\n      },\n      focusEnd: function focusEnd(elm) {\n        if (!elm) return;\n        elm.focus();\n        if (elm.value) {\n          elm.setSelectionRange(elm.value.length, elm.value.length);\n        }\n      },\n      timeDiffInUnit: function timeDiffInUnit(date1, date2, unit) {\n        if (!date1 || !date2 || !unit) return 0;\n        var d1 = dayjs(date1),\n          d2 = dayjs(date2);\n        return d1.diff(d2, unit);\n      },\n      copyText: function copyText(btnID, inputID) {\n        var input = document.getElementById(inputID),\n          btn = $(\"#\" + btnID);\n        input.select();\n        input.setSelectionRange(0, 99999);\n        document.execCommand(\"copy\");\n        btn.removeClass('btn-primary').addClass('btn-success').html('<i class=\"far fa-clipboard\"></i> Copied');\n        setTimeout(function () {\n          btn.removeClass('btn-success').addClass('btn-primary').html('<i class=\"far fa-copy\"></i> Copy');\n        }, 2000);\n      },\n      shortcodeToImage: function shortcodeToImage(body) {\n        return typeof joypixels !== 'undefined' ? joypixels.toImage(body) : body;\n      },\n      shortcodeToUnicode: function shortcodeToUnicode(body) {\n        return typeof joypixels !== 'undefined' ? joypixels.shortnameToUnicode(body) : body;\n      }\n    },\n    buttons = {\n      addLoader: function addLoader(arg) {\n        var button = $(arg.id);\n        if (!button.length) return;\n        $(arg.id).append(' <i class=\"fas fa-sync-alt bLoading\"></i>');\n        $(arg.id).prop(\"disabled\", true);\n      },\n      spinAction: function spinAction(elm, disabled) {\n        if (typeof elm === 'undefined' || elm === null) return;\n        if (disabled) {\n          elm.prop('disabled', true);\n          elm.find('i').addClass('spin-me-round');\n        } else {\n          elm.prop('disabled', false);\n          elm.find('i').removeClass('spin-me-round');\n        }\n      },\n      removeLoader: function removeLoader() {\n        $(\".bLoading\").remove();\n        $(\".btn\").prop(\"disabled\", false);\n      }\n    },\n    alerts = {\n      //Global modal module with default options you can override\n      // Messenger.alerts().Modal({\n      //     wait_for_others : false, //Default, set true to have modal wait to show until other modals close\n      //     title : 'Alert',         //Default, set title of modal\n      //     allow_close : true,      //Default, (false) removes btns, user can't close modal\n      //     unlock_buttons : true    //Default, if true, removes all btn loaders and disabled states on page\n      //     close_btn : true,        //Default, set false to hide bottom close button\n      //     theme : 'info',          //Default, bootstrap theme prefix (danger, success, etc)\n      //     icon : 'info-sign',      //Default, header Font Awesome icon, use (fas fa-) suffix\n      //     size : 'md',             //Default, use bootstrap size prefix (xs, sm, md, ect)\n      //     h4 : true,               //Default, makes text in body h4. Set false if importing custom html\n      //     backdrop_ctrl : true,    //Default, set false to stop modal close on backdrop click\n      //     overflow : false,        //Default, set true to allow inner modal to scroll\n      //     close_btn_txt : 'Close', //Default, change close button text\n      //     pre_loader : false,      //Default. If true, modal expects a call to the onReady() below (no body set here)\n      //     centered : false,        //Default. If true, will center modal in middle of screen\n      //     timer : false            //Default, set to int in milliseconds to auto close modal on timeout\n      //     body : 'body content',   //Not set, define your modal content here. Set false to hide body completely\n      //     callback : function(){   //Optional, requires cb_btn opts below\n      //         //your executed callback logic\n      //         //by default this will not close modal\n      //     },\n      //     cb_btn_theme : '',       //Required when using callback, set bootstrap theme prefix\n      //     cb_btn_icon : '',        //Required when using callback, Font Awesome icon, use FA suffix\n      //     cb_btn_txt : '',         //Required when using callback, set callback btn text\n      //     cb_close : true,         //Optional when using callback, set true to make modal close same time when clicking callback\n      //     onReady : function(){    //Optional. Execute code here once modal has opened\n      //         //execute logic here on modal show\n      //         //Required if using pre_loader. You must call in here\n      //         //the fillModal({}) method to remove preload, fill body/title\n      //         //Messenger.alerts().fillModal({body : html, title : optional}) Fills in modal\n      //      },\n      //      onClosed : function(){  //Optional. Run this to execute code once modal closes\n      //          //console.log('Modal Closed!');\n      //      }\n      // });\n      loader: function loader(grow) {\n        return '<div class=\"col-12 my-2 text-center\"><div class=\"spinner-' + (grow ? 'grow' : 'border') + ' text-primary\" role=\"status\"></div></div>';\n      },\n      destroyModal: function destroyModal() {\n        $(\".modal-backdrop\").remove();\n        $(\".modal\").remove();\n        $(\"body\").removeClass('modal-open');\n      },\n      Modal: function Modal(arg) {\n        var elm = {\n            modal_backdrop: $(\".modal-backdrop\"),\n            modal: $(\".modal\")\n          },\n          defaults = {\n            title: 'Alert',\n            allow_close: true,\n            unlock_buttons: true,\n            close_btn: true,\n            theme: 'info',\n            icon: 'info-circle',\n            callback: null,\n            size: 'md',\n            h4: true,\n            backdrop_ctrl: true,\n            overflow: false,\n            close_btn_txt: 'Close',\n            pre_loader: false,\n            centered: false,\n            timer: false\n          };\n        if (\"wait_for_others\" in arg && elm.modal.length) {\n          opt.modal_queue.push(arg);\n          return;\n        }\n        PageListeners.listen().disposeTooltips();\n        if (elm.modal.length || elm.modal_backdrop.length) {\n          alerts.destroyModal();\n        }\n        var options = Object.assign({}, defaults, arg),\n          bottom = function bottom(options) {\n            if (!options.allow_close || !options.close_btn) {\n              return \"\";\n            }\n            if (options.callback) {\n              return \"<div class='modal-footer'><div class='mx-auto'><button type='button' class='btn btn-md btn-light modal_close' data-dismiss='modal'>Cancel</button>\" + \"<button id='modal_cb_btn' type='button' class='ml-2 btn btn-md btn-\" + options.cb_btn_theme + \" modal_callback \" + (options.pre_loader ? \"NS\" : \"\") + \"'><i class='fas fa-\" + options.cb_btn_icon + \"'></i> \" + options.cb_btn_txt + \"</button></div></div>\";\n            }\n            return \"<div class='modal-footer'><div class='mx-auto'><button type='button' class='btn btn-sm btn-light modal_close' data-dismiss='modal'>\" + options.close_btn_txt + \"</button></div></div>\";\n          },\n          body = function body(options) {\n            return options.body || options.pre_loader ? \"<div id='body_modal' class='modal-body text-dark \" + (options.h4 ? ' h4' : '') + \"'>\" + (options.pre_loader ? alerts.loader(true) : options.body) + \"</div>\" : \"\";\n          },\n          template = function template(options) {\n            return \"<div id='main_modal' class='modal fade' role='dialog'>\" + \"<div class='modal-dialog modal-\" + options.size + (options.centered ? ' modal-dialog-centered' : '') + (options.overflow ? ' modal-dialog-scrollable' : '') + \" ' role='document'>\" + \"<div class='modal-content'>\" + \"<div class='modal-header pb-2 text-\" + (options.theme === 'warning' ? 'dark' : 'light') + \" bg-gradient-\" + options.theme + \"'>\" + \"<span class='h5'><i class='fas fa-\" + options.icon + \"'></i> <strong><span id='title_modal'>\" + options.title + \"</span></strong></span>\" + (options.allow_close ? \"<button type='button' class='close modClose' data-dismiss='modal' aria-hidden='true'><i class='fas fa-times'></i></button>\" : \"\") + \"</div>\" + body(options) + bottom(options) + \"</div></div></div>\";\n          };\n        $(\"body\").append(template(options));\n        $(\"#main_modal\").modal({\n          backdrop: !options.allow_close || !options.backdrop_ctrl ? 'static' : true,\n          keyboard: false\n        }).on('shown.bs.modal', function () {\n          if (options.timer) {\n            opt.modal_close = setTimeout(function () {\n              $(\".modal\").modal(\"hide\");\n            }, options.timer);\n          }\n        }).on('click', '.modal_callback', function () {\n          if (options.callback) {\n            buttons.addLoader({\n              id: $(this)\n            });\n            options.callback();\n            if ('cb_close' in options) $(\".modal\").modal(\"hide\");\n            if ('onClosed' in options) options.onClosed();\n          }\n        }).on('hidden.bs.modal', function () {\n          clearInterval(opt.modal_close);\n          $(this).remove();\n          if (options.unlock_buttons) buttons.removeLoader();\n          if ('onClosed' in options) options.onClosed();\n          if (opt.modal_queue.length) {\n            alerts.Modal(opt.modal_queue[0]);\n            opt.modal_queue.shift();\n          }\n        });\n        if ('onReady' in options) options.onReady();\n      },\n      fillModal: function fillModal(arg) {\n        $(\"#modal_cb_btn\").show();\n        $(\"#body_modal\").html(\"loader\" in arg ? alerts.loader(true) : arg.body);\n        if (\"title\" in arg) $(\"#title_modal\").html(arg.title);\n        if (\"no_close\" in arg) $(\".modClose, .modal-footer\").remove();\n      },\n      //Global alert popup\n      // Messenger.alert().Alert({\n      //     close : false,           //Default, set true to close all open alerts before showing the next including modals\n      //     title : 'Alert',         //Default, set title of alert\n      //     theme : 'success',       //Default, bootstrap theme prefix (danger, success, etc) / May use success, info, warning, or error is using toast\n      //     icon : 'info-sign',      //Default, header Font Awesome icon, use FA suffix\n      //     timer : 5000,            //Default, set time until auto close. Set false to not auto close\n      //     body : 'body'            //Not set, define your alert content here\n      //     toast : false            //If true, we use toastr instead of bootstrap alert and the added options below\n      //     close_toast : false      //If true, we close other toast before showing this\n      //     toast_options : {        //Default options for toastr, override globals here\n      //         https://github.com/CodeSeven/toastr for docs\n      //     }\n      // });\n      Alert: function Alert(arg) {\n        var defaults = {\n            close: false,\n            title: 'Alert',\n            theme: 'success',\n            icon: 'info-circle',\n            body: '',\n            timer: 5000,\n            toast: false,\n            close_toast: false,\n            toast_options: {}\n          },\n          options = Object.assign({}, defaults, arg),\n          modal = $(\".modal\");\n        if (options.toast) {\n          if (options.close) {\n            modal.modal(\"hide\");\n            $(\".alert\").remove();\n            buttons.removeLoader();\n          }\n          if (options.close_toast) toastr.remove();\n          toastr[options.theme](options.body, options.title, options.toast_options);\n          return;\n        }\n        buttons.removeLoader();\n        modal.modal(\"hide\");\n        if (options.close) $(\".alert\").remove();\n        var alert = $('<div onclick=\"$(this).remove()\" role=\"alert\" class=\"pointer_area alert alert-' + options.theme + ' alert-dismissable NS fade show mb-2\"><button data-dismiss=\"alert\" type=\"button\" class=\"close\"><i class=\"fas fa-times\"></i></button>' + '<strong><i class=\"fas fa-' + options.icon + '\"></i> ' + options.title + ':</strong> ' + options.body + '</div>');\n        alert.prependTo(\"#alert_container\");\n        alert.css('opacity', '1').slideDown(300, function () {\n          if (options.timer) {\n            setTimeout(function () {\n              alert.remove();\n            }, options.timer);\n          }\n        });\n      },\n      showAvatar: function showAvatar(name, avatar) {\n        alerts.Modal({\n          icon: 'image',\n          theme: 'dark',\n          title: name + '\\'s Photo',\n          pre_loader: true\n        });\n        var img = new Image();\n        img.onload = function () {\n          alerts.fillModal({\n            body: '<div class=\"text-center\"><img src=\"' + this.src + '\" class=\"img-fluid rounded\" /></div>'\n          });\n        };\n        img.onerror = function () {\n          alerts.fillModal({\n            body: '<div class=\"text-center\"><span class=\"badge badge-pill badge-danger\">Image failed to load.</span></div>'\n          });\n        };\n        img.src = avatar;\n      }\n    },\n    XHR = {\n      //Global post/request function using axios\n      // Messenger.xhr().payload({\n      //     route : '/post/here',            //(Required)Set the URI to post to\n      //     data : {\n      //          input : 'data'              //(Required)data is an object of all data to post to URI\n      //     },\n      //     exports : {                      //(Not Required)if set, it will send data there instead\n      //          name : 'ManagerName',       //Manager to call by name string\n      //          sub : 'SubFunctionName'     //Manager sub function to call by name string\n      //     },\n      //     shared : {                       //(Not Required)If set, on success this data will be merged with the\n      //          arg : true,                 //received data from the backend\n      //          more : 'stuff'\n      //     },\n      //     success : function(response){    //(Not required) On success, we pass data and run your calls inside success function\n      //          console.log(response)\n      //     },\n      //     fail : function(error){          //(Not Required) if the post fails, it will by default pass the error msg to the handler popup\n      //          console.log(error);         //If you set this function, it will instead pass you the error for you to handle\n      //          doSomething();\n      //     },\n      //     bypass : true                    //(Not Required) - Set true if you wish to use your own fail method while continuing\n      //                                      //to allow the handler to popup the error message\n      //     fail_alert : true                //(Not Required) - Set true if you want error to be in alert and not modal\n      //     close_modal : true               //(Not Required) - Set true if you wish close modal on success/fail\n      //     lockout : true                   //(Not Required) - Set true to lockout all further post/gets when called\n      // });\n      payload: function payload(arg, method) {\n        if (opt.lockout) return;\n        if (\"lockout\" in arg) opt.lockout = true;\n        axios[method ? method : 'post'](arg.route, arg.data).then(function (response) {\n          methods.LockSmith();\n          PageListeners.listen().disposeTooltips();\n          if ('close_modal' in arg) alerts.destroyModal();\n          if ('exports' in arg) {\n            window[arg.exports.name][arg.exports.sub](Object.assign(response.data, arg.exports));\n            return;\n          }\n          if ('success' in arg && typeof arg.success === 'function') {\n            if ('shared' in arg) {\n              arg.success(Object.assign(response.data, arg.shared));\n              return;\n            }\n            arg.success(response.data);\n          }\n        })[\"catch\"](function (error) {\n          if (opt.env === 'local') {\n            console.trace();\n            console.log(error.response);\n          }\n          try {\n            if (error && \"response\" in error && [418, 502, 504].includes(error.response.status)) {\n              _handle.fillTeapot('payload', arg);\n              return;\n            }\n          } catch (e) {\n            console.log(e);\n          }\n          PageListeners.listen().disposeTooltips();\n          methods.LockSmith();\n          buttons.removeLoader();\n          if ('close_modal' in arg) alerts.destroyModal();\n          if (\"lockout\" in arg) opt.lockout = false;\n          if ('fail' in arg) {\n            if (typeof arg.fail === 'function') arg.fail(error.response);\n            if (!('bypass' in arg)) return;\n          }\n          _handle.xhrError({\n            type: 'fail_alert' in arg && arg.fail_alert ? 2 : 1,\n            response: error.response,\n            fail_keep_open: 'fail_keep_open' in arg\n          });\n        });\n      },\n      request: function request(arg) {\n        if (opt.lockout) return;\n        if (\"lockout\" in arg) opt.lockout = true;\n        axios.get(arg.route).then(function (response) {\n          PageListeners.listen().disposeTooltips();\n          if ('close_modal' in arg) alerts.destroyModal();\n          methods.LockSmith();\n          if ('exports' in arg) {\n            window[arg.exports.name][arg.exports.sub](Object.assign(response.data, arg.exports));\n            return;\n          }\n          if ('success' in arg && typeof arg.success === 'function') {\n            if ('shared' in arg) {\n              arg.success(Object.assign(response.data, arg.shared));\n              return;\n            }\n            arg.success(response.data);\n          }\n        })[\"catch\"](function (error) {\n          if (opt.env === 'local') {\n            console.trace();\n            console.log(error.response);\n          }\n          try {\n            if (error && \"response\" in error && [418, 502, 504].includes(error.response.status)) {\n              _handle.fillTeapot('request', arg);\n              return;\n            }\n          } catch (e) {\n            console.log(e);\n          }\n          PageListeners.listen().disposeTooltips();\n          methods.LockSmith();\n          buttons.removeLoader();\n          if ('close_modal' in arg) alerts.destroyModal();\n          if (\"lockout\" in arg) opt.lockout = false;\n          if ('fail' in arg) {\n            if (typeof arg.fail === 'function') arg.fail(error.response);\n            if (!('bypass' in arg)) return;\n          }\n          _handle.xhrError({\n            type: 'fail_alert' in arg && arg.fail_alert ? 2 : 1,\n            response: error.response\n          });\n        });\n      },\n      script: function script(arg) {\n        if (!opt.initialized) return;\n        if (opt.lockout) return;\n        if (\"lockout\" in arg) opt.lockout = true;\n        axios.get(arg.file).then(function (response) {\n          methods.addScripts(response);\n          opt.modules.push(arg.name);\n          if (\"success\" in arg) arg.success(arg);\n        })[\"catch\"](function (error) {\n          if (opt.env === 'local') {\n            console.trace();\n            console.log(error.response);\n          }\n          console.log('Failed to load ' + arg.file);\n          if (\"fail\" in arg) arg.fail();\n        });\n      },\n      lockout: function lockout(state) {\n        opt.lockout = state;\n      }\n    },\n    _handle = {\n      fillTeapot: function fillTeapot(flavor, tea) {\n        if (opt.teapot > 4) {\n          _handle.xhrError();\n          return;\n        }\n        opt.teapot++;\n        XHR[flavor](tea);\n      },\n      xhrError: function xhrError(arg) {\n        $('body').find(\".btn\").prop('disabled', false);\n        var errMessages = function errMessages() {\n            switch (Math.floor(Math.random() * Math.floor(3))) {\n              case 0:\n                return 'Your request has encountered an error. We have been made aware of this issue';\n              case 1:\n                return 'It seems we are having trouble processing your request. Our team has been notified';\n              case 2:\n                return 'Something went wrong. We are sorry about that, our team has been informed of the situation';\n            }\n          },\n          errToast = function errToast(body, close) {\n            alerts.Alert({\n              close_toast: close,\n              close: !arg.fail_keep_open,\n              toast: true,\n              theme: 'error',\n              title: body\n            });\n          },\n          errModal = function errModal(body) {\n            alerts.Modal({\n              theme: 'danger',\n              icon: 'times',\n              title: 'Error',\n              body: body\n            });\n          };\n        buttons.removeLoader();\n        if (!arg || arg && typeof arg.response === 'undefined') {\n          errToast(errMessages(), true);\n          return;\n        }\n        if (arg.response.status === 413) {\n          errToast('File upload too large', true);\n          return;\n        }\n        if (arg.response.status === 500) {\n          errToast(errMessages(), true);\n          return;\n        }\n        if (typeof arg.response.data === 'undefined' || typeof arg.response.data.message === 'undefined') {\n          errToast(errMessages(), true);\n          return;\n        }\n        if (typeof arg.response.data.errors !== 'undefined' && _typeof(arg.response.data.errors) === 'object') {\n          var theStack = '<ul class=\"' + (arg.type === 2 ? 'p-0 ml-3' : '') + '\">';\n          for (var field in arg.response.data.errors) {\n            if (!arg.response.data.errors.hasOwnProperty(field)) continue;\n            arg.response.data.errors[field].forEach(function (error) {\n              theStack += '<li>' + error + '</li>';\n            });\n          }\n          theStack += '</ul>';\n          if (arg.type === 2) {\n            errToast(theStack, !(\"no_close\" in arg));\n            return;\n          }\n          errModal(theStack);\n          return;\n        }\n        if (arg.type === 2) {\n          errToast(arg.response.data.message, true);\n          return;\n        }\n        errModal(arg.response.data.message);\n      },\n      switchCss: function switchCss(dark) {\n        var og = document.getElementById('main_css'),\n          head = document.getElementsByTagName('head')[0],\n          link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = dark ? opt.css.dark : opt.css.base;\n        opt.dark_mode = dark;\n        head.prepend(link);\n        link.onload = function () {\n          og.remove();\n          this.id = 'main_css';\n        };\n        if (opt.modules.includes('EmojiPicker')) {\n          EmojiPicker.updateThemes(dark);\n        }\n      }\n    },\n    _forms = {\n      updateSlug: function updateSlug(slug) {\n        opt.slug = slug;\n      },\n      Logout: function Logout() {\n        if (opt.provider_model === 'guest') return;\n        Messenger.alert().Modal({\n          size: 'sm',\n          icon: 'sign-out-alt',\n          pre_loader: true,\n          centered: true,\n          unlock_buttons: false,\n          allow_close: false,\n          backdrop_ctrl: false,\n          title: 'Logging out',\n          theme: 'primary'\n        });\n        if (opt.modules.includes('NotifyManager')) NotifyManager.sockets().disconnect();\n        XHR.payload({\n          route: '/logout',\n          data: {},\n          lockout: true,\n          success: function success() {\n            location.replace('/');\n          },\n          fail: function fail() {\n            location.reload();\n          }\n        });\n      }\n    };\n  return {\n    init: methods.Initialize,\n    isProvider: methods.isProvider,\n    common: function common() {\n      return {\n        APP_NAME: opt.APP_NAME,\n        API: opt.API,\n        WEB: opt.WEB,\n        SOCKET: opt.SOCKET,\n        SOCKET_PUSHER: opt.SOCKET_PUSHER,\n        SOCKET_KEY: opt.SOCKET_KEY,\n        SOCKET_AUTH_ENDPOINT: opt.SOCKET_AUTH_ENDPOINT,\n        SOCKET_PORT: opt.SOCKET_PORT,\n        SOCKET_TLS: opt.SOCKET_TLS,\n        SOCKET_CLUSTER: opt.SOCKET_CLUSTER,\n        provider_alias: opt.provider_alias,\n        provider_id: opt.provider_id,\n        provider_model: opt.provider_model,\n        name: opt.name,\n        slug: opt.slug,\n        avatar_md: opt.avatar_md,\n        avatar_sm: opt.avatar_sm,\n        modules: opt.modules,\n        mobile: opt.mobile,\n        csrf_token: opt.csrf_token,\n        websockets: opt.websockets,\n        dark_mode: opt.dark_mode,\n        env: opt.env\n      };\n    },\n    xhr: function xhr() {\n      return XHR;\n    },\n    handle: function handle() {\n      return _handle;\n    },\n    button: function button() {\n      return buttons;\n    },\n    alert: function alert() {\n      return alerts;\n    },\n    forms: function forms() {\n      return _forms;\n    },\n    format: function format() {\n      return _format;\n    },\n    token: methods.checkCsrfToken\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/Messenger.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/app.js":
/*!*********************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/app.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'vanilla-lazyload'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/**\n * First we will load all of this project's JavaScript dependencies which\n * includes Vue and other libraries. It is a great starting point when\n * building robust, powerful web applications using Vue and Laravel.\n */\n\n__webpack_require__(/*! ./bootstrap */ \"./vendor/rtippin/messenger-ui/resources/js/bootstrap.js\");\n\n\n/**\n * Next, we define a few global options for toastr, autolinker, and datatables\n */\n\nwindow.LazyImages = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'vanilla-lazyload'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n  elements_selector: \".lazy\"\n});\ntoastr.options = {\n  \"progressBar\": true,\n  \"closeButton\": true,\n  \"positionClass\": \"toast-top-right\",\n  \"preventDuplicates\": false,\n  \"onclick\": null,\n  \"showDuration\": \"100\",\n  \"hideDuration\": \"500\",\n  \"timeOut\": \"1700\",\n  \"extendedTimeOut\": \"1000\",\n  \"showEasing\": \"swing\",\n  \"hideEasing\": \"linear\",\n  \"showMethod\": \"fadeIn\",\n  \"hideMethod\": \"fadeOut\",\n  \"closeHtml\": \"<button><i class=\\\"fas fa-times\\\"></i></button>\"\n};\nwindow.autolinker = new Autolinker({\n  urls: {\n    schemeMatches: true,\n    wwwMatches: true,\n    tldMatches: true\n  },\n  email: true,\n  phone: false,\n  mention: false,\n  hashtag: false,\n  stripPrefix: true,\n  stripTrailingSlash: true,\n  newWindow: true,\n  truncate: {\n    length: 50,\n    location: 'smart'\n  }\n});\n$.extend(true, $.fn.dataTable.defaults, {\n  \"drawCallback\": function drawCallback(settings) {\n    var api = new $.fn.DataTable.Api(settings),\n      pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');\n    pagination.toggle(api.page.info().pages > 1);\n    $(this).find('tr').last().find(\".dropdown\").addClass('dropup');\n    LazyImages.update();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL2FwcC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxtQkFBTyxDQUFDLDRFQUFhLENBQUM7QUFFa0I7O0FBRXhDO0FBQ0E7QUFDQTs7QUFFQUUsTUFBTSxDQUFDQyxVQUFVLEdBQUcsSUFBSUYsK0lBQVEsQ0FBQztFQUM3QkcsaUJBQWlCLEVBQUU7QUFDdkIsQ0FBQyxDQUFDO0FBRUZDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2IsYUFBYSxFQUFFLElBQUk7RUFDbkIsYUFBYSxFQUFHLElBQUk7RUFDcEIsZUFBZSxFQUFFLGlCQUFpQjtFQUNsQyxtQkFBbUIsRUFBRSxLQUFLO0VBQzFCLFNBQVMsRUFBRSxJQUFJO0VBQ2YsY0FBYyxFQUFFLEtBQUs7RUFDckIsY0FBYyxFQUFFLEtBQUs7RUFDckIsU0FBUyxFQUFFLE1BQU07RUFDakIsaUJBQWlCLEVBQUUsTUFBTTtFQUN6QixZQUFZLEVBQUUsT0FBTztFQUNyQixZQUFZLEVBQUUsUUFBUTtFQUN0QixZQUFZLEVBQUUsUUFBUTtFQUN0QixZQUFZLEVBQUUsU0FBUztFQUN2QixXQUFXLEVBQUc7QUFDbEIsQ0FBQztBQUNESixNQUFNLENBQUNLLFVBQVUsR0FBRyxJQUFJQyxVQUFVLENBQUM7RUFDL0JDLElBQUksRUFBRztJQUNIQyxhQUFhLEVBQUcsSUFBSTtJQUNwQkMsVUFBVSxFQUFHLElBQUk7SUFDakJDLFVBQVUsRUFBRztFQUNqQixDQUFDO0VBQ0RDLEtBQUssRUFBRyxJQUFJO0VBQ1pDLEtBQUssRUFBRyxLQUFLO0VBQ2JDLE9BQU8sRUFBRyxLQUFLO0VBQ2ZDLE9BQU8sRUFBRyxLQUFLO0VBQ2ZDLFdBQVcsRUFBRyxJQUFJO0VBQ2xCQyxrQkFBa0IsRUFBRyxJQUFJO0VBQ3pCQyxTQUFTLEVBQUcsSUFBSTtFQUNoQkMsUUFBUSxFQUFHO0lBQ1BDLE1BQU0sRUFBRyxFQUFFO0lBQ1hDLFFBQVEsRUFBRztFQUNmO0FBQ0osQ0FBQyxDQUFDO0FBRUZDLENBQUMsQ0FBQ0MsTUFBTSxDQUFFLElBQUksRUFBRUQsQ0FBQyxDQUFDRSxFQUFFLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxFQUFFO0VBQ3JDLGNBQWMsRUFBRSxTQUFBQyxhQUFTQyxRQUFRLEVBQUM7SUFDOUIsSUFBSUMsR0FBRyxHQUFHLElBQUlQLENBQUMsQ0FBQ0UsRUFBRSxDQUFDTSxTQUFTLENBQUNDLEdBQUcsQ0FBQ0gsUUFBUSxDQUFDO01BQUVJLFVBQVUsR0FBR1YsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDVyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLHNCQUFzQixDQUFDO0lBQzVIRixVQUFVLENBQUNHLE1BQU0sQ0FBQ04sR0FBRyxDQUFDTyxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDNUNoQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUNZLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQ0ssSUFBSSxDQUFDLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDTSxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQzlEdEMsVUFBVSxDQUFDdUMsTUFBTSxDQUFDLENBQUM7RUFDdkI7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL2FwcC5qcz81NWEyIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBGaXJzdCB3ZSB3aWxsIGxvYWQgYWxsIG9mIHRoaXMgcHJvamVjdCdzIEphdmFTY3JpcHQgZGVwZW5kZW5jaWVzIHdoaWNoXG4gKiBpbmNsdWRlcyBWdWUgYW5kIG90aGVyIGxpYnJhcmllcy4gSXQgaXMgYSBncmVhdCBzdGFydGluZyBwb2ludCB3aGVuXG4gKiBidWlsZGluZyByb2J1c3QsIHBvd2VyZnVsIHdlYiBhcHBsaWNhdGlvbnMgdXNpbmcgVnVlIGFuZCBMYXJhdmVsLlxuICovXG5cbnJlcXVpcmUoJy4vYm9vdHN0cmFwJyk7XG5cbmltcG9ydCBMYXp5TG9hZCBmcm9tIFwidmFuaWxsYS1sYXp5bG9hZFwiO1xuXG4vKipcbiAqIE5leHQsIHdlIGRlZmluZSBhIGZldyBnbG9iYWwgb3B0aW9ucyBmb3IgdG9hc3RyLCBhdXRvbGlua2VyLCBhbmQgZGF0YXRhYmxlc1xuICovXG5cbndpbmRvdy5MYXp5SW1hZ2VzID0gbmV3IExhenlMb2FkKHtcbiAgICBlbGVtZW50c19zZWxlY3RvcjogXCIubGF6eVwiXG59KTtcblxudG9hc3RyLm9wdGlvbnMgPSB7XG4gICAgXCJwcm9ncmVzc0JhclwiOiB0cnVlLFxuICAgIFwiY2xvc2VCdXR0b25cIiA6IHRydWUsXG4gICAgXCJwb3NpdGlvbkNsYXNzXCI6IFwidG9hc3QtdG9wLXJpZ2h0XCIsXG4gICAgXCJwcmV2ZW50RHVwbGljYXRlc1wiOiBmYWxzZSxcbiAgICBcIm9uY2xpY2tcIjogbnVsbCxcbiAgICBcInNob3dEdXJhdGlvblwiOiBcIjEwMFwiLFxuICAgIFwiaGlkZUR1cmF0aW9uXCI6IFwiNTAwXCIsXG4gICAgXCJ0aW1lT3V0XCI6IFwiMTcwMFwiLFxuICAgIFwiZXh0ZW5kZWRUaW1lT3V0XCI6IFwiMTAwMFwiLFxuICAgIFwic2hvd0Vhc2luZ1wiOiBcInN3aW5nXCIsXG4gICAgXCJoaWRlRWFzaW5nXCI6IFwibGluZWFyXCIsXG4gICAgXCJzaG93TWV0aG9kXCI6IFwiZmFkZUluXCIsXG4gICAgXCJoaWRlTWV0aG9kXCI6IFwiZmFkZU91dFwiLFxuICAgIFwiY2xvc2VIdG1sXCIgOiBcIjxidXR0b24+PGkgY2xhc3M9XFxcImZhcyBmYS10aW1lc1xcXCI+PC9pPjwvYnV0dG9uPlwiXG59O1xud2luZG93LmF1dG9saW5rZXIgPSBuZXcgQXV0b2xpbmtlcih7XG4gICAgdXJscyA6IHtcbiAgICAgICAgc2NoZW1lTWF0Y2hlcyA6IHRydWUsXG4gICAgICAgIHd3d01hdGNoZXMgOiB0cnVlLFxuICAgICAgICB0bGRNYXRjaGVzIDogdHJ1ZVxuICAgIH0sXG4gICAgZW1haWwgOiB0cnVlLFxuICAgIHBob25lIDogZmFsc2UsXG4gICAgbWVudGlvbiA6IGZhbHNlLFxuICAgIGhhc2h0YWcgOiBmYWxzZSxcbiAgICBzdHJpcFByZWZpeCA6IHRydWUsXG4gICAgc3RyaXBUcmFpbGluZ1NsYXNoIDogdHJ1ZSxcbiAgICBuZXdXaW5kb3cgOiB0cnVlLFxuICAgIHRydW5jYXRlIDoge1xuICAgICAgICBsZW5ndGggOiA1MCxcbiAgICAgICAgbG9jYXRpb24gOiAnc21hcnQnXG4gICAgfVxufSk7XG5cbiQuZXh0ZW5kKCB0cnVlLCAkLmZuLmRhdGFUYWJsZS5kZWZhdWx0cywge1xuICAgIFwiZHJhd0NhbGxiYWNrXCI6IGZ1bmN0aW9uKHNldHRpbmdzKXtcbiAgICAgICAgbGV0IGFwaSA9IG5ldyAkLmZuLkRhdGFUYWJsZS5BcGkoc2V0dGluZ3MpLCBwYWdpbmF0aW9uID0gJCh0aGlzKS5jbG9zZXN0KCcuZGF0YVRhYmxlc193cmFwcGVyJykuZmluZCgnLmRhdGFUYWJsZXNfcGFnaW5hdGUnKTtcbiAgICAgICAgcGFnaW5hdGlvbi50b2dnbGUoYXBpLnBhZ2UuaW5mbygpLnBhZ2VzID4gMSk7XG4gICAgICAgICQodGhpcykuZmluZCgndHInKS5sYXN0KCkuZmluZChcIi5kcm9wZG93blwiKS5hZGRDbGFzcygnZHJvcHVwJyk7XG4gICAgICAgIExhenlJbWFnZXMudXBkYXRlKCk7XG4gICAgfVxufSk7Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJMYXp5TG9hZCIsIndpbmRvdyIsIkxhenlJbWFnZXMiLCJlbGVtZW50c19zZWxlY3RvciIsInRvYXN0ciIsIm9wdGlvbnMiLCJhdXRvbGlua2VyIiwiQXV0b2xpbmtlciIsInVybHMiLCJzY2hlbWVNYXRjaGVzIiwid3d3TWF0Y2hlcyIsInRsZE1hdGNoZXMiLCJlbWFpbCIsInBob25lIiwibWVudGlvbiIsImhhc2h0YWciLCJzdHJpcFByZWZpeCIsInN0cmlwVHJhaWxpbmdTbGFzaCIsIm5ld1dpbmRvdyIsInRydW5jYXRlIiwibGVuZ3RoIiwibG9jYXRpb24iLCIkIiwiZXh0ZW5kIiwiZm4iLCJkYXRhVGFibGUiLCJkZWZhdWx0cyIsImRyYXdDYWxsYmFjayIsInNldHRpbmdzIiwiYXBpIiwiRGF0YVRhYmxlIiwiQXBpIiwicGFnaW5hdGlvbiIsImNsb3Nlc3QiLCJmaW5kIiwidG9nZ2xlIiwicGFnZSIsImluZm8iLCJwYWdlcyIsImxhc3QiLCJhZGRDbGFzcyIsInVwZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/app.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/bootstrap.js":
/*!***************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/bootstrap.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'datatables.net-bs4'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'simplebar'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* harmony import */ var _Messenger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Messenger */ \"./vendor/rtippin/messenger-ui/resources/js/Messenger.js\");\n/* harmony import */ var _Messenger__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Messenger__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _managers_PageListeners__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./managers/PageListeners */ \"./vendor/rtippin/messenger-ui/resources/js/managers/PageListeners.js\");\n/* harmony import */ var _managers_PageListeners__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_managers_PageListeners__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _managers_InactivityManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./managers/InactivityManager */ \"./vendor/rtippin/messenger-ui/resources/js/managers/InactivityManager.js\");\n/* harmony import */ var _managers_InactivityManager__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_managers_InactivityManager__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _managers_CallManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./managers/CallManager */ \"./vendor/rtippin/messenger-ui/resources/js/managers/CallManager.js\");\n/* harmony import */ var _managers_CallManager__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_managers_CallManager__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _managers_NotifyManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./managers/NotifyManager */ \"./vendor/rtippin/messenger-ui/resources/js/managers/NotifyManager.js\");\n/* harmony import */ var _managers_FriendsManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./managers/FriendsManager */ \"./vendor/rtippin/messenger-ui/resources/js/managers/FriendsManager.js\");\n/* harmony import */ var _managers_FriendsManager__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_managers_FriendsManager__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _managers_ThreadManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./managers/ThreadManager */ \"./vendor/rtippin/messenger-ui/resources/js/managers/ThreadManager.js\");\n/* harmony import */ var _managers_ThreadManager__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_managers_ThreadManager__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _modules_ThreadBots__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/ThreadBots */ \"./vendor/rtippin/messenger-ui/resources/js/modules/ThreadBots.js\");\n/* harmony import */ var _modules_ThreadBots__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_modules_ThreadBots__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _templates_ThreadTemplates__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./templates/ThreadTemplates */ \"./vendor/rtippin/messenger-ui/resources/js/templates/ThreadTemplates.js\");\n/* harmony import */ var _templates_ThreadTemplates__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_templates_ThreadTemplates__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _modules_MessengerSettings__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/MessengerSettings */ \"./vendor/rtippin/messenger-ui/resources/js/modules/MessengerSettings.js\");\n/* harmony import */ var _modules_MessengerSettings__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_modules_MessengerSettings__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _modules_RecordAudio__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/RecordAudio */ \"./vendor/rtippin/messenger-ui/resources/js/modules/RecordAudio.js\");\n/* harmony import */ var _modules_InviteJoin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/InviteJoin */ \"./vendor/rtippin/messenger-ui/resources/js/modules/InviteJoin.js\");\n/* harmony import */ var _modules_InviteJoin__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_modules_InviteJoin__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _modules_EmojiPicker__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/EmojiPicker */ \"./vendor/rtippin/messenger-ui/resources/js/modules/EmojiPicker.js\");\n/**\n * We'll load jQuery and the Bootstrap jQuery plugin which provides support\n * for JavaScript based Bootstrap features such as modals and tabs. This\n * code may be modified to fit the specific needs of your application.\n */\n\n// window.$ = window.jQuery = require('jquery');\nvar token = document.head.querySelector('meta[name=\"csrf-token\"]');\nwindow.Laravel = {\n  csrfToken: token.content\n};\n\n// require('bootstrap-sass');\ntry {\n  window.Popper = (__webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\")[\"default\"]);\n  __webpack_require__(/*! bootstrap */ \"./node_modules/bootstrap/dist/js/bootstrap.js\");\n} catch (e) {}\n\n/**\n * We'll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\n */\n\nwindow.axios = __webpack_require__(/*! axios */ \"./node_modules/axios/dist/browser/axios.cjs\");\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n/**\n * Next we will register the CSRF Token as a common header with Axios so that\n * all outgoing HTTP requests automatically have it attached. This is just\n * a simple convenience so we don't have to attach every token manually.\n */\n\nif (token) {\n  window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n} else {\n  console.error('CSRF token not found');\n}\n\n/**\n * Load dependencies used across this app\n * Autolinker makes text links clickable\n * Datatables turns a table into a JS instance with sorting\n * Toastr is used for notification popups\n * Autosize allows textareas to grow dynamically\n * Validator is for BS3 and adds validation to forms using html5 attr\n */\nwindow.uuid = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/index.js\");\nwindow.Autolinker = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'autolinker'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\nwindow.dt = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'datatables.net'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nwindow.toastr = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'toastr'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nwindow.dayjs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'dayjs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nvar relativeTime = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'dayjs/plugin/relativeTime'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nvar advancedFormat = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'dayjs/plugin/advancedFormat'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nvar utc = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'dayjs/plugin/utc'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\ndayjs.extend(relativeTime);\ndayjs.extend(advancedFormat);\ndayjs.extend(utc);\n\n\n/**\n * Now we need to load in our global app controllers (Routers)\n * Messenger holds global methods and common data\n * PageListeners holds events and watchers to be called\n * on any page at any time\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJQSxLQUFLLEdBQUdDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMseUJBQXlCLENBQUM7QUFDbEVDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQUVDLFNBQVMsRUFBRU4sS0FBSyxDQUFDTztBQUFRLENBQUM7O0FBRzdDO0FBQ0EsSUFBSTtFQUNBSCxNQUFNLENBQUNJLE1BQU0sR0FBR0MsZ0dBQTRCO0VBQzVDQSxtQkFBTyxDQUFDLGdFQUFXLENBQUM7QUFDeEIsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRSxDQUFDOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFOLE1BQU0sQ0FBQ08sS0FBSyxHQUFHRixtQkFBTyxDQUFDLDBEQUFPLENBQUM7QUFFL0JMLE1BQU0sQ0FBQ08sS0FBSyxDQUFDQyxRQUFRLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsZ0JBQWdCOztBQUUzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBLElBQUlkLEtBQUssRUFBRTtFQUNQSSxNQUFNLENBQUNPLEtBQUssQ0FBQ0MsUUFBUSxDQUFDQyxPQUFPLENBQUNDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBR2QsS0FBSyxDQUFDTyxPQUFPO0FBQ3hFLENBQUMsTUFBTTtFQUNIUSxPQUFPLENBQUNDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FaLE1BQU0sQ0FBQ2EsSUFBSSxHQUFHUixtQkFBTyxDQUFDLDJEQUFNLENBQUM7QUFDN0JMLE1BQU0sQ0FBQ2MsVUFBVSxHQUFHVCxtQkFBTyxDQUFDLHlJQUFZLENBQUM7QUFDTDtBQUNwQ0wsTUFBTSxDQUFDZSxFQUFFLEdBQUdWLG1CQUFPLENBQUUsNklBQWdCLENBQUM7QUFDdENMLE1BQU0sQ0FBQ2dCLE1BQU0sR0FBR1gsbUJBQU8sQ0FBQyxxSUFBUSxDQUFDO0FBQ2pDTCxNQUFNLENBQUNpQixLQUFLLEdBQUdaLG1CQUFPLENBQUMsb0lBQU8sQ0FBQztBQUMvQixJQUFJYSxZQUFZLEdBQUdiLG1CQUFPLENBQUMsd0pBQTJCLENBQUM7QUFDdkQsSUFBSWMsY0FBYyxHQUFHZCxtQkFBTyxDQUFDLDBKQUE2QixDQUFDO0FBQzNELElBQUllLEdBQUcsR0FBR2YsbUJBQU8sQ0FBQywrSUFBa0IsQ0FBQztBQUNyQ1ksS0FBSyxDQUFDSSxNQUFNLENBQUNILFlBQVksQ0FBQztBQUMxQkQsS0FBSyxDQUFDSSxNQUFNLENBQUNGLGNBQWMsQ0FBQztBQUM1QkYsS0FBSyxDQUFDSSxNQUFNLENBQUNELEdBQUcsQ0FBQztBQUNFOztBQUVuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXNDO0FBQ2lCO0FBQ1E7QUFDWjtBQUNJO0FBQ0U7QUFDRjtBQUNQO0FBQ1k7QUFDRTtBQUNaO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC5qcz8zN2NhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2UnbGwgbG9hZCBqUXVlcnkgYW5kIHRoZSBCb290c3RyYXAgalF1ZXJ5IHBsdWdpbiB3aGljaCBwcm92aWRlcyBzdXBwb3J0XG4gKiBmb3IgSmF2YVNjcmlwdCBiYXNlZCBCb290c3RyYXAgZmVhdHVyZXMgc3VjaCBhcyBtb2RhbHMgYW5kIHRhYnMuIFRoaXNcbiAqIGNvZGUgbWF5IGJlIG1vZGlmaWVkIHRvIGZpdCB0aGUgc3BlY2lmaWMgbmVlZHMgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAqL1xuXG4vLyB3aW5kb3cuJCA9IHdpbmRvdy5qUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKTtcbmxldCB0b2tlbiA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpO1xud2luZG93LkxhcmF2ZWwgPSB7IGNzcmZUb2tlbjogdG9rZW4uY29udGVudCB9O1xuXG5cbi8vIHJlcXVpcmUoJ2Jvb3RzdHJhcC1zYXNzJyk7XG50cnkge1xuICAgIHdpbmRvdy5Qb3BwZXIgPSByZXF1aXJlKCdwb3BwZXIuanMnKS5kZWZhdWx0O1xuICAgIHJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xufSBjYXRjaCAoZSkge31cblxuLyoqXG4gKiBXZSdsbCBsb2FkIHRoZSBheGlvcyBIVFRQIGxpYnJhcnkgd2hpY2ggYWxsb3dzIHVzIHRvIGVhc2lseSBpc3N1ZSByZXF1ZXN0c1xuICogdG8gb3VyIExhcmF2ZWwgYmFjay1lbmQuIFRoaXMgbGlicmFyeSBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgc2VuZGluZyB0aGVcbiAqIENTUkYgdG9rZW4gYXMgYSBoZWFkZXIgYmFzZWQgb24gdGhlIHZhbHVlIG9mIHRoZSBcIlhTUkZcIiB0b2tlbiBjb29raWUuXG4gKi9cblxud2luZG93LmF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxud2luZG93LmF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLVJlcXVlc3RlZC1XaXRoJ10gPSAnWE1MSHR0cFJlcXVlc3QnO1xuXG4vKipcbiAqIE5leHQgd2Ugd2lsbCByZWdpc3RlciB0aGUgQ1NSRiBUb2tlbiBhcyBhIGNvbW1vbiBoZWFkZXIgd2l0aCBBeGlvcyBzbyB0aGF0XG4gKiBhbGwgb3V0Z29pbmcgSFRUUCByZXF1ZXN0cyBhdXRvbWF0aWNhbGx5IGhhdmUgaXQgYXR0YWNoZWQuIFRoaXMgaXMganVzdFxuICogYSBzaW1wbGUgY29udmVuaWVuY2Ugc28gd2UgZG9uJ3QgaGF2ZSB0byBhdHRhY2ggZXZlcnkgdG9rZW4gbWFudWFsbHkuXG4gKi9cblxuXG5cbmlmICh0b2tlbikge1xuICAgIHdpbmRvdy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1DU1JGLVRPS0VOJ10gPSB0b2tlbi5jb250ZW50O1xufSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKCdDU1JGIHRva2VuIG5vdCBmb3VuZCcpO1xufVxuXG4vKipcbiAqIExvYWQgZGVwZW5kZW5jaWVzIHVzZWQgYWNyb3NzIHRoaXMgYXBwXG4gKiBBdXRvbGlua2VyIG1ha2VzIHRleHQgbGlua3MgY2xpY2thYmxlXG4gKiBEYXRhdGFibGVzIHR1cm5zIGEgdGFibGUgaW50byBhIEpTIGluc3RhbmNlIHdpdGggc29ydGluZ1xuICogVG9hc3RyIGlzIHVzZWQgZm9yIG5vdGlmaWNhdGlvbiBwb3B1cHNcbiAqIEF1dG9zaXplIGFsbG93cyB0ZXh0YXJlYXMgdG8gZ3JvdyBkeW5hbWljYWxseVxuICogVmFsaWRhdG9yIGlzIGZvciBCUzMgYW5kIGFkZHMgdmFsaWRhdGlvbiB0byBmb3JtcyB1c2luZyBodG1sNSBhdHRyXG4gKi9cbndpbmRvdy51dWlkID0gcmVxdWlyZSgndXVpZCcpO1xud2luZG93LkF1dG9saW5rZXIgPSByZXF1aXJlKCdhdXRvbGlua2VyJyk7XG5pbXBvcnQgZHQgZnJvbSAnZGF0YXRhYmxlcy5uZXQtYnM0JztcbndpbmRvdy5kdCA9IHJlcXVpcmUoICdkYXRhdGFibGVzLm5ldCcpO1xud2luZG93LnRvYXN0ciA9IHJlcXVpcmUoJ3RvYXN0cicpO1xud2luZG93LmRheWpzID0gcmVxdWlyZSgnZGF5anMnKTtcbmxldCByZWxhdGl2ZVRpbWUgPSByZXF1aXJlKCdkYXlqcy9wbHVnaW4vcmVsYXRpdmVUaW1lJyk7XG5sZXQgYWR2YW5jZWRGb3JtYXQgPSByZXF1aXJlKCdkYXlqcy9wbHVnaW4vYWR2YW5jZWRGb3JtYXQnKTtcbmxldCB1dGMgPSByZXF1aXJlKCdkYXlqcy9wbHVnaW4vdXRjJyk7XG5kYXlqcy5leHRlbmQocmVsYXRpdmVUaW1lKTtcbmRheWpzLmV4dGVuZChhZHZhbmNlZEZvcm1hdCk7XG5kYXlqcy5leHRlbmQodXRjKTtcbmltcG9ydCAnc2ltcGxlYmFyJztcblxuLyoqXG4gKiBOb3cgd2UgbmVlZCB0byBsb2FkIGluIG91ciBnbG9iYWwgYXBwIGNvbnRyb2xsZXJzIChSb3V0ZXJzKVxuICogTWVzc2VuZ2VyIGhvbGRzIGdsb2JhbCBtZXRob2RzIGFuZCBjb21tb24gZGF0YVxuICogUGFnZUxpc3RlbmVycyBob2xkcyBldmVudHMgYW5kIHdhdGNoZXJzIHRvIGJlIGNhbGxlZFxuICogb24gYW55IHBhZ2UgYXQgYW55IHRpbWVcbiAqL1xuXG5pbXBvcnQge01lc3Nlbmdlcn0gZnJvbSAnLi9NZXNzZW5nZXInO1xuaW1wb3J0IHtQYWdlTGlzdGVuZXJzfSBmcm9tICcuL21hbmFnZXJzL1BhZ2VMaXN0ZW5lcnMnO1xuaW1wb3J0IHtJbmFjdGl2aXR5TWFuYWdlcn0gZnJvbSAnLi9tYW5hZ2Vycy9JbmFjdGl2aXR5TWFuYWdlcic7XG5pbXBvcnQge0NhbGxNYW5hZ2VyfSBmcm9tICcuL21hbmFnZXJzL0NhbGxNYW5hZ2VyJztcbmltcG9ydCB7Tm90aWZ5TWFuYWdlcn0gZnJvbSAnLi9tYW5hZ2Vycy9Ob3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7RnJpZW5kc01hbmFnZXJ9IGZyb20gJy4vbWFuYWdlcnMvRnJpZW5kc01hbmFnZXInO1xuaW1wb3J0IHtUaHJlYWRNYW5hZ2VyfSBmcm9tICcuL21hbmFnZXJzL1RocmVhZE1hbmFnZXInO1xuaW1wb3J0IHtUaHJlYWRCb3RzfSBmcm9tICcuL21vZHVsZXMvVGhyZWFkQm90cyc7XG5pbXBvcnQge1RocmVhZFRlbXBsYXRlc30gZnJvbSAnLi90ZW1wbGF0ZXMvVGhyZWFkVGVtcGxhdGVzJztcbmltcG9ydCB7TWVzc2VuZ2VyU2V0dGluZ3N9IGZyb20gJy4vbW9kdWxlcy9NZXNzZW5nZXJTZXR0aW5ncyc7XG5pbXBvcnQge1JlY29yZEF1ZGlvfSBmcm9tICcuL21vZHVsZXMvUmVjb3JkQXVkaW8nO1xuaW1wb3J0IHtJbnZpdGVKb2lufSBmcm9tICcuL21vZHVsZXMvSW52aXRlSm9pbic7XG5pbXBvcnQge0Vtb2ppUGlja2VyfSBmcm9tICcuL21vZHVsZXMvRW1vamlQaWNrZXInOyJdLCJuYW1lcyI6WyJ0b2tlbiIsImRvY3VtZW50IiwiaGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJMYXJhdmVsIiwiY3NyZlRva2VuIiwiY29udGVudCIsIlBvcHBlciIsInJlcXVpcmUiLCJlIiwiYXhpb3MiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJjb25zb2xlIiwiZXJyb3IiLCJ1dWlkIiwiQXV0b2xpbmtlciIsImR0IiwidG9hc3RyIiwiZGF5anMiLCJyZWxhdGl2ZVRpbWUiLCJhZHZhbmNlZEZvcm1hdCIsInV0YyIsImV4dGVuZCIsIk1lc3NlbmdlciIsIlBhZ2VMaXN0ZW5lcnMiLCJJbmFjdGl2aXR5TWFuYWdlciIsIkNhbGxNYW5hZ2VyIiwiTm90aWZ5TWFuYWdlciIsIkZyaWVuZHNNYW5hZ2VyIiwiVGhyZWFkTWFuYWdlciIsIlRocmVhZEJvdHMiLCJUaHJlYWRUZW1wbGF0ZXMiLCJNZXNzZW5nZXJTZXR0aW5ncyIsIlJlY29yZEF1ZGlvIiwiSW52aXRlSm9pbiIsIkVtb2ppUGlja2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/bootstrap.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/managers/CallManager.js":
/*!**************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/managers/CallManager.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.CallManager = function () {\n  var opt = {\n      initialized: false,\n      INIT_time: null,\n      API: Messenger.common().API,\n      demo: false,\n      processing: false,\n      _call: null,\n      call: false,\n      call_loaded: false,\n      call_id: null,\n      call_mode: null,\n      created_at: null,\n      call_type: null,\n      call_owner: null,\n      thread_id: null,\n      thread_type: null,\n      thread_name: null,\n      call_admin: null,\n      thread_admin: null,\n      room_id: null,\n      room_pin: null,\n      janus_secret: null,\n      janus_debug: false,\n      janus_ice: [],\n      janus_main: [],\n      channel: null,\n      channel_status: false,\n      active_profiles: [],\n      heartbeat_interval: null,\n      heartbeat_retries: 0,\n      elements: {\n        call_status: $(\"#call_status\"),\n        call_status_msg: $(\"#call_status_msg\"),\n        call_status_body: $(\"#call_status_body\"),\n        main_call: $(\"#main_call\")\n      }\n    },\n    mounted = {\n      Initialize: function Initialize(arg) {\n        if (opt.initialized) return;\n        opt.call = true;\n        opt.janus_secret = arg.janus_secret;\n        opt.janus_debug = arg.janus_debug;\n        opt.janus_main = arg.janus_main;\n        opt.janus_ice = arg.janus_ice;\n        opt.initialized = true;\n        if (arg.hasOwnProperty('demo')) {\n          opt.call_loaded = true;\n          opt.demo = true;\n          opt.room_id = parseInt(arg.room_id);\n          opt.room_pin = arg.room_pin;\n          Sockets.setupRTC();\n          return;\n        }\n        mounted.loadCall(arg.thread_id, arg.call_id, mounted.setup);\n      },\n      setup: function setup(call) {\n        opt.call_id = call.id;\n        opt.call_type = call.type;\n        if (!call.active || call.options.kicked) {\n          mounted.callFailed();\n          return;\n        }\n        opt._call = call;\n        opt.call_loaded = true;\n        opt.call_owner = call.owner_id;\n        opt.thread_id = call.thread_id;\n        opt.thread_type = call.meta.thread_type;\n        opt.thread_name = call.meta.thread_name;\n        opt.call_admin = call.options.admin;\n        opt.created_at = call.created_at;\n        opt.INIT_time = dayjs();\n        mounted.setJanusInfo(call, false);\n        NotifyManager.setTitle(call.meta.thread_name + ' | ' + 'Video Call');\n      },\n      loadCall: function loadCall(thread, call, success) {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + thread + '/calls/' + call,\n          success: success,\n          fail: mounted.callFailed\n        });\n      },\n      joinConfirm: function joinConfirm() {\n        opt.elements.call_status_msg.html('Ready to join with ' + opt._call.meta.thread_name + '?');\n        opt.elements.call_status_body.html(templates.join_confirm());\n        $(\"#call_join_confirm\").one('click', mounted.checkIfJoined);\n        $(\"#call_exit_confirm\").one('click', function () {\n          window.close();\n        });\n      },\n      checkIfJoined: function checkIfJoined() {\n        if (!opt._call.options.joined || !opt._call.options.in_call) {\n          opt.elements.call_status_body.html(Messenger.alert().loader(true));\n          Messenger.xhr().payload({\n            route: Messenger.common().API + 'threads/' + opt._call.thread_id + '/calls/' + opt._call.id + '/join',\n            data: {},\n            success: function success() {\n              mounted.loadCall(opt._call.thread_id, opt._call.id, function (call) {\n                mounted.setJanusInfo(call, true);\n              });\n            },\n            fail: mounted.callFailed,\n            bypass: true,\n            fail_alert: true\n          });\n        } else {\n          mounted.ready();\n        }\n      },\n      ready: function ready() {\n        Sockets.heartbeat(false);\n        Sockets.setupRTC();\n        mounted.setConnections();\n        opt.elements.call_status.addClass('NS');\n        opt.elements.main_call.removeClass('NS');\n        if (opt.call_admin) $(\"#end_call_nav\").removeClass('NS');\n        if (opt.call_type === 1) {\n          window.addEventListener(\"beforeunload\", methods.windowClosed, false);\n          window.addEventListener(\"keydown\", methods.checkForRefresh, false);\n        }\n      },\n      setJanusInfo: function setJanusInfo(call, reloaded) {\n        if (!call.options.setup_complete) {\n          setTimeout(function () {\n            mounted.loadCall(call.thread_id, call.id, mounted.setJanusInfo);\n          }, 1500);\n          return;\n        }\n        opt._call = call;\n        opt.call_admin = call.options.admin;\n        opt.room_id = parseInt(call.options.room_id);\n        opt.room_pin = call.options.room_pin;\n        if (reloaded) {\n          mounted.ready();\n        } else {\n          mounted.joinConfirm();\n        }\n      },\n      setConnections: function setConnections(delayed) {\n        if (!Messenger.common().modules.includes('NotifyManager') || !NotifyManager.sockets().status) {\n          if (Messenger.format().timeDiffInUnit(dayjs(), opt.INIT_time, 's') >= 8) {\n            delayed = true;\n          }\n          setTimeout(function () {\n            mounted.setConnections(true);\n          }, delayed ? 1000 : 0);\n          return;\n        }\n        Sockets.setup();\n      },\n      callFailed: function callFailed() {\n        Messenger.alert().Modal({\n          allow_close: false,\n          size: 'md',\n          theme: 'danger',\n          centered: true,\n          icon: 'video',\n          pre_loader: true,\n          title: 'Call session not found. Redirecting you...'\n        });\n        setTimeout(function () {\n          window.location.href = Messenger.common().WEB;\n        }, 4000);\n        setTimeout(function () {\n          window.close();\n        }, 3000);\n      }\n    },\n    Sockets = {\n      heartbeat: function heartbeat(check) {\n        if (opt.call_mode === 4) return;\n        var beat = function beat() {\n          if (Messenger.common().modules.includes('NotifyManager') && !NotifyManager.sockets().forced_disconnect) {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread_id + '/calls/' + opt.call_id + '/heartbeat',\n              success: function success() {\n                opt.heartbeat_retries = 0;\n              },\n              fail: Sockets.heartbeatFailed\n            });\n          }\n        };\n        beat();\n        if (check) return;\n        opt.heartbeat_interval = setInterval(beat, 30000);\n      },\n      heartbeatFailed: function heartbeatFailed() {\n        opt.heartbeat_retries++;\n        if (opt.heartbeat_retries < 4) Sockets.heartbeat(true);\n        if (opt.heartbeat_retries >= 4) {\n          clearInterval(opt.heartbeat_interval);\n          if (opt.channel) opt.channel.unsubscribe();\n          if (Messenger.common().modules.includes('JanusServer')) JanusServer.config().destroy();\n          mounted.callFailed();\n          setTimeout(function () {\n            window.close();\n          }, 3000);\n        }\n      },\n      setup: function setup() {\n        opt.channel = NotifyManager.sockets().Echo.join('messenger.call.' + opt.call_id + '.thread.' + opt.thread_id);\n        opt.channel.here(function (users) {\n          opt.active_profiles = [];\n          opt.channel_status = true;\n          $.each(users, function () {\n            if (!Messenger.isProvider(this.provider_id, null, this.provider_alias)) {\n              opt.active_profiles.push({\n                owner_id: this.provider_id,\n                avatar: this.avatar.sm,\n                name: this.name\n              });\n            }\n          });\n        }).joining(function (user) {\n          opt.active_profiles.push({\n            owner_id: user.provider_id,\n            avatar: user.avatar.sm,\n            name: user.name\n          });\n          Sockets.pushJoin(user);\n        }).leaving(function (user) {\n          for (var i = 0; i < opt.active_profiles.length; i++) {\n            if (opt.active_profiles[i].owner_id === user.provider_id) {\n              opt.active_profiles.splice(i, 1);\n              break;\n            }\n          }\n          Sockets.pushLeave(user);\n        }).listen('.shutdown', methods.serverShutdownNotice);\n      },\n      setupRTC: function setupRTC() {\n        if (!Messenger.common().modules.includes('JanusServer')) {\n          setTimeout(Sockets.setupRTC, 0);\n          return;\n        }\n        JanusServer.config().init(opt.demo);\n      },\n      pushJoin: function pushJoin(user) {\n        if (Messenger.common().modules.includes('JanusServer')) JanusServer.socket().peerJoin(user);\n      },\n      pushLeave: function pushLeave(user) {\n        if (Messenger.common().modules.includes('JanusServer')) JanusServer.socket().peerLeave(user);\n      },\n      disconnected: function disconnected() {\n        opt.channel_status = false;\n        if (Messenger.common().modules.includes('JanusServer')) JanusServer.socket().onDisconnect();\n      },\n      reconnected: function reconnected(full) {\n        opt.channel_status = true;\n        if (Messenger.common().modules.includes('JanusServer')) JanusServer.socket().onReconnect();\n      }\n    },\n    templates = {\n      call_alert: function call_alert(data) {\n        return '<div id=\"new_call_modal\" class=\"col-12 text-center mb-1\"><h4 class=\"font-weight-bold\">' + (data.call.thread_type === 2 ? data.call.thread_name : data.sender.name) + '</h4>' + '<img class=\"img-fluid rounded\" src=\"' + (data.call.thread_type === 2 ? data.call.thread_avatar.sm : data.sender.avatar.sm) + '\" /></div>';\n      },\n      join_confirm: function join_confirm() {\n        return '<div class=\"col-12 text-center\">' + '<button id=\"call_join_confirm\" type=\"button\" title=\"Join\" class=\"mx-3 shadow-lg btn btn-circle btn-circle-xl btn-success\">Join <i class=\"fas fa-video\"></i></button>' + '<button id=\"call_exit_confirm\" type=\"button\" title=\"Exit\" class=\"mx-3 shadow-lg btn btn-circle btn-circle-xl btn-danger\">Exit <i class=\"fas fa-times\"></i></button>' + '</div>';\n      }\n    },\n    methods = {\n      serverShutdownNotice: function serverShutdownNotice(server) {\n        NotifyManager.sound('notify');\n        if (server.shutdown) {\n          Messenger.alert().Modal({\n            icon: 'power-off',\n            unlock_buttons: false,\n            backdrop_ctrl: false,\n            title: 'Service Notice',\n            theme: 'warning',\n            body: 'Our calls system is going down for maintenance. You have <b>' + server.grace + ' minutes</b> ' + 'before your session will end automatically. We apologize for any inconvenience. ' + (server.message ? '<br><br>Note: ' + server.message : '')\n          });\n          return;\n        }\n        Messenger.alert().Modal({\n          icon: 'power-off',\n          unlock_buttons: false,\n          backdrop_ctrl: false,\n          title: 'Service Notice',\n          theme: 'success',\n          body: 'The calls system maintenance was cancelled. You may resume your session as normal.'\n        });\n      },\n      windowClosed: function windowClosed() {\n        if (window.opener) {\n          window.opener.CallManager.leave(true, {\n            type: 1,\n            id: opt.call_id,\n            thread_id: opt.thread_id\n          });\n        }\n      },\n      checkForRefresh: function checkForRefresh(e) {\n        if (e.key === 'F5' || e.ctrlKey && e.key === 'r') {\n          window.removeEventListener(\"beforeunload\", methods.windowClosed, false);\n        }\n      },\n      updateMessenger: function updateMessenger(call, action) {\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().callStatus(call, action);\n        }\n      },\n      incomingCall: function incomingCall(call) {\n        NotifyManager.sound('call');\n        methods.updateMessenger(call.call, 'incoming');\n        Messenger.alert().Modal({\n          wait_for_others: true,\n          backdrop_ctrl: false,\n          centered: true,\n          theme: 'primary',\n          icon: 'video',\n          size: 'sm',\n          title: 'Incoming video call',\n          body: templates.call_alert(call),\n          cb_btn_txt: 'Answer',\n          cb_btn_icon: 'video',\n          cb_btn_theme: 'success',\n          callback: function callback() {\n            methods.joinCall(call.call, true);\n          },\n          cb_close: true,\n          timer: 25000\n        });\n      },\n      joinCall: function joinCall(call) {\n        methods.openCallWindow(call);\n        methods.updateMessenger(call, 'joined');\n      },\n      leaveCall: function leaveCall(parent, call) {\n        if (!parent) {\n          opt.processing = true;\n          if (opt.heartbeat_interval) clearInterval(opt.heartbeat_interval);\n          if (opt.channel_status) opt.channel.unsubscribe();\n          if (opt.call_type === 1) window.removeEventListener(\"beforeunload\", methods.windowClosed, false);\n        }\n        var route;\n        if (parent) {\n          route = call.thread_id + '/calls/' + call.id + '/leave';\n        } else {\n          route = opt.thread_id + '/calls/' + opt.call_id + '/leave';\n        }\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + route,\n          data: {},\n          success: function success(data) {\n            if (parent) {\n              if (Messenger.common().modules.includes('ThreadManager')) {\n                ThreadManager.Import().callStatus(call, 'left');\n              }\n              NotifyManager.heartbeat();\n              return;\n            }\n            if (window.opener) {\n              if (typeof window.opener.ThreadManager !== 'undefined') {\n                window.opener.ThreadManager.Import().callStatus(opt._call, 'left');\n              }\n              if (typeof window.opener.NotifyManager !== 'undefined') window.opener.NotifyManager.heartbeat();\n            }\n            window.close();\n            setTimeout(function () {\n              window.close();\n              window.location.reload();\n            }, 2500);\n          },\n          fail: function fail() {\n            if (window.opener) window.close();\n          }\n        });\n      },\n      openCallWindow: function openCallWindow(call) {\n        var popUp = window.open('', call.id);\n        if (!popUp || typeof popUp.closed === 'undefined' || popUp.closed) {\n          Messenger.alert().destroyModal();\n          Messenger.alert().Modal({\n            size: 'md',\n            icon: 'video',\n            backdrop_ctrl: false,\n            title: 'Popup Blocked',\n            theme: 'info',\n            h4: false,\n            body: '<div class=\"card\"><div class=\"card-body bg-warning shadow rounded\">' + '<h5>It appears your browser is blocking popups. Please allow popups or click the link below to join the call</h5>' + '</div></div><div class=\"mt-4 col-12 text-center h3 font-weight-bold\"><a onclick=\"Messenger.alert().destroyModal()\" target=\"_blank\" href=\"' + Messenger.common().WEB + '/threads/' + call.thread_id + '/calls/' + call.id + '\" ><i class=\"fas fa-video\"></i> Join Call</a></div>'\n          });\n          return;\n        }\n        if (popUp.location.href === 'about:blank') popUp.location.href = Messenger.common().WEB + '/threads/' + call.thread_id + '/calls/' + call.id;\n        popUp.focus();\n      },\n      endCall: function endCall() {\n        if (!opt.call_admin) return;\n        if (opt.heartbeat_interval) clearInterval(opt.heartbeat_interval);\n        opt.initialized = false;\n        if (opt.call_type === 1) {\n          window.removeEventListener(\"beforeunload\", methods.windowClosed, false);\n        }\n        var route = opt.thread_id + '/calls/' + opt.call_id + '/end';\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + route,\n          data: {},\n          success: function success() {\n            if (opt.call_type === 1) {\n              window.close();\n              setTimeout(function () {\n                window.location.reload();\n              }, 3500);\n            }\n          },\n          fail: function fail() {\n            Messenger.xhr().lockout(false);\n          },\n          bypass: true\n        });\n        Messenger.xhr().lockout(true);\n      },\n      callEnded: function callEnded(call) {\n        methods.updateMessenger(call, 'ended');\n        if (opt.initialized && opt.call_type === 1) window.removeEventListener(\"beforeunload\", methods.windowClosed, false);\n        if (opt.initialized && call.id === opt.call_id) {\n          if (opt.heartbeat_interval) clearInterval(opt.heartbeat_interval);\n          setTimeout(function () {\n            window.location.reload();\n          }, 3500);\n        }\n        if (window.opener && call.id === opt.call_id && Messenger.common().modules.includes('JanusServer')) {\n          if (Messenger.common().modules.includes('JanusServer')) JanusServer.config().destroy();\n          window.close();\n        }\n      },\n      callLeft: function callLeft(call) {\n        if (opt.initialized) return;\n        methods.updateMessenger(call, 'left');\n      },\n      callJoined: function callJoined(call) {\n        if (opt.initialized) return;\n        var modal = $(\"#new_call_modal\");\n        methods.updateMessenger(call, 'joined');\n        if (modal.length) Messenger.alert().destroyModal();\n      },\n      popupNoCall: function popupNoCall() {\n        Messenger.alert().Alert({\n          toast: true,\n          theme: 'error',\n          title: 'It appears that call/replay is not available or does not exist'\n        });\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    newCall: methods.incomingCall,\n    join: methods.joinCall,\n    leave: methods.leaveCall,\n    joined: methods.callJoined,\n    left: methods.callLeft,\n    endCall: methods.endCall,\n    callEnded: methods.callEnded,\n    popupNoCall: methods.popupNoCall,\n    setThreadAdmin: function setThreadAdmin(x) {\n      opt.thread_admin = x;\n    },\n    state: function state() {\n      return {\n        initialized: opt.initialized,\n        processing: opt.processing,\n        call: opt.call,\n        call_loaded: opt.call_loaded,\n        call_id: opt.call_id,\n        call_mode: opt.call_mode,\n        call_type: opt.call_type,\n        call_owner: opt.call_owner,\n        call_admin: opt.call_admin,\n        demo: opt.demo,\n        room_id: opt.room_id,\n        room_pin: opt.room_pin,\n        janus_secret: opt.janus_secret,\n        janus_debug: opt.janus_debug,\n        janus_main: opt.janus_main,\n        janus_ice: opt.janus_ice,\n        created_at: opt.created_at,\n        thread_id: opt.thread_id,\n        thread_name: opt.thread_name,\n        thread_type: opt.thread_type,\n        thread_admin: opt.thread_admin\n      };\n    },\n    channel: function channel() {\n      return {\n        socket: opt.channel,\n        state: opt.channel_status,\n        profiles: opt.active_profiles,\n        reconnected: Sockets.reconnected,\n        disconnected: Sockets.disconnected\n      };\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/managers/CallManager.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/managers/FriendsManager.js":
/*!*****************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/managers/FriendsManager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.FriendsManager = function () {\n  var opt = {\n      lock: true\n    },\n    Initialize = {\n      init: function init() {\n        opt.lock = false;\n      }\n    },\n    templates = {\n      add_to: function add_to(data) {\n        if (\"dropdown\" in data) {\n          return '<a class=\"dropdown-item network_option\" onclick=\"FriendsManager.action({dropdown : true, provider_id : \\'' + data.provider_id + '\\', action : \\'add\\', provider_alias : \\'' + data.provider_alias + '\\'}); return false;\" href=\"#\">' + '<i class=\"fas fa-user-plus\"></i> Add friend</a>';\n        }\n        return '<button id=\"add_network_' + data.provider_id + '\" data-toggle=\"tooltip\" title=\"Add friend\" data-placement=\"top\" class=\"btn btn-success pt-1 pb-0 px-2\" ' + 'onclick=\"FriendsManager.action({action : \\'add\\', provider_alias : \\'' + data.provider_alias + '\\', provider_id : \\'' + data.provider_id + '\\'});\"><i class=\"fas fa-user-plus fa-2x\"></i></button>';\n      },\n      remove_from: function remove_from(data) {\n        if (\"dropdown\" in data) {\n          return '<a class=\"dropdown-item network_option\" onclick=\"FriendsManager.action({dropdown : true, provider_id : \\'' + data.provider_id + '\\', action : \\'remove\\', provider_alias : \\'' + data.provider_alias + '\\'}); return false;\" href=\"#\">' + '<i class=\"fas fa-user-times\"></i> Remove friend</a>';\n        }\n        return '<button id=\"remove_network_' + data.provider_id + '\" data-toggle=\"tooltip\" title=\"Remove friend\" data-placement=\"top\" class=\"btn btn-danger pt-1 pb-0 px-2\" ' + 'onclick=\"FriendsManager.action({action : \\'remove\\', provider_alias : \\'' + data.party.provider_alias + '\\', provider_id : \\'' + data.party.provider_id + '\\'});\"><i class=\"fas fa-user-times fa-2x\"></i></button>';\n      },\n      cancel_request: function cancel_request(data) {\n        if (\"dropdown\" in data) {\n          return '<a class=\"dropdown-item network_option\" onclick=\"FriendsManager.action({dropdown : true, provider_id : \\'' + data.recipient.provider_id + '\\', action : \\'cancel\\', sent_friend_id : \\'' + data.id + '\\', provider_alias : \\'' + data.recipient.provider_alias + '\\'}); return false;\" href=\"#\">' + '<i class=\"fas fa-ban\"></i> Cancel friend request</a>';\n        }\n        return '<button id=\"cancel_network_' + data.provider_id + '\" data-toggle=\"tooltip\" title=\"Cancel friend request\" data-placement=\"top\" class=\"btn btn-danger pt-1 pb-0 px-2\" ' + 'onclick=\"FriendsManager.action({provider_id : \\'' + data.recipient.provider_id + '\\', action : \\'cancel\\', sent_friend_id : \\'' + data.id + '\\', provider_alias : \\'' + data.recipient.provider_alias + '\\'});\"><i class=\"fas fa-ban fa-2x\"></i></button>';\n      }\n    },\n    methods = {\n      perform: function perform(arg) {\n        if (opt.lock) return;\n        Messenger.button().addLoader({\n          id: '#' + arg.action + '_network_' + arg.provider_id\n        });\n        switch (arg.action) {\n          case 'add':\n            methods.addFriend(arg);\n            break;\n          case 'remove':\n            methods.removeFriend(arg);\n            break;\n          case 'cancel':\n            methods.cancelFriend(arg);\n            break;\n          case 'accept':\n            methods.acceptFriend(arg);\n            break;\n          case 'deny':\n            methods.denyFriend(arg);\n            break;\n        }\n      },\n      addFriend: function addFriend(arg) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'friends/sent',\n          data: {\n            recipient_id: arg.provider_id,\n            recipient_alias: arg.provider_alias\n          },\n          shared: arg,\n          success: function success(sent) {\n            var elm = $(\"#network_for_\" + sent.recipient.provider_id);\n            if (elm.length) elm.html(templates.cancel_request(sent));\n            Messenger.alert().Alert({\n              title: 'Friends',\n              body: 'Friend request sent to ' + sent.recipient.name + '!',\n              toast: true,\n              theme: 'success'\n            });\n            PageListeners.listen().tooltips();\n          },\n          fail_alert: true\n        });\n      },\n      acceptFriend: function acceptFriend(arg) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'friends/pending/' + arg.pending_friend_id,\n          data: {},\n          shared: arg,\n          success: function success(friend) {\n            var elm = $(\"#network_for_\" + friend.party.provider_id);\n            if (elm.length) elm.html(templates.remove_from(friend));\n            Messenger.alert().Alert({\n              title: 'Friends',\n              body: 'Approved the friend request from ' + friend.party.name + '!',\n              toast: true,\n              theme: 'success'\n            });\n            PageListeners.listen().tooltips();\n            NotifyManager.friendsPending();\n          },\n          fail_alert: true\n        }, 'put');\n      },\n      cancelFriend: function cancelFriend(arg) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'friends/sent/' + arg.sent_friend_id,\n          data: {},\n          shared: arg,\n          success: function success(provider) {\n            var elm = $(\"#network_for_\" + provider.provider_id);\n            if (elm.length) elm.html(templates.add_to(provider));\n            Messenger.alert().Alert({\n              title: 'Friends',\n              body: 'Friend request cancelled.',\n              toast: true,\n              theme: 'warning'\n            });\n            PageListeners.listen().tooltips();\n            NotifyManager.sentFriends();\n          },\n          fail_alert: true\n        }, 'delete');\n      },\n      denyFriend: function denyFriend(arg) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'friends/pending/' + arg.pending_friend_id,\n          data: {},\n          shared: arg,\n          success: function success(provider) {\n            var elm = $(\"#network_for_\" + provider.provider_id);\n            if (elm.length) elm.html(templates.add_to(provider));\n            Messenger.alert().Alert({\n              title: 'Friends',\n              body: 'Friend request denied.',\n              toast: true,\n              theme: 'error'\n            });\n            PageListeners.listen().tooltips();\n            NotifyManager.friendsPending();\n          },\n          fail_alert: true\n        }, 'delete');\n      },\n      removeFriend: function removeFriend(arg) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'friends/' + arg.friend_id,\n          data: {},\n          shared: arg,\n          success: function success(provider) {\n            var elm = $(\"#network_for_\" + provider.provider_id);\n            if (elm.length) elm.html(templates.add_to(provider));\n            Messenger.alert().Alert({\n              title: 'Friends',\n              body: 'Friend removed.',\n              toast: true,\n              theme: 'error'\n            });\n            PageListeners.listen().tooltips();\n          },\n          fail_alert: true\n        }, 'delete');\n      }\n    };\n  return {\n    action: methods.perform,\n    init: Initialize.init,\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.lock = arg;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/managers/FriendsManager.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/managers/InactivityManager.js":
/*!********************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/managers/InactivityManager.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.InactivityManager = function () {\n  var presence_chat = null,\n    private_chat = null,\n    methods = {\n      resetTimer: function resetTimer(arg) {\n        switch (arg.type) {\n          case 1:\n            if (!private_chat) {\n              arg.activate();\n            } else {\n              window.clearTimeout(private_chat);\n            }\n            break;\n          case 2:\n            if (!presence_chat) {\n              arg.activate();\n            } else {\n              window.clearTimeout(presence_chat);\n            }\n            break;\n        }\n        methods.startTimer(arg);\n      },\n      startTimer: function startTimer(arg) {\n        switch (arg.type) {\n          case 1:\n            private_chat = setTimeout(function () {\n              methods.runInactive(arg);\n            }, 10800000); //3 hours (10800000)\n            break;\n          case 2:\n            presence_chat = setTimeout(function () {\n              methods.runInactive(arg);\n            }, CallManager.state().initialized ? 1800000 : 360000); //6 minutes (360000) - 30 minutes if in call (1800000)\n            break;\n        }\n      },\n      runInactive: function runInactive(arg) {\n        switch (arg.type) {\n          case 1:\n            private_chat = null;\n            break;\n          case 2:\n            presence_chat = null;\n            break;\n        }\n        arg.inactive();\n      },\n      setupTimer: function setupTimer(arg) {\n        $(window).mousemove(function () {\n          methods.resetTimer(arg);\n        });\n        $(window).keypress(function () {\n          methods.resetTimer(arg);\n        });\n        $(window).on(\"touchmove\", function () {\n          methods.resetTimer(arg);\n        });\n        methods.startTimer(arg);\n      }\n    };\n  return {\n    setup: methods.setupTimer\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL21hbmFnZXJzL0luYWN0aXZpdHlNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsTUFBTSxDQUFDQyxpQkFBaUIsR0FBSSxZQUFZO0VBQ3BDLElBQUlDLGFBQWEsR0FBRyxJQUFJO0lBQ3BCQyxZQUFZLEdBQUcsSUFBSTtJQUN2QkMsT0FBTyxHQUFHO01BQ05DLFVBQVUsRUFBRyxTQUFBQSxXQUFTQyxHQUFHLEVBQUM7UUFDdEIsUUFBT0EsR0FBRyxDQUFDQyxJQUFJO1VBQ1gsS0FBSyxDQUFDO1lBQ0YsSUFBRyxDQUFDSixZQUFZLEVBQUM7Y0FDYkcsR0FBRyxDQUFDRSxRQUFRLENBQUMsQ0FBQztZQUNsQixDQUFDLE1BQ0c7Y0FDQVIsTUFBTSxDQUFDUyxZQUFZLENBQUNOLFlBQVksQ0FBQztZQUNyQztZQUNKO1VBQ0EsS0FBSyxDQUFDO1lBQ0YsSUFBRyxDQUFDRCxhQUFhLEVBQUM7Y0FDZEksR0FBRyxDQUFDRSxRQUFRLENBQUMsQ0FBQztZQUNsQixDQUFDLE1BQ0c7Y0FDQVIsTUFBTSxDQUFDUyxZQUFZLENBQUNQLGFBQWEsQ0FBQztZQUN0QztZQUNKO1FBQ0o7UUFDQUUsT0FBTyxDQUFDTSxVQUFVLENBQUNKLEdBQUcsQ0FBQztNQUMzQixDQUFDO01BQ0RJLFVBQVUsRUFBRyxTQUFBQSxXQUFTSixHQUFHLEVBQUM7UUFDdEIsUUFBT0EsR0FBRyxDQUFDQyxJQUFJO1VBQ1gsS0FBSyxDQUFDO1lBQ0ZKLFlBQVksR0FBR1EsVUFBVSxDQUFDLFlBQVU7Y0FDaENQLE9BQU8sQ0FBQ1EsV0FBVyxDQUFDTixHQUFHLENBQUM7WUFDNUIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDbEI7VUFDQSxLQUFLLENBQUM7WUFDRkosYUFBYSxHQUFHUyxVQUFVLENBQUMsWUFBVTtjQUNqQ1AsT0FBTyxDQUFDUSxXQUFXLENBQUNOLEdBQUcsQ0FBQztZQUM1QixDQUFDLEVBQUdPLFdBQVcsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxHQUFHLE9BQU8sR0FBRyxNQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzlEO1FBQ0o7TUFDSixDQUFDO01BQ0RILFdBQVcsRUFBRyxTQUFBQSxZQUFTTixHQUFHLEVBQUM7UUFDdkIsUUFBT0EsR0FBRyxDQUFDQyxJQUFJO1VBQ1gsS0FBSyxDQUFDO1lBQ0ZKLFlBQVksR0FBRyxJQUFJO1lBQ3ZCO1VBQ0EsS0FBSyxDQUFDO1lBQ0ZELGFBQWEsR0FBRyxJQUFJO1lBQ3hCO1FBQ0o7UUFDQUksR0FBRyxDQUFDVSxRQUFRLENBQUMsQ0FBQztNQUNsQixDQUFDO01BQ0RDLFVBQVUsRUFBRyxTQUFBQSxXQUFTWCxHQUFHLEVBQUM7UUFDdEJZLENBQUMsQ0FBQ2xCLE1BQU0sQ0FBQyxDQUFDbUIsU0FBUyxDQUFDLFlBQVU7VUFDMUJmLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDQyxHQUFHLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBQ0ZZLENBQUMsQ0FBQ2xCLE1BQU0sQ0FBQyxDQUFDb0IsUUFBUSxDQUFDLFlBQVU7VUFDekJoQixPQUFPLENBQUNDLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDO1FBQzNCLENBQUMsQ0FBQztRQUNGWSxDQUFDLENBQUNsQixNQUFNLENBQUMsQ0FBQ3FCLEVBQUUsQ0FBQyxXQUFXLEVBQUUsWUFBVTtVQUNoQ2pCLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDQyxHQUFHLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBQ0ZGLE9BQU8sQ0FBQ00sVUFBVSxDQUFDSixHQUFHLENBQUM7TUFDM0I7SUFDSixDQUFDO0VBQ0QsT0FBTztJQUNIZ0IsS0FBSyxFQUFHbEIsT0FBTyxDQUFDYTtFQUNwQixDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL21hbmFnZXJzL0luYWN0aXZpdHlNYW5hZ2VyLmpzP2FkMjciXSwic291cmNlc0NvbnRlbnQiOlsid2luZG93LkluYWN0aXZpdHlNYW5hZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJlc2VuY2VfY2hhdCA9IG51bGwsXG4gICAgICAgIHByaXZhdGVfY2hhdCA9IG51bGwsXG4gICAgbWV0aG9kcyA9IHtcbiAgICAgICAgcmVzZXRUaW1lciA6IGZ1bmN0aW9uKGFyZyl7XG4gICAgICAgICAgICBzd2l0Y2goYXJnLnR5cGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYoIXByaXZhdGVfY2hhdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcuYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChwcml2YXRlX2NoYXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZighcHJlc2VuY2VfY2hhdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcuYWN0aXZhdGUoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHByZXNlbmNlX2NoYXQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGhvZHMuc3RhcnRUaW1lcihhcmcpO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydFRpbWVyIDogZnVuY3Rpb24oYXJnKXtcbiAgICAgICAgICAgIHN3aXRjaChhcmcudHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlX2NoYXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzLnJ1bkluYWN0aXZlKGFyZylcbiAgICAgICAgICAgICAgICAgICAgfSwgMTA4MDAwMDApOyAvLzMgaG91cnMgKDEwODAwMDAwKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VfY2hhdCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucnVuSW5hY3RpdmUoYXJnKVxuICAgICAgICAgICAgICAgICAgICB9LCAoQ2FsbE1hbmFnZXIuc3RhdGUoKS5pbml0aWFsaXplZCA/IDE4MDAwMDAgOiAzNjAwMDApKTsgLy82IG1pbnV0ZXMgKDM2MDAwMCkgLSAzMCBtaW51dGVzIGlmIGluIGNhbGwgKDE4MDAwMDApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bkluYWN0aXZlIDogZnVuY3Rpb24oYXJnKXtcbiAgICAgICAgICAgIHN3aXRjaChhcmcudHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlX2NoYXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VfY2hhdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcmcuaW5hY3RpdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0dXBUaW1lciA6IGZ1bmN0aW9uKGFyZyl7XG4gICAgICAgICAgICAkKHdpbmRvdykubW91c2Vtb3ZlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5yZXNldFRpbWVyKGFyZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQod2luZG93KS5rZXlwcmVzcyhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucmVzZXRUaW1lcihhcmcpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQod2luZG93KS5vbihcInRvdWNobW92ZVwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucmVzZXRUaW1lcihhcmcpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1ldGhvZHMuc3RhcnRUaW1lcihhcmcpXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldHVwIDogbWV0aG9kcy5zZXR1cFRpbWVyXG4gICAgfTtcbn0oKSk7Il0sIm5hbWVzIjpbIndpbmRvdyIsIkluYWN0aXZpdHlNYW5hZ2VyIiwicHJlc2VuY2VfY2hhdCIsInByaXZhdGVfY2hhdCIsIm1ldGhvZHMiLCJyZXNldFRpbWVyIiwiYXJnIiwidHlwZSIsImFjdGl2YXRlIiwiY2xlYXJUaW1lb3V0Iiwic3RhcnRUaW1lciIsInNldFRpbWVvdXQiLCJydW5JbmFjdGl2ZSIsIkNhbGxNYW5hZ2VyIiwic3RhdGUiLCJpbml0aWFsaXplZCIsImluYWN0aXZlIiwic2V0dXBUaW1lciIsIiQiLCJtb3VzZW1vdmUiLCJrZXlwcmVzcyIsIm9uIiwic2V0dXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/managers/InactivityManager.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/managers/NotifyManager.js":
/*!****************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/managers/NotifyManager.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var laravel_echo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! laravel-echo */ \"./node_modules/laravel-echo/dist/echo.js\");\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n\nwindow.Pusher = __webpack_require__(/*! pusher-js */ \"./node_modules/pusher-js/dist/web/pusher.js\");\nwindow.NotifyManager = function () {\n  var opt = {\n      sounds: {\n        notify_sound_file: new Audio([window.location.protocol, '//', window.location.host].join('') + '/vendor/messenger/sounds/notify_tone.mp3'),\n        message_sound_file: new Audio([window.location.protocol, '//', window.location.host].join('') + '/vendor/messenger/sounds/message_tone.mp3'),\n        call_sound_file: new Audio([window.location.protocol, '//', window.location.host].join('') + '/vendor/messenger/sounds/call_tone.mp3'),\n        knok_sound_file: new Audio([window.location.protocol, '//', window.location.host].join('') + '/vendor/messenger/sounds/knok.mp3')\n      },\n      elements: {\n        notify_count_area: $(\"#nav_notify_count\"),\n        thread_count_area: $(\"#nav_thread_count\"),\n        calls_count_area: $(\"#nav_calls_count\"),\n        active_call_nav_icon: $(\"#active_call_nav_icon\"),\n        pending_friends_count_area: $(\"#nav_friends_count\"),\n        mobile_nav_count_area: $(\"#nav_mobile_total_count\"),\n        notify_area: $(\"#notification_container\"),\n        active_calls_link: $(\"#active_calls_link\"),\n        pending_friends_link: $(\"#pending_friends_nav\"),\n        active_calls_ctnr: $(\"#active_calls_ctnr\"),\n        pending_friends_ctnr: $(\"#pending_friends_ctnr\"),\n        sent_friends_ctrn: $(\"#sent_friends_ctnr\"),\n        click_notify_bell: $(\"#click_notify_bell\"),\n        del_all_notify_link: $(\"#del_all_notify_link\"),\n        click_friends_tab: $(\"#click_friends_tab\")\n      },\n      settings: {\n        notifications: true,\n        total_notify_count: 0,\n        message_popups: true,\n        notify_sound: true,\n        message_sound: true,\n        call_ringtone_sound: true,\n        sound_playing: false,\n        is_away: false,\n        global_away: false,\n        away: function away() {\n          return this.is_away && this.global_away;\n        }\n      },\n      storage: {\n        unread_notify: 0,\n        unread_thread: 0,\n        pending_friends_count: 0,\n        active_calls_count: 0,\n        active_calls: [],\n        pending_friends: [],\n        sent_friends: [],\n        original_title: null,\n        current_title: null,\n        heartbeat_interval: null,\n        heartbeat_interval_runs: 0,\n        toggle_title_interval: null,\n        last_call_update: null\n      },\n      socket: {\n        Echo: null,\n        private_channel: null,\n        socket_status: false,\n        forced_disconnect: false,\n        private_channel_retries: 0,\n        presence_channel_retries: 0\n      }\n    },\n    Initialize = {\n      Init: function Init(arg) {\n        opt.settings.message_popups = arg.message_popups;\n        opt.settings.notify_sound = arg.notify_sound;\n        opt.settings.message_sound = arg.message_sound;\n        opt.settings.call_ringtone_sound = arg.call_ringtone_sound;\n        FriendsManager.init();\n        if (!Messenger.common().websockets) opt.socket.forced_disconnect = true;\n        broadcaster.Echo(false);\n        broadcaster.heartBeat(true, false, false);\n        broadcaster.heartBeat(false, true, true);\n        opt.storage.original_title = document.head.querySelector('meta[name=\"title\"]').content;\n        opt.storage.current_title = opt.storage.original_title;\n        Initialize.setListeners();\n        InactivityManager.setup({\n          type: 1,\n          inactive: function inactive() {\n            broadcaster.Disconnect();\n            broadcaster.heartBeat(false, false, false);\n            if (Messenger.common().modules.includes('ThreadManager')) ThreadManager.state().socketStatusCheck();\n          },\n          activate: function activate() {\n            window.location.reload();\n          }\n        });\n        InactivityManager.setup({\n          type: 2,\n          inactive: function inactive() {\n            opt.settings.is_away = true;\n            if (!opt.socket.forced_disconnect) broadcaster.heartBeat(false, true, false);\n          },\n          activate: function activate() {\n            opt.settings.is_away = false;\n            if (!opt.socket.forced_disconnect) broadcaster.heartBeat(false, true, false);\n          }\n        });\n      },\n      setListeners: function setListeners() {\n        $('.notify-drop').click(function (e) {\n          e.stopPropagation();\n        });\n        opt.elements.active_calls_link.click(methods.pullActiveCalls);\n        opt.elements.click_friends_tab.click(function () {\n          if ($(\"#f_pending\").hasClass('show')) methods.pullFriendRequest();\n          if ($(\"#f_sent\").hasClass('show')) methods.pullSentFriendRequest();\n        });\n        $('#nav-friend-tabs a').on('click', function (e) {\n          e.preventDefault();\n          $(this).tab('show');\n          if (this.id === 'tab-pending') methods.pullFriendRequest();\n          if (this.id === 'tab-sent') methods.pullSentFriendRequest();\n        });\n      }\n    },\n    broadcaster = {\n      Echo: function Echo(reconnected) {\n        if (!Messenger.common().websockets) return;\n        opt.socket.forced_disconnect = false;\n        opt.socket.Echo = new laravel_echo__WEBPACK_IMPORTED_MODULE_0__[\"default\"](broadcaster.makeEcho());\n        opt.socket.Echo.connector.pusher.connection.bind('connected', function () {\n          broadcaster.clearPusherLocalStorage();\n          opt.socket.socket_status = true;\n          broadcaster.PrivateChannel();\n          if (reconnected) broadcaster.reconnected(true);\n        });\n        opt.socket.Echo.connector.pusher.connection.bind('disconnected', function () {\n          broadcaster.clearPusherLocalStorage();\n          opt.socket.socket_status = false;\n          if (Messenger.common().modules.includes('ThreadManager')) ThreadManager.state().socketStatusCheck();\n          if (CallManager.state().initialized) CallManager.channel().disconnected();\n          if (!opt.socket.forced_disconnect && !Messenger.common().SOCKET_PUSHER) {\n            setTimeout(function () {\n              broadcaster.Echo(true);\n            }, 2000);\n          }\n        });\n      },\n      makeEcho: function makeEcho() {\n        if (Messenger.common().SOCKET_PUSHER) {\n          return {\n            broadcaster: 'pusher',\n            key: Messenger.common().SOCKET_KEY,\n            cluster: Messenger.common().SOCKET_CLUSTER,\n            forceTLS: Messenger.common().SOCKET_TLS,\n            authEndpoint: Messenger.common().SOCKET_AUTH_ENDPOINT\n          };\n        }\n        return {\n          broadcaster: 'pusher',\n          key: Messenger.common().SOCKET_KEY,\n          wsHost: Messenger.common().SOCKET,\n          wsPort: Messenger.common().SOCKET_PORT,\n          wssPort: Messenger.common().SOCKET_PORT,\n          forceTLS: Messenger.common().SOCKET_TLS,\n          disableStats: true,\n          authEndpoint: Messenger.common().SOCKET_AUTH_ENDPOINT\n        };\n      },\n      reconnected: function reconnected(full) {\n        if (typeof full === \"boolean\" && !full) broadcaster.heartBeat(false, true, true);\n        if (Messenger.common().modules.includes('ThreadManager')) ThreadManager.state().reConnected(typeof full === \"boolean\" && full);\n        if (CallManager.state().initialized) CallManager.channel().reconnected(typeof full === \"boolean\" && full);\n      },\n      Disconnect: function Disconnect() {\n        if (opt.socket.Echo !== null) opt.socket.Echo.disconnect();\n        opt.socket.forced_disconnect = true;\n        opt.socket.socket_status = false;\n      },\n      PrivateChannel: function PrivateChannel() {\n        if (!opt.socket.Echo) return;\n        if (typeof opt.socket.Echo.connector.channels['private-messenger.' + Messenger.common().provider_alias + '.' + Messenger.common().provider_id] !== 'undefined') {\n          opt.socket.private_channel = opt.socket.Echo.connector.channels['private-messenger.' + Messenger.common().provider_alias + '.' + id];\n          return;\n        }\n        opt.socket.private_channel = opt.socket.Echo[\"private\"]('messenger.' + Messenger.common().provider_alias + '.' + Messenger.common().provider_id);\n        opt.socket.private_channel.listen('.new.message', methods.incomingMessage).listen('.thread.archived', methods.threadLeft).listen('.message.archived', methods.messagePurged).listen('.knock.knock', methods.incomingKnok).listen('.new.thread', methods.newThread).listen('.thread.approval', methods.threadApproval).listen('.thread.left', methods.threadLeft).listen('.incoming.call', methods.incomingCall).listen('.joined.call', methods.callJoined).listen('.left.call', methods.callLeft).listen('.call.ended', methods.callEnded).listen('.friend.request', methods.friendRequest).listen('.friend.approved', methods.friendApproved).listen('.friend.cancelled', methods.friendCancelled).listen('.promoted.admin', methods.promotedAdmin).listen('.demoted.admin', methods.demotedAdmin).listen('.permissions.updated', methods.permissionsUpdated).listen('.reaction.added', methods.incomingReact).error(function () {\n          opt.socket.socket_status = false;\n        });\n      },\n      heartBeat: function heartBeat(state, check, gather) {\n        var payload = function payload() {\n          Heartbeat.update(opt.settings.is_away, methods.manageHeartbeatData, window.location.reload);\n        };\n        if (check) {\n          payload();\n          return;\n        }\n        if (!state) {\n          clearInterval(opt.storage.heartbeat_interval);\n          opt.storage.heartbeat_interval = null;\n          return;\n        }\n        opt.storage.heartbeat_interval = setInterval(payload, 120000);\n      },\n      clearPusherLocalStorage: function clearPusherLocalStorage() {\n        if (!Messenger.common().SOCKET_PUSHER) {\n          localStorage.removeItem('pusherTransportNonTLS');\n        }\n      }\n    },\n    Heartbeat = {\n      gather: function gather(onPass, onFail) {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'heartbeat',\n          success: Heartbeat.manage,\n          shared: {\n            onPass: onPass\n          },\n          fail: onFail\n        });\n      },\n      update: function update(state, onPass, onFail) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'heartbeat',\n          data: {\n            away: state\n          },\n          success: Heartbeat.manage,\n          shared: {\n            onPass: onPass\n          },\n          fail: onFail\n        });\n      },\n      manage: function manage(data) {\n        if (\"onPass\" in data && typeof data.onPass === 'function') {\n          data.onPass(data);\n        }\n      }\n    },\n    methods = {\n      promotedAdmin: function promotedAdmin(data) {\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().promotedAdmin(data.thread_id);\n        }\n      },\n      demotedAdmin: function demotedAdmin(data) {\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().demotedAdmin(data.thread_id);\n        }\n      },\n      permissionsUpdated: function permissionsUpdated(data) {\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().permissionsUpdated(data.thread_id);\n        }\n      },\n      friendRequest: function friendRequest(pending) {\n        Messenger.alert().Alert({\n          title: 'New friend request from ' + pending.sender.name,\n          toast: true,\n          theme: 'info'\n        });\n        broadcaster.heartBeat(false, true);\n        methods.togglePageTitle('Friend request from ' + pending.sender.name);\n        methods.playAlertSound('notify');\n      },\n      friendApproved: function friendApproved(friend) {\n        Messenger.alert().Alert({\n          title: friend.sender.name + ' approved your friend request!',\n          toast: true,\n          theme: 'success'\n        });\n        methods.togglePageTitle(friend.sender.name + ' is now your friend');\n        methods.playAlertSound('notify');\n      },\n      friendCancelled: function friendCancelled() {\n        broadcaster.heartBeat(false, true);\n      },\n      incomingCall: function incomingCall(call) {\n        if (CallManager.state().initialized || !opt.settings.notifications) return;\n        broadcaster.heartBeat(false, true, true);\n        methods.togglePageTitle(call.sender.name + ' is calling');\n        CallManager.newCall(call);\n      },\n      callEnded: function callEnded(call) {\n        if (!opt.settings.notifications) return;\n        CallManager.callEnded(call);\n        broadcaster.heartBeat(false, true, true);\n      },\n      callJoined: function callJoined(call) {\n        if (CallManager.state().initialized || !opt.settings.notifications) return;\n        opt.storage.last_call_update = call.thread_id;\n        CallManager.joined(call);\n        broadcaster.heartBeat(false, true, true);\n      },\n      callLeft: function callLeft(call) {\n        if (CallManager.state().initialized || !opt.settings.notifications) return;\n        CallManager.left(call);\n        broadcaster.heartBeat(false, true, true);\n      },\n      incomingMessage: function incomingMessage(data) {\n        if (!opt.settings.notifications) return;\n        var runTitle = function runTitle() {\n            methods.togglePageTitle(data.owner.name + ' says...');\n          },\n          myself = Messenger.isProvider(data.owner_id, data.owner_type);\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().newMessage(data);\n          if (!myself) runTitle();\n          return;\n        }\n        if (CallManager.state().initialized || myself) return;\n        runTitle();\n        broadcaster.heartBeat(false, true, true);\n        methods.playAlertSound('message');\n        if (![0, 1, 2].includes(data.type) || !opt.settings.message_popups) return;\n        var body = null;\n        switch (data.type) {\n          case 0:\n            body = data.body.length > 45 ? Messenger.format().shortcodeToImage(data.body.substring(0, 42) + \"...\") : Messenger.format().shortcodeToImage(data.body);\n            break;\n          case 1:\n            body = \"Sent an image\";\n            break;\n          case 2:\n            body = \"Sent a file\";\n            break;\n        }\n        Messenger.alert().Alert({\n          title: data.meta.thread_type === 2 ? data.meta.thread_name : data.owner.name,\n          body: body,\n          toast: true,\n          theme: 'info',\n          toast_options: {\n            onclick: function onclick() {\n              window.location.href = Messenger.common().WEB + '/' + data.thread_id;\n            },\n            timeOut: 5000\n          }\n        });\n      },\n      incomingReact: function incomingReact(data) {\n        if (!opt.settings.notifications || CallManager.state().initialized) return;\n        if (!Messenger.common().modules.includes('ThreadManager') || ThreadManager.state().thread_id !== data.message.thread_id) {\n          Messenger.alert().Alert({\n            title: Messenger.format().shortcodeToImage(data.reaction) + ' ' + data.owner.name + ' reacted',\n            toast: true,\n            theme: 'info',\n            toast_options: {\n              onclick: function onclick() {\n                if (Messenger.common().modules.includes('ThreadManager')) {\n                  ThreadManager.load().initiate_thread({\n                    thread_id: data.message.thread_id\n                  });\n                } else {\n                  window.location.href = Messenger.common().WEB + '/' + data.message.thread_id;\n                }\n              },\n              timeOut: 5000\n            }\n          });\n          methods.togglePageTitle(data.owner.name + ' reacted...');\n          methods.playAlertSound('notify');\n        }\n      },\n      incomingKnok: function incomingKnok(data) {\n        if (!opt.settings.notifications) return;\n        var name = data.thread.group ? data.thread.name : data.sender.name;\n        var avatar = data.thread.group ? data.thread.avatar.md : data.sender.avatar.md;\n        if (CallManager.state().initialized) {\n          if (CallManager.state().thread_id === data.thread.id) {\n            methods.playAlertSound('knok');\n            methods.togglePageTitle(name + ' is knocking...');\n          }\n          return;\n        }\n        if (Messenger.common().modules.includes('ThreadManager') && ThreadManager.state().thread_id === data.thread.id) {\n          methods.playAlertSound('knok');\n          methods.togglePageTitle(name + ' is knocking...');\n          return;\n        }\n        Messenger.alert().Modal({\n          wait_for_others: true,\n          theme: 'dark',\n          icon: 'hand-rock',\n          size: 'sm',\n          centered: true,\n          title: 'Knock Knock',\n          body: '<div class=\"col-12 mb-3\"><div class=\"text-center text-dark\"><div id=\"knok_animate\"><i  class=\"fas fa-hand-rock fa-7x\"></i></div></div></div>' + '<div class=\"col-12 text-center\"> <img height=\"25\" width=\"25\" class=\"mr-2 rounded-circle\" src=\"' + avatar + '\" /><span class=\"h6 font-weight-bold\">' + name + '</span></div>',\n          onReady: function onReady() {\n            methods.playAlertSound('knok');\n            methods.togglePageTitle(name + ' is knocking...');\n            PageListeners.listen().animateKnok(true);\n          },\n          cb_btn_txt: 'View',\n          cb_btn_icon: 'comment-dots',\n          cb_btn_theme: 'success',\n          onClose: function onClose() {\n            PageListeners.listen().animateKnok(false);\n          },\n          callback: function callback() {\n            if (Messenger.common().modules.includes('ThreadManager')) {\n              ThreadManager.load().initiate_thread({\n                thread_id: data.thread.id\n              });\n              return;\n            }\n            window.location.href = Messenger.common().WEB + '/' + data.thread.id;\n          },\n          cb_close: true,\n          timer: 15000\n        });\n      },\n      newThread: function newThread(data) {\n        if (!opt.settings.notifications) return;\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().addedToThread(data.thread.id);\n        }\n        broadcaster.heartBeat(false, true, true);\n        methods.playAlertSound('message');\n        if (data.thread.group) {\n          Messenger.alert().Alert({\n            title: data.thread.name,\n            body: data.sender.name + ' added you to the group!',\n            toast: true,\n            theme: 'info'\n          });\n        } else {\n          Messenger.alert().Alert({\n            title: data.sender.name + ' started a conversation with you!',\n            body: data.thread.pending ? 'You must accept or deny the message request' : '',\n            toast: true,\n            theme: 'info'\n          });\n        }\n      },\n      threadApproval: function threadApproval(data) {\n        if (!opt.settings.notifications) return;\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().threadApproval(data.thread.id, data.thread.approved);\n        }\n        if (data.thread.approved) {\n          methods.playAlertSound('message');\n          Messenger.alert().Alert({\n            title: data.sender.name + ' accepted your message request!',\n            toast: true,\n            theme: 'info'\n          });\n        }\n      },\n      messagePurged: function messagePurged(data) {\n        if (!opt.settings.notifications) return;\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().purgeMessage(data);\n        }\n      },\n      threadLeft: function threadLeft(data) {\n        if (!opt.settings.notifications) return;\n        if (Messenger.common().modules.includes('ThreadManager')) {\n          ThreadManager.Import().threadLeft(data.thread_id);\n        }\n      },\n      manageMessageCounts: function manageMessageCounts(data) {\n        opt.storage.unread_thread = data.total_unread;\n        methods.updatePageStates();\n      },\n      manageHeartbeatData: function manageHeartbeatData(data) {\n        opt.settings.global_away = data.online_status === 2;\n        opt.storage.unread_notify = 0;\n        opt.storage.unread_thread = data.unread_threads_count;\n        opt.storage.active_calls_count = data.active_calls_count;\n        if (data.active_calls_count === 0) {\n          opt.storage.active_calls = [];\n        } else {\n          opt.elements.active_call_nav_icon.addClass('glowing_text_warning');\n        }\n        opt.storage.pending_friends_count = data.pending_friends_count;\n        if (Messenger.common().modules.includes('ThreadManager')) ThreadManager.state().online(opt.settings.global_away ? 2 : 1);\n        methods.updatePageStates();\n      },\n      updatePageStates: function updatePageStates() {\n        methods.updateTitle();\n        if (opt.storage.active_calls_count === 0) {\n          opt.elements.active_calls_ctnr.html(templates.no_calls());\n          opt.elements.active_call_nav_icon.removeClass('glowing_text_warning');\n        }\n        opt.storage.unread_thread > 0 ? opt.elements.thread_count_area.html(opt.storage.unread_thread) : opt.elements.thread_count_area.html('');\n        opt.storage.pending_friends_count > 0 ? opt.elements.pending_friends_count_area.html(opt.storage.pending_friends_count) : opt.elements.pending_friends_count_area.html('');\n        opt.storage.active_calls_count > 0 ? opt.elements.calls_count_area.html(opt.storage.active_calls_count) : opt.elements.calls_count_area.html('');\n        if (opt.storage.unread_thread > 0 || opt.storage.pending_friends_count > 0 || opt.storage.active_calls_count > 0) {\n          opt.elements.mobile_nav_count_area.html(opt.storage.unread_thread + opt.storage.pending_friends_count + opt.storage.active_calls_count);\n          return;\n        }\n        opt.elements.mobile_nav_count_area.html('');\n      },\n      updateActiveCalls: function updateActiveCalls(calls) {\n        if (CallManager.state().initialized) return;\n        if (!calls.length) {\n          opt.storage.active_calls = [];\n          opt.storage.active_calls_count = 0;\n          opt.elements.active_calls_ctnr.html(templates.no_calls());\n          opt.elements.active_call_nav_icon.removeClass('glowing_text_warning');\n          methods.updatePageStates();\n          return;\n        }\n        opt.storage.active_calls = calls;\n        opt.elements.active_calls_ctnr.html('');\n        opt.storage.active_calls.forEach(function (call) {\n          opt.elements.active_calls_ctnr.append(templates.active_call(call));\n        });\n        opt.elements.active_call_nav_icon.addClass('glowing_text_warning');\n      },\n      updatePendingFriends: function updatePendingFriends(data) {\n        if (!data.length) {\n          opt.storage.pending_friends_count = 0;\n          opt.elements.pending_friends_ctnr.html('<div class=\"col-12 text-center h5 mt-2\"><span class=\"badge badge-pill badge-light shadow-sm\"><i class=\"fas fa-user-friends\"></i> No Pending Request</span></div>');\n          methods.updatePageStates();\n          return;\n        }\n        opt.storage.pending_friends = data;\n        opt.storage.pending_friends_count = opt.storage.pending_friends.length;\n        methods.updatePageStates();\n        opt.elements.pending_friends_ctnr.html('');\n        opt.storage.pending_friends.forEach(function (friend) {\n          opt.elements.pending_friends_ctnr.append(templates.pending_friend(friend));\n        });\n      },\n      updateSentFriends: function updateSentFriends(data) {\n        if (!data.length) {\n          opt.storage.sent_friends = [];\n          opt.elements.sent_friends_ctrn.html('<div class=\"col-12 text-center h5 mt-2\"><span class=\"badge badge-pill badge-light shadow-sm\"><i class=\"fas fa-user-friends\"></i> No Sent Request</span></div>');\n          return;\n        }\n        opt.storage.sent_friends = data;\n        opt.elements.sent_friends_ctrn.html('');\n        opt.storage.sent_friends.forEach(function (friend) {\n          opt.elements.sent_friends_ctrn.append(templates.sent_friend(friend));\n        });\n      },\n      updateTitle: function updateTitle() {\n        var total = opt.storage.unread_thread + opt.storage.pending_friends_count;\n        if (opt.storage.active_calls_count > 0 && !CallManager.state().initialized) total = total + opt.storage.active_calls_count;\n        if (total > 0) {\n          var the_title = '(' + total + ') ' + opt.storage.original_title;\n          opt.storage.current_title = the_title;\n          document.title = the_title;\n          return;\n        }\n        document.title = opt.storage.original_title;\n        opt.storage.current_title = opt.storage.original_title;\n      },\n      togglePageTitle: function togglePageTitle(msg) {\n        methods.pageTitle(false);\n        if (!document.hasFocus()) {\n          methods.pageTitle(true, msg);\n          $(document).one(\"click\", function () {\n            methods.pageTitle(false);\n          });\n        }\n      },\n      pageTitle: function pageTitle(power, msg) {\n        if (power) {\n          opt.storage.toggle_title_interval = setInterval(function () {\n            document.title = document.title.trim() === opt.storage.current_title.trim() ? msg : opt.storage.current_title;\n          }, 3000);\n          return;\n        }\n        if (opt.storage.toggle_title_interval) clearInterval(opt.storage.toggle_title_interval);\n        opt.storage.toggle_title_interval = null;\n        methods.updateTitle();\n      },\n      pullSentFriendRequest: function pullSentFriendRequest() {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'friends/sent',\n          success: methods.updateSentFriends,\n          fail_alert: true\n        });\n      },\n      pullFriendRequest: function pullFriendRequest() {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'friends/pending',\n          success: methods.updatePendingFriends,\n          fail_alert: true\n        });\n      },\n      pullActiveCalls: function pullActiveCalls() {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'active-calls',\n          success: methods.updateActiveCalls,\n          fail_alert: true\n        });\n      },\n      settingsToggle: function settingsToggle(arg) {\n        if (\"message_popups\" in arg) opt.settings.message_popups = arg.message_popups;\n        if (\"message_sound\" in arg) opt.settings.message_sound = arg.message_sound;\n        if (\"notify_sound\" in arg) opt.settings.notify_sound = arg.notify_sound;\n        if (\"call_ringtone_sound\" in arg) opt.settings.call_ringtone_sound = arg.call_ringtone_sound;\n        if (\"notifications\" in arg) opt.settings.notifications = arg.notifications;\n      },\n      playAlertSound: function playAlertSound(type) {\n        var soundOff = function soundOff() {\n          opt.settings.sound_playing = false;\n        };\n        try {\n          switch (type) {\n            case 'message':\n              opt.sounds.message_sound_file.volume = 0.2;\n              if (!opt.settings.message_sound || opt.settings.sound_playing) return;\n              opt.settings.sound_playing = true;\n              opt.sounds.message_sound_file.play().then(soundOff)[\"catch\"](soundOff);\n              break;\n            case 'notify':\n              if (!opt.settings.notify_sound || opt.settings.sound_playing) return;\n              opt.settings.sound_playing = true;\n              opt.sounds.notify_sound_file.play().then(soundOff)[\"catch\"](soundOff);\n              break;\n            case 'call':\n              if (!opt.settings.call_ringtone_sound || opt.settings.sound_playing) return;\n              opt.settings.sound_playing = true;\n              opt.sounds.call_sound_file.play().then(soundOff)[\"catch\"](soundOff);\n              break;\n            case 'knok':\n              if (opt.settings.sound_playing) return;\n              opt.settings.sound_playing = true;\n              opt.sounds.knok_sound_file.play().then(soundOff)[\"catch\"](soundOff);\n              break;\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      },\n      callAction: function callAction(id) {\n        if (!opt.storage.active_calls || !opt.storage.active_calls.length) return;\n        for (var i = 0; i < opt.storage.active_calls.length; i++) {\n          if (opt.storage.active_calls[i].id === id) {\n            CallManager.join(opt.storage.active_calls[i]);\n            break;\n          }\n        }\n      },\n      pendingFriendAction: function pendingFriendAction(id, action) {\n        for (var i = 0; i < opt.storage.pending_friends.length; i++) {\n          if (opt.storage.pending_friends[i].id === id) {\n            $(\"#friend_actions_\" + id).remove();\n            FriendsManager.action({\n              action: action,\n              provider_id: opt.storage.pending_friends[i].sender.provider_id,\n              provider_alias: opt.storage.pending_friends[i].sender.provider_alias,\n              pending_friend_id: opt.storage.pending_friends[i].id\n            });\n            break;\n          }\n        }\n      },\n      sentFriendCancel: function sentFriendCancel(id) {\n        for (var i = 0; i < opt.storage.sent_friends.length; i++) {\n          if (opt.storage.sent_friends[i].id === id) {\n            $(\"#friend_actions_\" + id).remove();\n            FriendsManager.action({\n              action: 'cancel',\n              provider_id: opt.storage.sent_friends[i].recipient.provider_id,\n              provider_alias: opt.storage.sent_friends[i].recipient.provider_alias,\n              sent_friend_id: opt.storage.sent_friends[i].id\n            });\n            break;\n          }\n        }\n      },\n      setNewTitle: function setNewTitle(title) {\n        opt.storage.original_title = title;\n        methods.updateTitle();\n      }\n    },\n    templates = {\n      active_call: function active_call(call) {\n        var bg = 'warning',\n          color = 'dark',\n          type = 'Call',\n          msg = 'Click to join',\n          action = \"NotifyManager.calls('\" + call.id + \"');\",\n          icon = '<i class=\"fas fa-video\"></i>';\n        if (call.options.in_call) {\n          bg = 'danger';\n          color = 'light';\n          msg = 'Currently in ' + type;\n        } else if (call.options.left_call) {\n          bg = 'secondary';\n          color = 'light';\n          msg = 'Click to rejoin';\n        }\n        return '<a onclick=\"' + action + ' return false;\" href=\"#\" class=\"list-group-item list-group-item-action p-2 text-' + color + ' bg-' + bg + '\">\\n' + '    <div class=\"media\">\\n' + '        <div class=\"media-left media-top\">\\n' + '            <img class=\"rounded media-object\" height=\"50\" width=\"50\" src=\"' + call.meta.thread_avatar.sm + '\">\\n' + '        </div>\\n' + '        <div class=\"media-body\">\\n' + '            <h6 class=\"ml-2 mb-1 font-weight-bold\">' + icon + ' ' + call.meta.thread_name + ' - ' + type + '</h6>\\n' + '            <div class=\"mt-2\"><span class=\"float-right\"><span class=\"badge badge-pill badge-light\">' + icon + ' ' + msg + '</span></span></div>\\n' + '        </div>\\n' + '    </div>\\n' + '</a>';\n      },\n      no_calls: function no_calls() {\n        return '<div class=\"col-12 text-center h5 mt-2\"><span class=\"badge badge-pill badge-light shadow-sm\"><i class=\"fas fa-video\"></i> No Active Calls</span></div>';\n      },\n      pending_friend: function pending_friend(friend) {\n        return '<a onclick=\"return false;\" href=\"#\" class=\"list-group-item list-group-item-action p-2 text-dark bg-light\">\\n' + '    <div class=\"media\">\\n' + '        <div class=\"media-left media-top\" ' + (friend.sender.route ? 'onclick=\"window.location.href=\\'' + friend.sender.route + '\\'\"' : '') + '>\\n' + '            <img class=\"rounded media-object\" height=\"50\" width=\"50\" src=\"' + friend.sender.avatar.sm + '\">\\n' + '        </div>\\n' + '        <div class=\"media-body\">\\n' + '        <span class=\"mt-n1 float-right small\">' + Messenger.format().makeTimeAgo(friend.created_at) + ' <i class=\"far fa-clock\"></i></span>' + '            <h6 ' + (friend.sender.route ? 'onclick=\"window.location.href=\\'' + friend.sender.route + '\\'\"' : '') + ' class=\"ml-2 mb-1 font-weight-bold\">' + friend.sender.name + '</h6>\\n' + '            <div id=\"friend_actions_' + friend.id + '\" class=\"mt-2 col-12 px-0\">' + '               <span class=\"float-right\">' + '                   <button title=\"Accept friend request\" onclick=\"NotifyManager.pendingFriends(\\'' + friend.id + '\\', \\'accept\\')\" class=\"btn btn-sm btn-success pt-1 pb-0 px-1\"><i class=\"h5 far fa-check-circle\"></i></button>' + '                   <button title=\"Deny friend request\" onclick=\"NotifyManager.pendingFriends(\\'' + friend.id + '\\', \\'deny\\')\" class=\"btn btn-sm btn-danger mx-1 pt-1 pb-0 px-1\"><i class=\"h5 fas fa-ban\"></i></button>' + '               </span>' + '            </div>\\n' + '        </div>\\n' + '    </div>\\n' + '</a>';\n      },\n      sent_friend: function sent_friend(friend) {\n        return '<a onclick=\"return false;\" href=\"#\" class=\"list-group-item list-group-item-action p-2 text-dark bg-light\">\\n' + '    <div class=\"media\">\\n' + '        <div class=\"media-left media-top\" ' + (friend.recipient.route ? 'onclick=\"window.location.href=\\'' + friend.recipient.route + '\\'\"' : '') + '>\\n' + '            <img class=\"rounded media-object\" height=\"50\" width=\"50\" src=\"' + friend.recipient.avatar.sm + '\">\\n' + '        </div>\\n' + '        <div class=\"media-body\">\\n' + '        <span class=\"mt-n1 float-right small\">' + Messenger.format().makeTimeAgo(friend.created_at) + ' <i class=\"far fa-clock\"></i></span>' + '            <h6 ' + (friend.recipient.route ? 'onclick=\"window.location.href=\\'' + friend.recipient.route + '\\'\"' : '') + ' class=\"ml-2 mb-1 font-weight-bold\">' + friend.recipient.name + '</h6>\\n' + '            <div id=\"friend_actions_' + friend.id + '\" class=\"mt-2 col-12 px-0\">' + '               <span class=\"float-right\">' + '                   <button title=\"Cancel friend request\" onclick=\"NotifyManager.cancelFriend(\\'' + friend.id + '\\')\" class=\"btn btn-sm btn-danger mx-1 pt-1 pb-0 px-1\"><i class=\"h5 fas fa-ban\"></i></button>' + '               </span>' + '            </div>\\n' + '        </div>\\n' + '    </div>\\n' + '</a>';\n      }\n    };\n  return {\n    init: Initialize.Init,\n    newMessage: methods.incomingMessage,\n    updateMessageCount: methods.manageMessageCounts,\n    sound: methods.playAlertSound,\n    settings: methods.settingsToggle,\n    calls: methods.callAction,\n    pendingFriends: methods.pendingFriendAction,\n    cancelFriend: methods.sentFriendCancel,\n    friendsPending: methods.pullFriendRequest,\n    sentFriends: methods.pullSentFriendRequest,\n    activeCalls: methods.pullActiveCalls,\n    setTitle: methods.setNewTitle,\n    heartbeat: function heartbeat() {\n      broadcaster.heartBeat(false, true, true);\n    },\n    counts: function counts() {\n      return {\n        notify: opt.storage.unread_notify,\n        threads: opt.storage.unread_thread\n      };\n    },\n    sockets: function sockets() {\n      return {\n        forced_disconnect: opt.socket.forced_disconnect,\n        status: opt.socket.socket_status,\n        Echo: opt.socket.Echo,\n        away: opt.settings.away(),\n        disconnect: broadcaster.Disconnect\n      };\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/managers/NotifyManager.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/managers/PageListeners.js":
/*!****************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/managers/PageListeners.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.PageListeners = function () {\n  var opt = {\n      FSinterval: null,\n      animations: ['flip', 'rubberBand', 'bounce', 'swing', 'tada', 'jello'],\n      email_suggestion: null,\n      email_input: null,\n      knok_interval: null,\n      play_tooltip: true\n    },\n    mounted = {\n      init: function init() {\n        methods.validateForms();\n      }\n    },\n    methods = {\n      validateForms: function validateForms() {\n        var forms = document.getElementsByClassName('needs-validation');\n        Array.prototype.filter.call(forms, function (form) {\n          form.addEventListener('submit', function (event) {\n            if (form.checkValidity() === false) {\n              event.preventDefault();\n              event.stopPropagation();\n              $(\".invalid-always-show\").show();\n            } else {\n              $(\".invalid-always-show\").hide();\n            }\n            form.classList.add('was-validated');\n          }, false);\n        });\n      },\n      tooltipState: function tooltipState(state) {\n        opt.play_tooltip = state;\n      },\n      disposeTooltips: function disposeTooltips(force) {\n        if (!opt.play_tooltip && !force) return;\n        $('.tooltip').remove();\n      },\n      tooltips: function tooltips(force) {\n        if (!opt.play_tooltip && !force) return;\n        var tips = $('[data-toggle=\"tooltip\"], [data-tooltip=\"tooltip\"]');\n        tips.tooltip('dispose');\n        tips.tooltip();\n      },\n      animateKnok: function animateKnok(state) {\n        if (!state) {\n          clearInterval(opt.knok_interval);\n          return;\n        }\n        if (opt.knok_interval) clearInterval(opt.knok_interval);\n        var elm = $(\"#knok_animate\");\n        elm.removeClass().addClass('wobble animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {\n          $(this).removeClass();\n        });\n        opt.knok_interval = setInterval(function () {\n          elm.removeClass().addClass('wobble animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {\n            $(this).removeClass();\n          });\n        }, 3000);\n      },\n      triggerCommon: function triggerCommon() {\n        methods.validateForms();\n        methods.tooltips();\n      }\n    };\n  return {\n    init: mounted.init,\n    listen: function listen() {\n      return methods;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL21hbmFnZXJzL1BhZ2VMaXN0ZW5lcnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxNQUFNLENBQUNDLGFBQWEsR0FBSSxZQUFZO0VBQ2hDLElBQUlDLEdBQUcsR0FBRztNQUNOQyxVQUFVLEVBQUcsSUFBSTtNQUNqQkMsVUFBVSxFQUFHLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7TUFDdkVDLGdCQUFnQixFQUFHLElBQUk7TUFDdkJDLFdBQVcsRUFBRyxJQUFJO01BQ2xCQyxhQUFhLEVBQUcsSUFBSTtNQUNwQkMsWUFBWSxFQUFHO0lBQ25CLENBQUM7SUFDREMsT0FBTyxHQUFHO01BQ05DLElBQUksRUFBRyxTQUFBQSxLQUFBLEVBQVU7UUFDYkMsT0FBTyxDQUFDQyxhQUFhLENBQUMsQ0FBQztNQUMzQjtJQUNKLENBQUM7SUFDREQsT0FBTyxHQUFHO01BQ05DLGFBQWEsRUFBRyxTQUFBQSxjQUFBLEVBQVU7UUFDdEIsSUFBSUMsS0FBSyxHQUFHQyxRQUFRLENBQUNDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDO1FBQy9EQyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDQyxJQUFJLENBQUNOLEtBQUssRUFBRSxVQUFTTyxJQUFJLEVBQUU7VUFDOUNBLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQVNDLEtBQUssRUFBRTtZQUM1QyxJQUFJRixJQUFJLENBQUNHLGFBQWEsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO2NBQ2hDRCxLQUFLLENBQUNFLGNBQWMsQ0FBQyxDQUFDO2NBQ3RCRixLQUFLLENBQUNHLGVBQWUsQ0FBQyxDQUFDO2NBQ3ZCQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxNQUNJO2NBQ0RELENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDRSxJQUFJLENBQUMsQ0FBQztZQUNwQztZQUNBUixJQUFJLENBQUNTLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLGVBQWUsQ0FBQztVQUN2QyxDQUFDLEVBQUUsS0FBSyxDQUFDO1FBQ2IsQ0FBQyxDQUFDO01BQ04sQ0FBQztNQUNEQyxZQUFZLEVBQUcsU0FBQUEsYUFBU0MsS0FBSyxFQUFDO1FBQzFCOUIsR0FBRyxDQUFDTSxZQUFZLEdBQUd3QixLQUFLO01BQzVCLENBQUM7TUFDREMsZUFBZSxFQUFHLFNBQUFBLGdCQUFTQyxLQUFLLEVBQUM7UUFDN0IsSUFBRyxDQUFDaEMsR0FBRyxDQUFDTSxZQUFZLElBQUksQ0FBQzBCLEtBQUssRUFBRTtRQUNoQ1IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDUyxNQUFNLENBQUMsQ0FBQztNQUMxQixDQUFDO01BQ0RDLFFBQVEsRUFBRyxTQUFBQSxTQUFTRixLQUFLLEVBQUM7UUFDdEIsSUFBRyxDQUFDaEMsR0FBRyxDQUFDTSxZQUFZLElBQUksQ0FBQzBCLEtBQUssRUFBRTtRQUNoQyxJQUFJRyxJQUFJLEdBQUdYLENBQUMsQ0FBQyxtREFBbUQsQ0FBQztRQUNqRVcsSUFBSSxDQUFDQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3ZCRCxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDO01BQ2xCLENBQUM7TUFDREMsV0FBVyxFQUFHLFNBQUFBLFlBQVNQLEtBQUssRUFBQztRQUN6QixJQUFHLENBQUNBLEtBQUssRUFBQztVQUNOUSxhQUFhLENBQUN0QyxHQUFHLENBQUNLLGFBQWEsQ0FBQztVQUNoQztRQUNKO1FBQ0EsSUFBR0wsR0FBRyxDQUFDSyxhQUFhLEVBQUVpQyxhQUFhLENBQUN0QyxHQUFHLENBQUNLLGFBQWEsQ0FBQztRQUN0RCxJQUFJa0MsR0FBRyxHQUFHZixDQUFDLENBQUMsZUFBZSxDQUFDO1FBQzVCZSxHQUFHLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDQyxHQUFHLENBQUMsOEVBQThFLEVBQUUsWUFBVTtVQUN4SWxCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQ2dCLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUNGeEMsR0FBRyxDQUFDSyxhQUFhLEdBQUdzQyxXQUFXLENBQUMsWUFBVTtVQUN0Q0osR0FBRyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLDhFQUE4RSxFQUFFLFlBQVU7WUFDeElsQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUNnQixXQUFXLENBQUMsQ0FBQztVQUN6QixDQUFDLENBQUM7UUFDTixDQUFDLEVBQUUsSUFBSSxDQUFDO01BRVosQ0FBQztNQUNESSxhQUFhLEVBQUcsU0FBQUEsY0FBQSxFQUFVO1FBQ3RCbkMsT0FBTyxDQUFDQyxhQUFhLENBQUMsQ0FBQztRQUN2QkQsT0FBTyxDQUFDeUIsUUFBUSxDQUFDLENBQUM7TUFDdEI7SUFDSixDQUFDO0VBQ0QsT0FBTztJQUNIMUIsSUFBSSxFQUFHRCxPQUFPLENBQUNDLElBQUk7SUFDbkJxQyxNQUFNLEVBQUcsU0FBQUEsT0FBQSxFQUFVO01BQ2YsT0FBT3BDLE9BQU87SUFDbEI7RUFDSixDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL21hbmFnZXJzL1BhZ2VMaXN0ZW5lcnMuanM/NDRhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuUGFnZUxpc3RlbmVycyA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdCA9IHtcbiAgICAgICAgRlNpbnRlcnZhbCA6IG51bGwsXG4gICAgICAgIGFuaW1hdGlvbnMgOiBbJ2ZsaXAnLCAncnViYmVyQmFuZCcsICdib3VuY2UnLCAnc3dpbmcnLCAndGFkYScsICdqZWxsbyddLFxuICAgICAgICBlbWFpbF9zdWdnZXN0aW9uIDogbnVsbCxcbiAgICAgICAgZW1haWxfaW5wdXQgOiBudWxsLFxuICAgICAgICBrbm9rX2ludGVydmFsIDogbnVsbCxcbiAgICAgICAgcGxheV90b29sdGlwIDogdHJ1ZVxuICAgIH0sXG4gICAgbW91bnRlZCA9IHtcbiAgICAgICAgaW5pdCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBtZXRob2RzLnZhbGlkYXRlRm9ybXMoKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtZXRob2RzID0ge1xuICAgICAgICB2YWxpZGF0ZUZvcm1zIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxldCBmb3JtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25lZWRzLXZhbGlkYXRpb24nKTtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChmb3JtcywgZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm0uY2hlY2tWYWxpZGl0eSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5pbnZhbGlkLWFsd2F5cy1zaG93XCIpLnNob3coKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5pbnZhbGlkLWFsd2F5cy1zaG93XCIpLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZCgnd2FzLXZhbGlkYXRlZCcpO1xuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwU3RhdGUgOiBmdW5jdGlvbihzdGF0ZSl7XG4gICAgICAgICAgICBvcHQucGxheV90b29sdGlwID0gc3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIGRpc3Bvc2VUb29sdGlwcyA6IGZ1bmN0aW9uKGZvcmNlKXtcbiAgICAgICAgICAgIGlmKCFvcHQucGxheV90b29sdGlwICYmICFmb3JjZSkgcmV0dXJuO1xuICAgICAgICAgICAgJCgnLnRvb2x0aXAnKS5yZW1vdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcHMgOiBmdW5jdGlvbihmb3JjZSl7XG4gICAgICAgICAgICBpZighb3B0LnBsYXlfdG9vbHRpcCAmJiAhZm9yY2UpIHJldHVybjtcbiAgICAgICAgICAgIGxldCB0aXBzID0gJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXSwgW2RhdGEtdG9vbHRpcD1cInRvb2x0aXBcIl0nKTtcbiAgICAgICAgICAgIHRpcHMudG9vbHRpcCgnZGlzcG9zZScpO1xuICAgICAgICAgICAgdGlwcy50b29sdGlwKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGVLbm9rIDogZnVuY3Rpb24oc3RhdGUpe1xuICAgICAgICAgICAgaWYoIXN0YXRlKXtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKG9wdC5rbm9rX2ludGVydmFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihvcHQua25va19pbnRlcnZhbCkgY2xlYXJJbnRlcnZhbChvcHQua25va19pbnRlcnZhbCk7XG4gICAgICAgICAgICBsZXQgZWxtID0gJChcIiNrbm9rX2FuaW1hdGVcIik7XG4gICAgICAgICAgICBlbG0ucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnd29iYmxlIGFuaW1hdGVkJykub25lKCd3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wdC5rbm9rX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnd29iYmxlIGFuaW1hdGVkJykub25lKCd3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMzAwMCk7XG5cbiAgICAgICAgfSxcbiAgICAgICAgdHJpZ2dlckNvbW1vbiA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBtZXRob2RzLnZhbGlkYXRlRm9ybXMoKTtcbiAgICAgICAgICAgIG1ldGhvZHMudG9vbHRpcHMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdCA6IG1vdW50ZWQuaW5pdCxcbiAgICAgICAgbGlzdGVuIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2RzXG4gICAgICAgIH1cbiAgICB9O1xufSgpKTsiXSwibmFtZXMiOlsid2luZG93IiwiUGFnZUxpc3RlbmVycyIsIm9wdCIsIkZTaW50ZXJ2YWwiLCJhbmltYXRpb25zIiwiZW1haWxfc3VnZ2VzdGlvbiIsImVtYWlsX2lucHV0Iiwia25va19pbnRlcnZhbCIsInBsYXlfdG9vbHRpcCIsIm1vdW50ZWQiLCJpbml0IiwibWV0aG9kcyIsInZhbGlkYXRlRm9ybXMiLCJmb3JtcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIkFycmF5IiwicHJvdG90eXBlIiwiZmlsdGVyIiwiY2FsbCIsImZvcm0iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjaGVja1ZhbGlkaXR5IiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCIkIiwic2hvdyIsImhpZGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0b29sdGlwU3RhdGUiLCJzdGF0ZSIsImRpc3Bvc2VUb29sdGlwcyIsImZvcmNlIiwicmVtb3ZlIiwidG9vbHRpcHMiLCJ0aXBzIiwidG9vbHRpcCIsImFuaW1hdGVLbm9rIiwiY2xlYXJJbnRlcnZhbCIsImVsbSIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJvbmUiLCJzZXRJbnRlcnZhbCIsInRyaWdnZXJDb21tb24iLCJsaXN0ZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/managers/PageListeners.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/managers/ThreadManager.js":
/*!****************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/managers/ThreadManager.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nwindow.ThreadManager = function () {\n  var opt = {\n      INIT: false,\n      ORIGINAL_ARG: null,\n      SETUP: true,\n      API: Messenger.common().API,\n      thread: {\n        id: null,\n        type: null,\n        name: null,\n        admin: false,\n        pending: false,\n        muted: false,\n        replying: false,\n        reply_to_id: null,\n        awaiting_my_approval: false,\n        created_at: null,\n        messages_unread: false,\n        click_to_read: false,\n        messaging: true,\n        can_call: true,\n        lockout: false,\n        thread_history: true,\n        history_id: null,\n        history_route: null,\n        history_loading: false,\n        initializing: false,\n        _id: null,\n        _thread: null\n      },\n      states: {\n        lock: true,\n        load_in_retries: 0,\n        state_lockout_retries: 0,\n        thread_filtered: false,\n        thread_filter_search: null,\n        messenger_search_term: null\n      },\n      socket: {\n        online_status_setting: 1,\n        chat: null,\n        socket_retries: 0,\n        send_typing: 0,\n        is_away: false\n      },\n      storage: {\n        active_profiles: [],\n        who_typing: [],\n        bot_typing: [],\n        threads: [],\n        messages: [],\n        participants: [],\n        pending_messages: [],\n        temp_data: null\n      },\n      timers: {\n        mark_read_timeout: null,\n        recent_bobble_timeout: null,\n        socket_interval: null,\n        remove_typing_interval: null,\n        private_bobble_refresh_timeout: null,\n        bobble_refresh_interval: null,\n        drag_drop_overlay_hide: null\n      },\n      elements: {\n        nav_search_link: $(\".nav-search-link\"),\n        my_avatar_area: $(\"#my_avatar_status\"),\n        thread_area: $(\"#messages_ul\"),\n        message_container: $(\"#message_container\"),\n        message_sidebar_container: $(\"#message_sidebar_container\"),\n        socket_error_msg: $(\"#socket_error\"),\n        thread_search_input: $(\"#thread_search_input\"),\n        thread_search_bar: $(\"#threads_search_bar\"),\n        drag_drop_zone: $('#drag_drop_overlay'),\n        messenger_search_input: null,\n        messenger_search_results: null,\n        msg_panel: null,\n        doc_file: null,\n        group_avatar_file: null,\n        record_audio_message_btn: null,\n        add_emoji_btn: null,\n        data_table: null,\n        message_text_input: null,\n        form: null,\n        the_thread: null,\n        msg_stack: null,\n        pending_msg_stack: null,\n        new_msg_alert: null,\n        reply_message_alert: null,\n        seen_by_final: null\n      }\n    },\n    mounted = {\n      Initialize: function Initialize(arg) {\n        if (!Messenger.common().modules.includes('ThreadTemplates')) {\n          setTimeout(function () {\n            mounted.Initialize(arg);\n          }, 0);\n          return;\n        }\n        opt.states.lock = false;\n        if (!opt.ORIGINAL_ARG) {\n          opt.ORIGINAL_ARG = arg;\n        }\n        if (\"online_status_setting\" in arg) opt.socket.online_status_setting = arg.online_status_setting;\n        if (\"messaging\" in arg) opt.thread.messaging = arg.messaging;\n        if (\"lockout\" in arg) opt.thread.lockout = arg.lockout;\n        if (\"admin\" in arg) opt.thread.admin = arg.admin;\n        if (\"awaiting_my_approval\" in arg) opt.thread.awaiting_my_approval = arg.awaiting_my_approval;\n        if (\"pending\" in arg) opt.thread.pending = arg.pending;\n        if (\"can_call\" in arg) opt.thread.can_call = arg.can_call;\n        if (\"setup\" in arg && \"thread_id\" in arg && arg.type === 0) {\n          mounted.setupOnce();\n          LoadIn.initiate_thread({\n            thread_id: arg.thread_id\n          });\n          return;\n        }\n        if (\"setup\" in arg && arg.type === 3) {\n          mounted.setupOnce();\n          LoadIn.createPrivate({\n            id: arg.id,\n            alias: arg.alias\n          });\n          return;\n        }\n        opt.INIT = true;\n        PageListeners.listen().disposeTooltips();\n        opt.thread.type = arg.type;\n        if ([1, 2, 3, 4].includes(arg.type)) {\n          opt.elements.message_text_input = $(\"#message_text_input\");\n          opt.elements.form = $(\"#thread_form\");\n          opt.elements.new_msg_alert = $(\"#new_message_alert\");\n          opt.elements.reply_message_alert = $(\"#reply_message_alert\");\n          opt.elements.msg_panel = $(\".chat-body\");\n          opt.elements.doc_file = $(\"#doc_file\");\n          opt.elements.group_avatar_file = $(\"#thread_avatar_image_file\");\n          opt.elements.record_audio_message_btn = $(\"#record_audio_message_btn\");\n          opt.elements.add_emoji_btn = $(\"#add_emoji_btn\");\n          opt.elements.seen_by_final = $(\"#seen-by_final\");\n        }\n        if ([1, 2, 3].includes(arg.type)) {\n          if (arg.type === 3) opt.storage.temp_data = arg.temp_data;\n          mounted.startWatchdog();\n        }\n        if (arg.type === 4) mounted.startWatchdog();\n        if (arg.type === 5 && !Messenger.common().mobile) opt.elements.message_container.html(ThreadTemplates.render().empty_base());\n        if (arg.type === 7) {\n          opt.elements.msg_panel = $(\".chat-body\");\n          opt.elements.messenger_search_results = $(\"#messenger_search_content\");\n          opt.elements.messenger_search_input = $(\"#messenger_search_profiles\");\n          mounted.startWatchdog();\n        }\n        if ('thread_id' in arg) {\n          opt.thread.id = arg.thread_id;\n          opt.thread.name = arg.t_name;\n          opt.elements.the_thread = $('#msg_thread_' + arg.thread_id);\n          opt.elements.msg_stack = $('#messages_container_' + arg.thread_id);\n          opt.elements.pending_msg_stack = $(\"#pending_messages\");\n          opt.thread.initializing = false;\n          opt.thread._id = null;\n          if (arg.type !== 3) methods.initializeRecentMessages();\n        }\n        Health.checkConnection();\n        if ('setup' in arg) mounted.setupOnce();\n        PageListeners.listen().tooltips();\n      },\n      setupOnce: function setupOnce() {\n        if (!opt.SETUP) return;\n        var elm = document.getElementById('message_container');\n        LoadIn.threads();\n        setInterval(function () {\n          if (!NotifyManager.sockets().forced_disconnect) LoadIn.threads();\n        }, 300000);\n        if (opt.thread.type === 5) window.history.replaceState({\n          type: 5\n        }, null, Messenger.common().WEB);\n        window.onpopstate = function (event) {\n          if (event.state && \"type\" in event.state && !opt.states.lock) {\n            switch (event.state.type) {\n              case 1:\n              case 2:\n                LoadIn.initiate_thread({\n                  thread_id: event.state.thread_id\n                }, true);\n                break;\n              case 3:\n                LoadIn.createPrivate({\n                  alias: event.state.alias,\n                  id: event.state.id\n                }, true);\n                break;\n              case 4:\n                LoadIn.createGroup(true);\n                break;\n              case 5:\n                LoadIn.closeOpened();\n                break;\n              case 6:\n                LoadIn.contacts(true);\n                break;\n              case 7:\n                LoadIn.search(true);\n                break;\n            }\n          } else {\n            return false;\n          }\n        };\n        opt.elements.thread_search_input.on(\"keyup mouseup\", methods.checkThreadFilters);\n        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(function (eventName) {\n          elm.addEventListener(eventName, methods.fileDragDrop, false);\n        });\n        if (opt.elements.nav_search_link.length) opt.elements.nav_search_link.click(mounted.searchLinkClicked);\n        setInterval(mounted.timeAgo, 10000);\n        opt.SETUP = false;\n      },\n      reset: function reset(lock) {\n        mounted.stopWatchdog();\n        if (opt.socket.chat) opt.socket.chat.unsubscribe();\n        if (opt.timers.remove_typing_interval) clearInterval(opt.timers.remove_typing_interval);\n        if (opt.timers.socket_interval) clearInterval(opt.timers.socket_interval);\n        if (opt.timers.mark_read_timeout) clearTimeout(opt.timers.mark_read_timeout);\n        if (opt.timers.recent_bobble_timeout) clearTimeout(opt.timers.recent_bobble_timeout);\n        if (opt.timers.bobble_refresh_interval) clearInterval(opt.timers.bobble_refresh_interval);\n        if (opt.timers.private_bobble_refresh_timeout) clearTimeout(opt.timers.private_bobble_refresh_timeout);\n        if (opt.timers.drag_drop_overlay_hide) {\n          clearTimeout(opt.timers.drag_drop_overlay_hide);\n          opt.elements.drag_drop_zone.addClass('NS');\n        }\n        opt.elements.message_container.removeClass('msg-ctnr-unread');\n        opt.elements.thread_area.find('.thread_list_item').removeClass('alert-warning shadow-sm rounded');\n        opt.elements.thread_area.find('.thread-group-avatar').removeClass('avatar-is-online').addClass('avatar-is-offline');\n        PageListeners.listen().disposeTooltips();\n        opt = Object.assign({}, opt, {\n          thread: {\n            id: null,\n            type: null,\n            name: null,\n            admin: false,\n            pending: false,\n            muted: false,\n            replying: false,\n            reply_to_id: null,\n            awaiting_my_approval: false,\n            created_at: null,\n            messages_unread: false,\n            click_to_read: false,\n            messaging: true,\n            can_call: true,\n            lockout: false,\n            thread_history: true,\n            history_id: null,\n            history_route: null,\n            history_loading: false,\n            initializing: false,\n            _id: null,\n            _thread: null\n          },\n          states: {\n            lock: lock,\n            load_in_retries: 0,\n            state_lockout_retries: 0,\n            thread_filtered: opt.states.thread_filtered,\n            thread_filter_search: opt.states.thread_filter_search,\n            messenger_search_term: null\n          },\n          socket: {\n            online_status_setting: opt.socket.online_status_setting,\n            chat: null,\n            socket_retries: 0,\n            send_typing: 0,\n            is_away: false\n          },\n          storage: {\n            active_profiles: [],\n            who_typing: [],\n            bot_typing: [],\n            threads: opt.storage.threads,\n            messages: [],\n            participants: [],\n            pending_messages: [],\n            temp_data: null\n          },\n          timers: {\n            mark_read_timeout: null,\n            recent_bobble_timeout: null,\n            socket_interval: null,\n            remove_typing_interval: null,\n            private_bobble_refresh_timeout: null,\n            bobble_refresh_interval: null,\n            drag_drop_overlay_hide: null\n          },\n          elements: {\n            nav_search_link: opt.elements.nav_search_link,\n            my_avatar_area: opt.elements.my_avatar_area,\n            thread_area: opt.elements.thread_area,\n            message_container: opt.elements.message_container,\n            message_sidebar_container: opt.elements.message_sidebar_container,\n            socket_error_msg: opt.elements.socket_error_msg,\n            thread_search_input: opt.elements.thread_search_input,\n            thread_search_bar: opt.elements.thread_search_bar,\n            drag_drop_zone: opt.elements.drag_drop_zone,\n            messenger_search_input: null,\n            messenger_search_results: null,\n            msg_panel: null,\n            doc_file: null,\n            group_avatar_file: null,\n            record_audio_message_btn: null,\n            data_table: null,\n            message_text_input: null,\n            form: null,\n            the_thread: null,\n            msg_stack: null,\n            pending_msg_stack: null,\n            new_msg_alert: null,\n            reply_message_alert: null,\n            seen_by_final: null,\n            add_emoji_btn: null\n          }\n        });\n      },\n      timeAgo: function timeAgo() {\n        $(\"time.timeago\").each(function () {\n          $(this).html(Messenger.format().makeTimeAgo($(this).attr('datetime')));\n        });\n      },\n      startWatchdog: function startWatchdog() {\n        switch (opt.thread.type) {\n          case 1:\n          case 2:\n            if (!opt.thread.lockout && opt.thread.messaging) opt.elements.message_text_input.prop('disabled', false);\n            opt.timers.remove_typing_interval = setInterval(methods.removeTypers, 1000);\n            opt.timers.bobble_refresh_interval = setInterval(function () {\n              if (!NotifyManager.sockets().forced_disconnect) LoadIn.bobbleHeads();\n            }, 180000);\n            opt.elements.msg_panel.click(mounted.msgPanelClick);\n            opt.elements.msg_panel.scroll(mounted.msgPanelScroll);\n            opt.elements.doc_file.change(mounted.documentChange);\n            opt.elements.group_avatar_file.change(mounted.uploadGroupAvatar);\n            opt.elements.record_audio_message_btn.click(mounted.audioMessage);\n            opt.elements.add_emoji_btn.click(mounted.showEmojiPicker);\n            opt.elements.message_text_input.on('paste', methods.pasteImage);\n            opt.elements.form.keydown(mounted.formKeydown);\n            opt.elements.form.on('input keyup', methods.manageSendMessageButton);\n            opt.elements.form.on('submit', mounted.stopDefault);\n            opt.elements.new_msg_alert.click(mounted.newMsgAlertClick);\n            opt.elements.reply_message_alert.click(methods.resetReplying);\n            opt.elements.message_container.click(mounted.clickMarkRead);\n            if (Messenger.common().mobile) opt.elements.message_text_input.click(mounted.inputClickScroll);\n            if (!Messenger.common().mobile) opt.elements.message_text_input.focus();\n            break;\n          case 3:\n            opt.elements.message_text_input.prop('disabled', false);\n            opt.elements.msg_panel.click(mounted.msgPanelClick);\n            opt.elements.doc_file.change(mounted.documentChange);\n            opt.elements.record_audio_message_btn.click(mounted.audioMessage);\n            opt.elements.add_emoji_btn.click(mounted.showEmojiPicker);\n            opt.elements.form.keydown(mounted.formKeydown);\n            opt.elements.form.on('input keyup', methods.manageSendMessageButton);\n            opt.elements.form.on('submit', mounted.stopDefault);\n            if (!Messenger.common().mobile) opt.elements.message_text_input.focus();\n            break;\n          case 4:\n            var subject = document.getElementById('subject');\n            opt.elements.msg_panel.click(mounted.msgPanelClick);\n            if (!Messenger.common().mobile) subject.focus();\n            PageListeners.listen().validateForms();\n            break;\n          case 7:\n            opt.elements.messenger_search_input.on(\"keyup mouseup\", mounted.runMessengerSearch);\n            opt.elements.msg_panel.click(mounted.msgPanelClick);\n            opt.elements.messenger_search_input.focus();\n            break;\n        }\n      },\n      stopWatchdog: function stopWatchdog() {\n        switch (opt.thread.type) {\n          case 1:\n          case 2:\n            try {\n              opt.elements.msg_panel.off('click', mounted.msgPanelClick);\n              opt.elements.msg_panel.off('scroll', mounted.msgPanelScroll);\n              opt.elements.doc_file.off('change', mounted.documentChange);\n              opt.elements.group_avatar_file.off('change', mounted.uploadGroupAvatar);\n              opt.elements.record_audio_message_btn.off('click', mounted.audioMessage);\n              opt.elements.add_emoji_btn.off('click', mounted.showEmojiPicker);\n              opt.elements.message_text_input.off('paste', methods.pasteImage);\n              opt.elements.form.off('keydown', mounted.formKeydown);\n              opt.elements.form.off('input keyup', methods.manageSendMessageButton);\n              opt.elements.form.off('submit', mounted.stopDefault);\n              opt.elements.new_msg_alert.off('click', mounted.newMsgAlertClick);\n              opt.elements.reply_message_alert.off('click', methods.resetReplying);\n              opt.elements.message_container.off('click', mounted.clickMarkRead);\n              if (Messenger.common().mobile) opt.elements.message_text_input.off('click', mounted.inputClickScroll);\n            } catch (e) {\n              console.log(e);\n            }\n            break;\n          case 3:\n            try {\n              opt.elements.msg_panel.off('click', mounted.msgPanelClick);\n              opt.elements.doc_file.off('change', mounted.documentChange);\n              opt.elements.record_audio_message_btn.off('click', mounted.audioMessage);\n              opt.elements.add_emoji_btn.off('click', mounted.showEmojiPicker);\n              opt.elements.form.off('keydown', mounted.formKeydown);\n              opt.elements.form.off('input keyup', methods.manageSendMessageButton);\n              opt.elements.form.off('submit', mounted.stopDefault);\n            } catch (e) {\n              console.log(e);\n            }\n            break;\n          case 4:\n            try {\n              opt.elements.msg_panel.off('click', mounted.msgPanelClick);\n            } catch (e) {\n              console.log(e);\n            }\n            break;\n          case 7:\n            try {\n              opt.elements.msg_panel.off('click', mounted.msgPanelClick);\n              opt.elements.messenger_search_input.off(\"keyup mouseup\", mounted.runMessengerSearch);\n            } catch (e) {\n              console.log(e);\n            }\n            break;\n        }\n      },\n      stopDefault: function stopDefault(e) {\n        e.preventDefault();\n      },\n      searchLinkClicked: function searchLinkClicked(e) {\n        mounted.stopDefault(e);\n        $('body').click();\n        LoadIn.search();\n      },\n      runMessengerSearch: function runMessengerSearch(e) {\n        if (opt.thread.type !== 7) return;\n        var current_term = opt.states.messenger_search_term,\n          time = new Date();\n        if (e && e.type === 'mouseup') {\n          setTimeout(mounted.runMessengerSearch, 0);\n          return;\n        }\n        if (opt.elements.messenger_search_input.val().trim().length) {\n          if (opt.elements.messenger_search_input.val().trim().length >= 3) {\n            if (current_term !== opt.elements.messenger_search_input.val().trim()) {\n              opt.states.messenger_search_term = opt.elements.messenger_search_input.val().trim();\n              opt.elements.messenger_search_results.html(ThreadTemplates.render().loader());\n              Messenger.xhr().request({\n                route: Messenger.common().API + 'search/' + opt.states.messenger_search_term,\n                success: methods.manageMessengerSearch,\n                fail_alert: true\n              });\n            }\n          } else {\n            opt.states.messenger_search_term = opt.elements.messenger_search_input.val().trim();\n            opt.elements.messenger_search_results.html(ThreadTemplates.render().thread_empty_search(true));\n          }\n        } else {\n          opt.states.messenger_search_term = null;\n          opt.elements.messenger_search_results.html(ThreadTemplates.render().thread_empty_search());\n        }\n      },\n      inputClickScroll: function inputClickScroll() {\n        setTimeout(function () {\n          methods.threadScrollBottom(true, false);\n        }, 200);\n      },\n      formKeydown: function formKeydown(e) {\n        switch (opt.thread.type) {\n          case 1:\n          case 2:\n            if (opt.thread.lockout || !opt.thread.messaging) return;\n            if (e.keyCode === 13) {\n              methods.sendMessage();\n              methods.stopTyping();\n              return;\n            }\n            methods.isTyping();\n            break;\n          case 3:\n            if (e.keyCode === 13) new_forms.newPrivate(false);\n            break;\n        }\n      },\n      clickMarkRead: function clickMarkRead() {\n        if (opt.thread.click_to_read || methods.checkThreadStorageUnread()) methods.markRead();\n      },\n      msgPanelClick: function msgPanelClick(e) {\n        if (opt.thread.type === 7) {\n          var _focus_input = document.getElementById('messenger_search_profiles');\n          Messenger.format().focusEnd(_focus_input);\n          return;\n        }\n        var focus_input = document.getElementById('message_text_input');\n        switch (opt.thread.type) {\n          case 1:\n          case 2:\n            if (opt.thread.lockout || !opt.thread.messaging) return;\n            var elm_class = $(e.target).attr('class');\n            var ignore = ['message-text', 'message-text pt-2', 'fas fa-trash', 'fas fa-grin', 'dropdown-item', 'fas fa-ellipsis-v', 'fas fa-grin-tongue', 'fas fa-reply', 'fas fa-pen', 'joypixels', 'ml-1 font-weight-bold text-primary', 'badge badge-light mr-1 px-1 pointer_area', 'reacted-by-me badge badge-light mr-1 px-1 pointer_area'];\n            if (ignore.includes(elm_class) || Messenger.common().mobile) return;\n            Messenger.format().focusEnd(focus_input);\n            break;\n          case 3:\n            if (!opt.thread.messaging) return;\n            Messenger.format().focusEnd(focus_input);\n            break;\n          case 4:\n            if (e.target.id === 'msg_thread_new_group') Messenger.format().focusEnd(document.getElementById('subject'));\n            break;\n        }\n      },\n      msgPanelScroll: function msgPanelScroll() {\n        if ($(this).scrollTop() <= 500) methods.loadHistory();\n        if (methods.threadScrollBottom(false, true) && opt.thread.messages_unread && !opt.socket.is_away && document.hasFocus()) methods.markRead();\n      },\n      newMsgAlertClick: function newMsgAlertClick() {\n        methods.threadScrollBottom(true, false);\n        methods.markRead();\n      },\n      audioMessage: function audioMessage() {\n        if (opt.thread.lockout || !opt.thread.messaging) return;\n        RecordAudio.open();\n      },\n      showEmojiPicker: function showEmojiPicker() {\n        if (opt.thread.lockout || !opt.thread.messaging) return;\n        EmojiPicker.addMessage();\n      },\n      documentChange: function documentChange() {\n        switch (opt.thread.type) {\n          case 1:\n          case 2:\n            if (opt.thread.lockout || !opt.thread.messaging) return;\n            _toConsumableArray(opt.elements.doc_file[0].files).forEach(methods.sendUploadFiles);\n            opt.elements.doc_file[0].value = '';\n            break;\n          case 3:\n            if (!opt.thread.messaging) return;\n            Messenger.button().addLoader({\n              id: '#file_upload_btn'\n            });\n            new_forms.newPrivate(true);\n            break;\n        }\n      },\n      uploadGroupAvatar: function uploadGroupAvatar() {\n        var data = new FormData();\n        data.append('image', opt.elements.group_avatar_file[0].files[0]);\n        Messenger.alert().fillModal({\n          loader: true,\n          no_close: true,\n          body: null,\n          title: 'Uploading...'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/avatar',\n          data: data,\n          success: function success(data) {\n            Messenger.alert().Alert({\n              title: 'You updated ' + data.name + '\\'s Avatar.',\n              toast: true\n            });\n          },\n          close_modal: true,\n          fail_alert: true\n        });\n      },\n      switchToggleListener: function switchToggleListener() {\n        $(\".switch_input\").each(function () {\n          if ($(this).is(':checked')) {\n            $(this).parents().closest('tr').addClass('table-warning');\n            return;\n          }\n          $(this).parents().closest('tr').removeClass('table-warning');\n        });\n      },\n      startPresence: function startPresence(full) {\n        if (opt.thread.awaiting_my_approval || opt.thread.muted || opt.thread.lockout) return;\n        if (full) opt.socket.chat = null;\n        if (opt.socket.chat) {\n          opt.socket.chat.subscribe();\n          return;\n        }\n        if (typeof NotifyManager.sockets().Echo.connector.channels['presence-messenger.thread.' + opt.thread.id] !== 'undefined') {\n          NotifyManager.sockets().Echo.connector.channels['presence-messenger.thread.' + opt.thread.id].subscribe();\n          opt.socket.chat = NotifyManager.sockets().Echo.connector.channels['presence-messenger.thread.' + opt.thread.id];\n        } else {\n          opt.socket.chat = NotifyManager.sockets().Echo.join('messenger.thread.' + opt.thread.id);\n        }\n        opt.socket.chat.here(function (users) {\n          opt.storage.active_profiles = [];\n          $('.thread_error_area').hide();\n          $.each(users, function () {\n            if (!Messenger.isProvider(this.provider_id, null, this.provider_alias)) {\n              opt.storage.active_profiles.push(this);\n              methods.updateBobbleHead(this.provider_id, null);\n            }\n          });\n          methods.drawBobbleHeads();\n          methods.sendOnlineStatus(opt.socket.is_away && opt.socket.online_status_setting !== 0 ? 2 : opt.socket.online_status_setting);\n        }).joining(function (user) {\n          opt.storage.active_profiles.push(user);\n          if (opt.storage.messages.length) methods.updateBobbleHead(user.provider_id, opt.storage.messages[0].id);\n          methods.drawBobbleHeads();\n          methods.sendOnlineStatus(opt.socket.is_away && opt.socket.online_status_setting !== 0 ? 2 : opt.socket.online_status_setting);\n          PageListeners.listen().tooltips();\n        }).leaving(function (user) {\n          methods.updateActiveProfile(user.provider_id, 3);\n        }).listenForWhisper('typing', methods.addTypers).listenForWhisper('stop-typing', methods.removeTypers).listenForWhisper('online', function (user) {\n          methods.threadOnlineStatus(user.online_status);\n          methods.updateActiveProfile(user.provider_id, user.online_status);\n        }).listenForWhisper('read', function (message) {\n          methods.updateBobbleHead(message.provider_id, message.message_id);\n          methods.drawBobbleHeads();\n        }).listen('.thread.settings', methods.groupSettingsState).listen('.thread.avatar', methods.groupAvatarState).listen('.message.edited', methods.renderUpdatedMessage).listen('.reaction.added', methods.updateNewReaction).listen('.reaction.removed', methods.updateRemoveReaction);\n      }\n    },\n    Health = {\n      checkConnection: function checkConnection() {\n        if (!Messenger.common().modules.includes('NotifyManager') || !NotifyManager.sockets().status || !NotifyManager.sockets().Echo) {\n          if (opt.socket.socket_retries >= 10) {\n            opt.storage.active_profiles = [];\n            opt.socket.socket_retries = 0;\n            Health.unreadCheck();\n            opt.elements.socket_error_msg.html(ThreadTemplates.render().socket_error());\n            if (opt.thread.id) {\n              $('.thread_error_area').show();\n              $('.thread_error_btn').popover();\n            }\n          }\n          if (opt.timers.socket_interval === null) {\n            opt.timers.socket_interval = setInterval(function () {\n              Health.checkConnection();\n            }, 1000);\n          }\n          opt.socket.socket_retries++;\n          if (Messenger.common().modules.includes('NotifyManager') && NotifyManager.sockets().forced_disconnect) opt.elements.my_avatar_area.html(ThreadTemplates.render().my_avatar_status(0));\n          return;\n        }\n        Health.onConnection();\n      },\n      onConnection: function onConnection(full) {\n        opt.elements.my_avatar_area.html(ThreadTemplates.render().my_avatar_status(opt.socket.online_status_setting));\n        PageListeners.listen().tooltips();\n        opt.socket.socket_retries = 0;\n        opt.elements.socket_error_msg.html('');\n        clearInterval(opt.timers.socket_interval);\n        opt.timers.socket_interval = null;\n        if (opt.thread.id && opt.thread.type !== 3) {\n          $('.thread_error_area').hide();\n          mounted.startPresence(full);\n        }\n      },\n      reConnected: function reConnected(full) {\n        opt.elements.my_avatar_area.html(ThreadTemplates.render().my_avatar_status(opt.socket.online_status_setting));\n        PageListeners.listen().tooltips();\n        Health.onConnection(full);\n        if (!CallManager.state().initialized) LoadIn.threads();\n        if (opt.thread.id) {\n          opt.storage.participants = [];\n          methods.initializeRecentMessages(true);\n        }\n      },\n      unreadCheck: function unreadCheck() {\n        if (!Messenger.common().modules.includes('NotifyManager') || NotifyManager.sockets().forced_disconnect) return;\n        var checkTotalUnread = function checkTotalUnread() {\n          if (CallManager.state().initialized) return;\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'unread-threads-count',\n            success: function success(data) {\n              if (NotifyManager.counts().threads !== data.unread_threads_count) {\n                NotifyManager.updateMessageCount({\n                  total_unread: data.unread_threads_count\n                });\n                LoadIn.threads();\n              }\n            },\n            fail: null\n          });\n        };\n        if (opt.thread.id) {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/is-unread',\n            success: function success(data) {\n              if (data.unread) {\n                opt.storage.participants = [];\n                if (document.hasFocus() && !opt.socket.is_away) methods.markRead();\n                methods.initializeRecentMessages(true);\n                if (!document.hasFocus() || opt.socket.is_away) NotifyManager.sound('message');\n              } else {\n                checkTotalUnread();\n              }\n            },\n            fail: null\n          });\n          return;\n        }\n        checkTotalUnread();\n      }\n    },\n    Imports = {\n      newMessage: function newMessage(data) {\n        if (opt.thread.id === data.thread_id) {\n          methods.addMessage(data);\n          return;\n        }\n        if (CallManager.state().initialized && CallManager.state().thread_id !== data.thread_id) return;\n        if (opt.thread.initializing && opt.thread._id === data.thread_id) {\n          opt.storage.pending_messages.push(data);\n          methods.updateThread(data, false, false, true);\n          return;\n        }\n        methods.updateThread(data, false, false, true);\n        if (!Messenger.isProvider(data.owner_id, data.owner_type)) NotifyManager.sound('message');\n      },\n      audioMessage: function audioMessage(audio) {\n        if (opt.thread.id) {\n          if (opt.thread.type === 3) {\n            new_forms.newPrivate(false, true, audio);\n          } else {\n            methods.sendUploadFiles(audio, false, true);\n          }\n        }\n      },\n      callStatus: function callStatus(data, action) {\n        methods.threadCallStatus(data, action);\n      },\n      addedToThread: function addedToThread(thread_id) {\n        LoadIn.thread(thread_id);\n        NotifyManager.sound('message');\n      },\n      promotedAdmin: function promotedAdmin(thread_id) {\n        if (opt.thread.id === thread_id) {\n          NotifyManager.sound('notify');\n          Messenger.alert().Alert({\n            title: 'You were promoted to admin. Refreshing the group...',\n            toast: true,\n            theme: 'info'\n          });\n          LoadIn.initiate_thread({\n            thread_id: opt.thread.id,\n            force: true\n          });\n        }\n      },\n      demotedAdmin: function demotedAdmin(thread_id) {\n        if (opt.thread.id === thread_id) {\n          NotifyManager.sound('notify');\n          Messenger.alert().Alert({\n            title: 'You were demoted from admin. Refreshing the group...',\n            toast: true,\n            theme: 'info'\n          });\n          LoadIn.initiate_thread({\n            thread_id: opt.thread.id,\n            force: true\n          });\n        }\n      },\n      permissionsUpdated: function permissionsUpdated(thread_id) {\n        if (opt.thread.id === thread_id) {\n          NotifyManager.sound('notify');\n          Messenger.alert().Alert({\n            title: 'Your permissions were updated. Refreshing the group...',\n            toast: true,\n            theme: 'info'\n          });\n          LoadIn.initiate_thread({\n            thread_id: opt.thread.id,\n            force: true\n          });\n        }\n      },\n      threadApproval: function threadApproval(thread_id, approved) {\n        if (approved) {\n          if (opt.thread.id === thread_id) {\n            LoadIn.initiate_thread({\n              thread_id: thread_id,\n              force: true\n            });\n          } else {\n            LoadIn.threads();\n          }\n        } else {\n          if (opt.thread.id === thread_id) LoadIn.closeOpened();\n          setTimeout(function () {\n            methods.removeThread(thread_id);\n          }, 2500);\n        }\n      },\n      threadLeft: function threadLeft(thread_id) {\n        if (opt.thread.id === thread_id) LoadIn.closeOpened();\n        setTimeout(function () {\n          methods.removeThread(thread_id);\n        }, 2500);\n      },\n      purgeMessage: function purgeMessage(message) {\n        if (opt.thread.id === message.thread_id) {\n          methods.purgeMessage(message.message_id);\n          $(\"#message_\" + message.message_id).remove();\n        }\n      }\n    },\n    methods = {\n      initiatePrivate: function initiatePrivate(arg, data, noHistory) {\n        var _data$options$awaitin;\n        if (data.resources.hasOwnProperty('messages')) {\n          opt.storage.messages = data.resources.messages.data;\n          if (!data.resources.messages.meta.final_page) {\n            opt.thread.thread_history = true;\n            opt.thread.history_id = data.resources.messages.meta.next_page_id;\n            opt.thread.history_route = data.resources.messages.meta.next_page_route;\n          } else {\n            opt.thread.thread_history = false;\n            opt.thread.history_id = null;\n            opt.thread.history_route = null;\n          }\n        }\n        opt.storage.participants = data.resources.hasOwnProperty('participants') ? data.resources.participants.data : [];\n        opt.elements.message_container.html(ThreadTemplates.render().render_private(data));\n        if (!noHistory) window.history.pushState({\n          type: 1,\n          thread_id: data.id\n        }, null, Messenger.common().WEB + '/' + data.id);\n        opt.thread.created_at = data.created_at;\n        opt.thread.muted = data.options.muted;\n        opt.thread._thread = data;\n        mounted.Initialize({\n          type: data.type,\n          thread_id: data.id,\n          t_name: data.name,\n          can_call: data.options.call,\n          admin: data.options.admin,\n          pending: data.pending,\n          awaiting_my_approval: (_data$options$awaitin = data.options.awaiting_my_approval) !== null && _data$options$awaitin !== void 0 ? _data$options$awaitin : false,\n          messaging: data.options.message,\n          lockout: data.locked\n        });\n        methods.updateThread(data, true, false, 'new' in arg);\n      },\n      initiateGroup: function initiateGroup(arg, data, noHistory) {\n        if (data.resources.hasOwnProperty('messages')) {\n          opt.storage.messages = data.resources.messages.data;\n          if (!data.resources.messages.meta.final_page) {\n            opt.thread.thread_history = true;\n            opt.thread.history_id = data.resources.messages.meta.next_page_id;\n            opt.thread.history_route = data.resources.messages.meta.next_page_route;\n          } else {\n            opt.thread.thread_history = false;\n            opt.thread.history_id = null;\n            opt.thread.history_route = null;\n          }\n        }\n        opt.storage.participants = data.resources.hasOwnProperty('participants') ? data.resources.participants.data : [];\n        opt.elements.message_container.html(ThreadTemplates.render().render_group(data));\n        if (!noHistory) window.history.pushState({\n          type: 2,\n          thread_id: data.id\n        }, null, Messenger.common().WEB + '/' + data.id);\n        opt.thread.created_at = data.created_at;\n        opt.thread.muted = data.options.muted;\n        opt.thread._thread = data;\n        mounted.Initialize({\n          type: data.type,\n          thread_id: data.id,\n          t_name: data.name,\n          can_call: data.options.call,\n          admin: data.options.admin,\n          messaging: data.options.message,\n          lockout: data.locked\n        });\n        methods.updateThread(data, true, false, 'new' in arg);\n      },\n      manageMessengerSearch: function manageMessengerSearch(search) {\n        if (opt.thread.type !== 7) return;\n        if (!search.data.length) {\n          opt.elements.messenger_search_results.html(ThreadTemplates.render().thread_empty_search(true, true));\n          return;\n        }\n        opt.elements.messenger_search_results.html('');\n        search.data.forEach(function (profile) {\n          opt.elements.messenger_search_results.append(ThreadTemplates.render().messenger_search(profile));\n        });\n        LazyImages.update();\n      },\n      fileDragDrop: function fileDragDrop(e) {\n        var isFile = function isFile() {\n          for (var i = 0; i < e.dataTransfer.items.length; i++) {\n            if (e.dataTransfer.items[i].kind === \"file\") {\n              return true;\n            }\n          }\n          return false;\n        };\n        if (!isFile()) return;\n        e.preventDefault();\n        e.stopPropagation();\n        if (![1, 2].includes(opt.thread.type) || !opt.thread.id || opt.thread.lockout || !opt.thread.messaging) return;\n        if (['dragenter', 'dragover'].includes(e.type)) {\n          if (opt.timers.drag_drop_overlay_hide) clearTimeout(opt.timers.drag_drop_overlay_hide);\n          opt.elements.drag_drop_zone.fadeIn('fast');\n        }\n        if (e.type === 'dragleave') {\n          opt.timers.drag_drop_overlay_hide = setTimeout(function () {\n            opt.elements.drag_drop_zone.fadeOut('fast');\n          }, 200);\n        }\n        if (e.type === 'drop') {\n          opt.elements.drag_drop_zone.fadeOut('fast');\n          var files = e.dataTransfer.files;\n          _toConsumableArray(files).forEach(methods.sendUploadFiles);\n          opt.elements.message_text_input.focus();\n        }\n      },\n      manageSendMessageButton: function manageSendMessageButton() {\n        var btn = $(\"#inline_send_msg_btn\"),\n          message_contents = opt.elements.message_text_input.val();\n        if (message_contents.trim().length) {\n          if (!btn.length) {\n            opt.elements.message_text_input.after(ThreadTemplates.render().send_msg_btn(false));\n          }\n        } else {\n          btn.remove();\n        }\n      },\n      groupSettingsState: function groupSettingsState(settings) {\n        if (!Messenger.isProvider(settings.sender.provider_id, null, settings.sender.provider_alias)) {\n          NotifyManager.sound('notify');\n          Messenger.alert().Alert({\n            title: settings.sender.name + ' updated the groups settings. Refreshing the group...',\n            toast: true,\n            theme: 'info'\n          });\n        }\n        LoadIn.initiate_thread({\n          thread_id: opt.thread.id,\n          force: true\n        });\n      },\n      groupAvatarState: function groupAvatarState(settings) {\n        if (!Messenger.isProvider(settings.sender.provider_id, null, settings.sender.provider_alias)) {\n          NotifyManager.sound('notify');\n          Messenger.alert().Alert({\n            title: settings.sender.name + ' updated the groups avatar. Refreshing the group...',\n            toast: true,\n            theme: 'info'\n          });\n        }\n        LoadIn.initiate_thread({\n          thread_id: opt.thread.id,\n          force: true\n        });\n      },\n      threadScrollBottom: function threadScrollBottom(force, check) {\n        if (!opt.elements.the_thread) return false;\n        var top = opt.elements.the_thread.prop(\"scrollTop\"),\n          height = opt.elements.the_thread.prop(\"scrollHeight\"),\n          offset = opt.elements.the_thread.prop(\"offsetHeight\");\n        if (force || top === height - offset || height - offset - top < 200) {\n          if (!check) opt.elements.the_thread.scrollTop(height);\n          return true;\n        }\n        return false;\n      },\n      statusOnline: function statusOnline(state, inactivity) {\n        opt.socket.is_away = state === 2 && inactivity;\n        if (opt.INIT && opt.elements.my_avatar_area.length) {\n          opt.elements.my_avatar_area.html(ThreadTemplates.render().my_avatar_status(state === 1 && opt.socket.online_status_setting === 2 ? 2 : state === 1 && opt.socket.online_status_setting === 0 ? 0 : state === 2 && opt.socket.online_status_setting === 0 ? 0 : state));\n          PageListeners.listen().tooltips();\n        }\n        methods.sendOnlineStatus(state === 1 && opt.socket.online_status_setting === 2 ? 2 : state);\n      },\n      updateOnlineStatusSetting: function updateOnlineStatusSetting(state) {\n        opt.socket.online_status_setting = state;\n        methods.statusOnline(state, false);\n      },\n      checkThreadStorageUnread: function checkThreadStorageUnread() {\n        if (!opt.thread.id) return false;\n        var thread = methods.locateStorageItem({\n          type: 'thread',\n          id: opt.thread.id\n        });\n        return thread.found && opt.storage.threads[thread.index].unread;\n      },\n      markRead: function markRead() {\n        if (!opt.thread.id || opt.thread.awaiting_my_approval || !methods.threadScrollBottom(false, true)) return;\n        opt.thread.messages_unread = false;\n        opt.elements.message_container.removeClass('msg-ctnr-unread');\n        opt.thread.click_to_read = false;\n        opt.elements.new_msg_alert.hide();\n        methods.updateThread({\n          thread_id: opt.thread.id\n        }, false, true, false);\n        if (opt.storage.messages.length) methods.seenMessage(opt.storage.messages[0].id);\n        var runMarkRead = function runMarkRead() {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/mark-read',\n            fail: null\n          });\n        };\n        if (opt.timers.mark_read_timeout) {\n          clearTimeout(opt.timers.mark_read_timeout);\n        }\n        opt.timers.mark_read_timeout = setTimeout(runMarkRead, 1000);\n      },\n      loadDataTable: function loadDataTable(elm, special) {\n        if (opt.elements.data_table) opt.elements.data_table.destroy();\n        if (!elm || !elm.length) return;\n        if (special) {\n          opt.elements.data_table = elm.DataTable({\n            \"language\": {\n              \"info\": \"Showing _START_ to _END_ of _TOTAL_ friends\",\n              \"lengthMenu\": \"Show _MENU_ friends\",\n              \"infoEmpty\": \"Showing 0 to 0 of 0 friends\",\n              \"infoFiltered\": \"(filtered from _MAX_ total friends)\",\n              \"emptyTable\": \"No friends found\",\n              \"zeroRecords\": \"No matching friends found\"\n            },\n            \"drawCallback\": function drawCallback(settings) {\n              var api = new $.fn.DataTable.Api(settings),\n                pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');\n              pagination.toggle(api.page.info().pages > 1);\n              LazyImages.update();\n            },\n            \"pageLength\": 100\n          });\n          return;\n        }\n        opt.elements.data_table = elm.DataTable({\n          \"language\": {\n            \"info\": \"Showing _START_ to _END_ of _TOTAL_ participants\",\n            \"lengthMenu\": \"Show _MENU_ participants\",\n            \"infoEmpty\": \"Showing 0 to 0 of 0 participants\",\n            \"infoFiltered\": \"(filtered from _MAX_ total participants)\",\n            \"emptyTable\": \"No participants found\",\n            \"zeroRecords\": \"No matching participants found\"\n          },\n          \"drawCallback\": function drawCallback(settings) {\n            var api = new $.fn.DataTable.Api(settings),\n              pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');\n            pagination.toggle(api.page.info().pages > 1);\n            LazyImages.update();\n          }\n        });\n      },\n      addTypers: function addTypers(user) {\n        if (!opt.storage.messages.length) return;\n        if (user.provider_alias === 'bot') {\n          methods.addBotTypers(user);\n          return;\n        }\n        var time = new Date(),\n          find = methods.locateStorageItem({\n            type: 'typing',\n            id: user.provider_id\n          });\n        if (!find.found) {\n          opt.storage.who_typing.push({\n            id: user.provider_id,\n            alias: user.provider_alias,\n            avatar: user.avatar,\n            name: user.name,\n            time: time.getTime()\n          });\n          opt.storage.who_typing.forEach(function (user) {\n            if (!$(\"#typing_\" + user.id).length) {\n              methods.updateBobbleHead(user.id, null);\n            }\n          });\n          methods.drawBobbleHeads();\n          return;\n        }\n        opt.storage.who_typing[find.index].time = time.getTime();\n      },\n      addBotTypers: function addBotTypers(bot) {\n        var time = new Date();\n        var find = methods.locateStorageItem({\n          type: 'bot-typing',\n          id: bot.provider_id\n        });\n        if (!find.found) {\n          opt.storage.bot_typing.push({\n            id: bot.provider_id,\n            alias: bot.provider_alias,\n            avatar: bot.avatar,\n            name: bot.name,\n            time: time.getTime()\n          });\n          methods.drawBotTypingBobbleHeads();\n          return;\n        }\n        opt.storage.bot_typing[find.index].time = time.getTime();\n      },\n      removeTypers: function removeTypers(user) {\n        user = user || null;\n        var time = new Date();\n        if (user) {\n          var find = methods.locateStorageItem({\n            type: 'typing',\n            id: user.provider_id\n          });\n          if (find.found) {\n            opt.storage.who_typing.splice(find.index, 1);\n          }\n          methods.updateBobbleHead(user.provider_id, opt.storage.messages[opt.storage.messages.length - 1].message_id);\n          methods.drawBobbleHeads();\n          return;\n        }\n        if (opt.storage.who_typing.length) {\n          opt.storage.who_typing.forEach(function (user, index) {\n            if ((time.getTime() - user.time) / 1000 > 2) {\n              opt.storage.who_typing.splice(index, 1);\n              methods.updateBobbleHead(user.id, opt.storage.messages[opt.storage.messages.length - 1].message_id);\n            }\n          });\n          methods.drawBobbleHeads();\n          return;\n        }\n        if (opt.storage.bot_typing.length) {\n          methods.removeBotTypers(time);\n          return;\n        }\n        $('.typing-ellipsis').remove();\n      },\n      removeBotTypers: function removeBotTypers(time) {\n        opt.storage.bot_typing.forEach(function (bot, index) {\n          if ((time.getTime() - bot.time) / 1000 > 3) {\n            opt.storage.bot_typing.splice(index, 1);\n          }\n        });\n        methods.drawBotTypingBobbleHeads();\n      },\n      purgeMessage: function purgeMessage(id) {\n        var message = methods.locateStorageItem({\n            type: 'message',\n            id: id\n          }),\n          i = message.index;\n        if (message.found) {\n          opt.storage.messages.splice(i, 1);\n        }\n        methods.imageLoadListener(false);\n      },\n      privateMainBobbleDraw: function privateMainBobbleDraw(id) {\n        var bobble = methods.locateStorageItem({\n            type: 'bobble',\n            id: id\n          }),\n          status = $(\"#main_bobble_\" + id);\n        if (!status.length || !bobble.found) return;\n        status.html(ThreadTemplates.render().thread_private_header_bobble(opt.storage.participants[bobble.index].owner));\n        PageListeners.listen().tooltips();\n        clearTimeout(opt.timers.private_bobble_refresh_timeout);\n        if (opt.storage.participants[bobble.index].owner.options.online_status === 0) {\n          opt.timers.private_bobble_refresh_timeout = setTimeout(function () {\n            methods.privateMainBobbleDraw(id);\n          }, 20000);\n        }\n      },\n      drawBotTypingBobbleHeads: function drawBotTypingBobbleHeads() {\n        $(\".bot-bobble-head\").remove();\n        opt.storage.bot_typing.forEach(function (bot) {\n          opt.elements.seen_by_final.prepend(ThreadTemplates.render().bot_typing_bobble_head(bot));\n        });\n      },\n      drawBobbleHeads: function drawBobbleHeads() {\n        if (!opt.storage.participants.length || !opt.storage.messages.length) return;\n        opt.storage.participants.forEach(function (value) {\n          if (Messenger.isProvider(value.owner_id, value.owner_type) || !value.last_read.message_id || 'added' in value && value.added) return;\n          $(\".bobble_head_\" + value.owner_id).remove();\n          var message = $(\"#message_\" + value.last_read.message_id);\n          if (value.caught_up && value.typing || opt.storage.messages[0].id === value.last_read.message_id) {\n            opt.elements.seen_by_final.prepend(ThreadTemplates.render().bobble_head(value, true));\n            value.added = true;\n            value.caught_up = true;\n          } else if (message.length) {\n            if (!message.next().hasClass('seen-by')) message.after(ThreadTemplates.render().seen_by(value.last_read.message_id));\n            $(\"#seen-by_\" + value.last_read.message_id).prepend(ThreadTemplates.render().bobble_head(value, false));\n            value.added = true;\n            value.caught_up = false;\n          }\n          if (opt.thread.type === 1) {\n            methods.privateMainBobbleDraw(value.owner_id);\n          }\n        });\n        $(\".seen-by\").each(function () {\n          if (!$(this).children().length) $(this).remove();\n        });\n        methods.threadScrollBottom(false, false);\n      },\n      updateBobbleHead: function updateBobbleHead(owner, message) {\n        var typing = methods.locateStorageItem({\n            type: 'typing',\n            id: owner\n          }),\n          found = false;\n        if (message === null) {\n          if (typing.found && opt.storage.messages.length) {\n            message = opt.storage.messages[0].id;\n          } else {\n            message = false;\n          }\n        }\n        for (var x = 0; x < opt.storage.active_profiles.length; x++) {\n          if (opt.storage.active_profiles[x].provider_id === owner) {\n            found = true;\n            break;\n          }\n        }\n        var bobble = methods.locateStorageItem({\n            type: 'bobble',\n            id: owner\n          }),\n          i = bobble.index;\n        if (bobble.found) {\n          opt.storage.participants[i].last_read.message_id = message ? message : opt.storage.participants[i].last_read.message_id;\n          opt.storage.participants[i].added = false;\n          opt.storage.participants[i].typing = typing.found;\n          opt.storage.participants[i].caught_up = typing.found ? true : opt.storage.participants[i].caught_up;\n          opt.storage.participants[i].in_chat = typing.found || found;\n          if (typing.found) {\n            opt.storage.participants[i].owner.options.online_status = 1;\n          }\n          $(\".bobble_head_\" + owner).remove();\n          $(\".seen-by\").each(function () {\n            if (!$(this).children().length) $(this).remove();\n          });\n        }\n      },\n      checkRecentBobbleHeads: function checkRecentBobbleHeads(reload) {\n        if (reload) {\n          LoadIn.bobbleHeads();\n          return;\n        }\n        for (var i = 0; i < opt.storage.participants.length; i++) {\n          if (opt.storage.participants[i].caught_up && !opt.storage.participants[i].typing && opt.storage.messages[0].id !== opt.storage.participants[i].last_read.message_id) {\n            methods.updateBobbleHead(opt.storage.participants[i].owner_id, opt.storage.participants[i].last_read.message_id);\n          }\n        }\n        methods.drawBobbleHeads();\n      },\n      updateActiveProfile: function updateActiveProfile(owner, action) {\n        if (action === 3) {\n          for (var i = 0; i < opt.storage.active_profiles.length; i++) {\n            if (opt.storage.active_profiles[i].provider_id === owner) {\n              opt.storage.active_profiles.splice(i, 1);\n              break;\n            }\n          }\n        } else {\n          var bobble = methods.locateStorageItem({\n              type: 'bobble',\n              id: owner\n            }),\n            z = bobble.index;\n          if (bobble.found) {\n            opt.storage.participants[z].owner.options.online_status = action;\n          }\n        }\n        methods.updateBobbleHead(owner, null);\n        methods.drawBobbleHeads();\n        if (action === 3 && opt.thread.type === 1) setTimeout(LoadIn.bobbleHeads, 6000);\n      },\n      imageLoadListener: function imageLoadListener(scroll) {\n        var images = document.getElementsByClassName('msg_image'),\n          emojis = document.getElementsByClassName('joypixels'),\n          loadImage = function loadImage(e) {\n            $(e.target).siblings('.spinner-grow').remove();\n            $(e.target).removeClass('msg_image NS');\n            if (scroll) methods.threadScrollBottom(true, false);\n            if (e.type === 'error') {\n              $(e.target).replaceWith('<span class=\"badge badge-pill badge-danger\">Image failed to load.</span>');\n            }\n          },\n          loadEmoji = function loadEmoji(e) {\n            if (scroll) methods.threadScrollBottom(true, false);\n            if (e.type === 'error') $(e.target).remove();\n          };\n        [].forEach.call(images, function (img) {\n          img.addEventListener('load', loadImage, false);\n          img.addEventListener('error', loadImage, false);\n        });\n        [].forEach.call(emojis, function (img) {\n          img.addEventListener('load', loadEmoji, false);\n          img.addEventListener('error', loadEmoji, false);\n        });\n      },\n      manageRecentMessages: function manageRecentMessages() {\n        var messages_html = '';\n        opt.storage.messages.reverse().forEach(function (value, key) {\n          if (value.system_message) {\n            messages_html += ThreadTemplates.render().system_message(value);\n            return;\n          }\n          if (Messenger.isProvider(value.owner_id, value.owner_type)) {\n            if (key !== 0 && opt.storage.messages[key - 1].owner_id === value.owner_id && opt.storage.messages[key - 1].owner_type === value.owner_type && !opt.storage.messages[key - 1].system_message && !value.hasOwnProperty('reply_to') && Messenger.format().timeDiffInUnit(value.created_at, opt.storage.messages[key - 1].created_at, 'm') < 30) {\n              messages_html += ThreadTemplates.render().my_message_grouped(value);\n              return;\n            }\n            if (value.hasOwnProperty('reply_to')) {\n              messages_html += ThreadTemplates.render().my_message_reply(value);\n              return;\n            }\n            messages_html += ThreadTemplates.render().my_message(value);\n            return;\n          }\n          if (key !== 0 && opt.storage.messages[key - 1].owner_id === value.owner_id && opt.storage.messages[key - 1].owner_type === value.owner_type && !opt.storage.messages[key - 1].system_message && !value.hasOwnProperty('reply_to') && Messenger.format().timeDiffInUnit(value.created_at, opt.storage.messages[key - 1].created_at, 'm') < 30) {\n            messages_html += ThreadTemplates.render().message_grouped(value);\n            return;\n          }\n          if (value.hasOwnProperty('reply_to')) {\n            messages_html += ThreadTemplates.render().message_reply(value);\n            return;\n          }\n          messages_html += ThreadTemplates.render().message(value);\n        });\n        opt.elements.msg_stack.append(messages_html);\n        opt.storage.messages.reverse();\n        methods.imageLoadListener(true);\n        methods.drawBobbleHeads();\n        methods.threadScrollBottom(true, false);\n        if (!opt.thread.thread_history) {\n          opt.elements.msg_stack.prepend(ThreadTemplates.render().end_of_history(opt.thread.created_at));\n        }\n      },\n      manageHistoryMessages: function manageHistoryMessages(data) {\n        $(\"#loading_history_marker\").remove();\n        var messages = data.data.filter(function (value) {\n          return !methods.locateStorageItem({\n            type: 'message',\n            id: value.id\n          }).found;\n        });\n        var last_message = opt.storage.messages.length ? opt.storage.messages[opt.storage.messages.length - 1] : null;\n        var messages_html = '';\n        messages.forEach(function (value) {\n          opt.storage.messages.push(value);\n        });\n        messages.reverse();\n        messages.forEach(function (value, key) {\n          if (value.system_message) {\n            messages_html += ThreadTemplates.render().system_message(value);\n            return;\n          }\n          if (Messenger.isProvider(value.owner_id, value.owner_type)) {\n            if (key !== 0 && messages[key - 1].owner_id === value.owner_id && messages[key - 1].owner_type === value.owner_type && !messages[key - 1].system_message && !value.hasOwnProperty('reply_to') && Messenger.format().timeDiffInUnit(value.created_at, messages[key - 1].created_at, 'm') < 30) {\n              messages_html += ThreadTemplates.render().my_message_grouped(value);\n              return;\n            }\n            if (value.hasOwnProperty('reply_to')) {\n              messages_html += ThreadTemplates.render().my_message_reply(value);\n              return;\n            }\n            messages_html += ThreadTemplates.render().my_message(value);\n            return;\n          }\n          if (key !== 0 && messages[key - 1].owner_id === value.owner_id && messages[key - 1].owner_type === value.owner_type && !messages[key - 1].system_message && !value.hasOwnProperty('reply_to') && Messenger.format().timeDiffInUnit(value.created_at, messages[key - 1].created_at, 'm') < 30) {\n            messages_html += ThreadTemplates.render().message_grouped(value);\n            return;\n          }\n          if (value.hasOwnProperty('reply_to')) {\n            messages_html += ThreadTemplates.render().message_reply(value);\n            return;\n          }\n          messages_html += ThreadTemplates.render().message(value);\n        });\n        opt.elements.msg_stack.prepend(messages_html);\n        if (messages.length && last_message !== null && !last_message.system_message && !messages[messages.length - 1].system_message && !last_message.hasOwnProperty('reply_to') && !messages[messages.length - 1].hasOwnProperty('reply_to') && messages[messages.length - 1].owner_id === last_message.owner_id && messages[messages.length - 1].owner_type === last_message.owner_type) {\n          var replace_html = Messenger.isProvider(last_message.owner_id, last_message.owner_type) ? ThreadTemplates.render().my_message_grouped(last_message) : ThreadTemplates.render().message_grouped(last_message);\n          opt.elements.msg_stack.find(\"#message_\" + last_message.id).replaceWith(replace_html);\n        }\n        if (opt.elements.the_thread.prop(\"scrollTop\") === 0) {\n          if (opt.storage.messages.length && opt.storage.messages[opt.storage.messages.length - 1].id !== data.meta.page_id) {\n            document.getElementById('message_' + data.meta.page_id).scrollIntoView();\n            document.getElementById('msg_thread_' + opt.thread.id).scrollTop -= 40;\n            if (Messenger.common().mobile) window.scrollTo(0, 0);\n          } else opt.elements.the_thread.scrollTop(40);\n        }\n        methods.imageLoadListener(false);\n        methods.drawBobbleHeads();\n        if (!messages.length || data.meta.final_page) {\n          opt.thread.thread_history = false;\n          opt.thread.history_route = null;\n          opt.thread.history_id = null;\n          opt.elements.msg_stack.prepend(ThreadTemplates.render().end_of_history(opt.thread.created_at));\n        } else {\n          opt.thread.history_route = data.meta.next_page_route;\n          opt.thread.history_id = data.meta.next_page_id;\n        }\n        opt.thread.history_loading = false;\n        PageListeners.listen().tooltips();\n      },\n      initializeRecentMessages: function initializeRecentMessages(reset) {\n        var onLoad = function onLoad(data) {\n          if (data) {\n            opt.storage.messages = data.data;\n            if (data.meta.final_page) opt.thread.thread_history = false;\n          }\n          opt.elements.msg_stack.html('');\n          methods.manageRecentMessages();\n          if (opt.storage.pending_messages.length) {\n            opt.storage.pending_messages.forEach(methods.addMessage);\n            opt.storage.pending_messages = [];\n            methods.markRead();\n          }\n          if (!opt.storage.participants.length) LoadIn.bobbleHeads();\n        };\n        if (!reset && opt.storage.messages.length) {\n          onLoad();\n        } else {\n          opt.states.lock = true;\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages',\n            success: onLoad,\n            fail: function fail() {\n              opt.states.load_in_retries++;\n              if (opt.states.load_in_retries > 4) {\n                opt.elements.msg_stack.html('');\n                Messenger.alert().Alert({\n                  toast: true,\n                  theme: 'warning',\n                  title: 'We could not load in your messages at this time'\n                });\n                return;\n              }\n              methods.initializeRecentMessages();\n            }\n          });\n        }\n      },\n      loadHistory: function loadHistory() {\n        if (opt.states.lock || opt.thread.history_loading || !opt.thread.thread_history || !opt.storage.messages.length) return;\n        opt.states.lock = true;\n        opt.thread.history_loading = true;\n        opt.elements.msg_stack.prepend(ThreadTemplates.render().loading_history());\n        Messenger.xhr().request({\n          route: opt.thread.history_route,\n          success: methods.manageHistoryMessages,\n          fail: function fail() {\n            $(\"#loading_history_marker\").remove();\n          },\n          bypass: true,\n          fail_alert: true\n        });\n      },\n      isTyping: function isTyping() {\n        var time = new Date();\n        if (opt.socket.online_status_setting === 1 && opt.storage.active_profiles.length && opt.socket.chat && (time.getTime() - opt.socket.send_typing) / 1000 > 1.5) {\n          opt.socket.send_typing = time.getTime();\n          opt.socket.chat.whisper('typing', {\n            provider_id: Messenger.common().provider_id,\n            provider_alias: Messenger.common().provider_alias,\n            name: Messenger.common().name,\n            avatar: Messenger.common().avatar_sm\n          });\n        }\n      },\n      stopTyping: function stopTyping() {\n        if (opt.socket.online_status_setting === 1 && opt.storage.active_profiles.length && opt.socket.chat && opt.socket.send_typing > 0) {\n          opt.socket.send_typing = 0;\n          opt.socket.chat.whisper('stop-typing', {\n            provider_id: Messenger.common().provider_id,\n            provider_alias: Messenger.common().provider_alias,\n            name: Messenger.common().name,\n            avatar: Messenger.common().avatar_sm\n          });\n        }\n      },\n      seenMessage: function seenMessage(message) {\n        if (opt.storage.active_profiles.length && opt.socket.chat) {\n          opt.socket.chat.whisper('read', {\n            provider_id: Messenger.common().provider_id,\n            provider_alias: Messenger.common().provider_alias,\n            avatar: Messenger.common().avatar_sm,\n            message_id: message\n          });\n        }\n      },\n      sendOnlineStatus: function sendOnlineStatus(status) {\n        if (!opt.storage.active_profiles.length || !opt.socket.chat) return;\n        opt.socket.chat.whisper('online', {\n          provider_id: Messenger.common().provider_id,\n          provider_alias: Messenger.common().provider_alias,\n          name: Messenger.common().name,\n          avatar: Messenger.common().avatar_sm,\n          online_status: opt.socket.online_status_setting !== 0 ? status : 0\n        });\n      },\n      pasteImage: function pasteImage(event) {\n        if (opt.thread.type === 3) return;\n        var items = (event.clipboardData || event.originalEvent.clipboardData).items,\n          blob = null;\n        for (var i = 0; i < items.length; i++) {\n          if (items[i].type.indexOf(\"image\") === 0) {\n            blob = items[i].getAsFile();\n          }\n        }\n        if (blob !== null) {\n          var reader = new FileReader();\n          reader.onload = function (event) {\n            var file = event.target.result;\n            Messenger.alert().Modal({\n              size: 'lg',\n              theme: 'dark',\n              icon: 'image',\n              backdrop_ctrl: false,\n              title: 'Send Screenshot?',\n              body: '<img class=\"img-fluid\" src=\"' + file + '\"><canvas class=\"NS\" id=\"paste_canvas\"></canvas>',\n              cb_btn_txt: 'Send',\n              cb_btn_icon: 'cloud-upload-alt',\n              cb_btn_theme: 'success',\n              onReady: function onReady() {\n                var canvas = document.getElementById(\"paste_canvas\"),\n                  ctx = canvas.getContext(\"2d\"),\n                  image = new Image();\n                image.onload = function () {\n                  canvas.width = image.width;\n                  canvas.height = image.height;\n                  ctx.drawImage(image, 0, 0);\n                };\n                image.src = file;\n              },\n              callback: function callback() {\n                document.getElementById(\"paste_canvas\").toBlob(function (blob) {\n                  methods.sendUploadFiles(blob);\n                  $(\".modal\").modal('hide');\n                  opt.elements.message_text_input.focus();\n                }, 'image/png');\n              }\n            });\n          };\n          reader.readAsDataURL(blob);\n        }\n      },\n      sendMessage: function sendMessage() {\n        if (!opt.thread.id || opt.thread.lockout || !opt.thread.messaging) return;\n        var message_contents = opt.elements.message_text_input.val();\n        if (message_contents.trim().length) {\n          opt.elements.message_text_input.val('').focus();\n          var pending = methods.makePendingMessage(0, message_contents);\n          methods.managePendingMessage('add', pending);\n          var formData = {\n            message: message_contents,\n            temporary_id: pending.id\n          };\n          if (opt.thread.replying) {\n            formData.reply_to_id = opt.thread.reply_to_id;\n            methods.resetReplying();\n          }\n          Messenger.xhr().payload({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages',\n            data: formData,\n            success: function success(x) {\n              methods.managePendingMessage('completed', pending, x);\n            },\n            fail: function fail() {\n              methods.managePendingMessage('purge', pending);\n            },\n            fail_alert: true,\n            bypass: true\n          });\n          methods.manageSendMessageButton();\n        }\n      },\n      sendUploadFiles: function sendUploadFiles(file, getType, audioMessage) {\n        var type = {};\n        if (file.type.match('image.*')) {\n          type.number = 1;\n          type.input = 'image';\n          type.path = '/images';\n        } else if (file.type.match('audio.*')) {\n          type.number = 3;\n          type.input = 'audio';\n          type.path = '/audio';\n        } else if (file.type.match('video.*')) {\n          type.number = 4;\n          type.input = 'video';\n          type.path = '/videos';\n        } else {\n          type.number = 2;\n          type.input = 'document';\n          type.path = '/documents';\n        }\n        if (getType === true) {\n          return type.input;\n        }\n        var pending = methods.makePendingMessage(type.number, null);\n        methods.managePendingMessage('add', pending);\n        var form = new FormData();\n        if (audioMessage === true) {\n          form.append(type.input, file, 'audio_message.webm');\n          form.append('extra', JSON.stringify({\n            audio_message: true\n          }));\n        } else {\n          form.append(type.input, file);\n        }\n        form.append('temporary_id', pending.id);\n        if (opt.thread.replying) {\n          form.append('reply_to_id', opt.thread.reply_to_id);\n          methods.resetReplying();\n        }\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + type.path,\n          data: form,\n          success: function success(x) {\n            methods.managePendingMessage('completed', pending, x);\n          },\n          fail: function fail() {\n            methods.managePendingMessage('purge', pending);\n          },\n          fail_alert: true,\n          bypass: true\n        });\n      },\n      makePendingMessage: function makePendingMessage(type, body) {\n        return {\n          body: body ? Messenger.format().escapeHtml(body) : null,\n          id: uuid.v4(),\n          type: type,\n          owner_id: Messenger.common().provider_id,\n          owner_type: Messenger.common().provider_model,\n          thread_id: opt.thread.id\n        };\n      },\n      addPendingMessage: function addPendingMessage(message) {\n        if (opt.storage.pending_messages.length > 1 || opt.storage.messages.length > 1 && Messenger.isProvider(opt.storage.messages[0].owner_id, opt.storage.messages[0].owner_type) && !opt.storage.messages[0].system_message) {\n          opt.elements.pending_msg_stack.append(ThreadTemplates.render().pending_message_grouped(message));\n        } else {\n          opt.elements.pending_msg_stack.append(ThreadTemplates.render().pending_message(message));\n        }\n      },\n      managePendingMessage: function managePendingMessage(action, pending, _final) {\n        var msg_elm = $(\"#pending_message_\" + pending.id),\n          storage = methods.locateStorageItem({\n            type: 'pending_message',\n            id: pending.id\n          });\n        switch (action) {\n          case 'add':\n            opt.storage.pending_messages.push(pending);\n            methods.addPendingMessage(pending);\n            methods.messageStatusState(pending, false);\n            setTimeout(function () {\n              $(\"#pending_message_loading_\" + pending.id).show();\n            }, 1500);\n            break;\n          case 'completed':\n            msg_elm.remove();\n            if (storage.found) opt.storage.pending_messages.splice(storage.index, 1);\n            methods.addMessage(_final);\n            break;\n          case 'purge':\n            $(\"#pending_message_loading_\" + pending.id).removeClass('text-primary').addClass('text-danger').show();\n            setTimeout(function () {\n              msg_elm.remove();\n            }, 5000);\n            if (storage.found) opt.storage.pending_messages.splice(storage.index, 1);\n            break;\n        }\n      },\n      locateStorageItem: function locateStorageItem(arg) {\n        var collection,\n          term,\n          item = {\n            found: false,\n            index: 0\n          };\n        switch (arg.type) {\n          case 'message':\n            collection = opt.storage.messages;\n            term = 'id';\n            break;\n          case 'pending_message':\n            collection = opt.storage.pending_messages;\n            term = 'id';\n            break;\n          case 'thread':\n            collection = opt.storage.threads;\n            term = 'id';\n            break;\n          case 'bobble':\n            collection = opt.storage.participants;\n            term = 'owner_id';\n            break;\n          case 'typing':\n            collection = opt.storage.who_typing;\n            term = 'id';\n            break;\n          case 'bot-typing':\n            collection = opt.storage.bot_typing;\n            term = 'id';\n            break;\n        }\n        for (var i = 0; i < collection.length; i++) {\n          if (collection[i][term] === arg.id) {\n            item.found = true;\n            item.index = i;\n            break;\n          }\n        }\n        return item;\n      },\n      addMessage: function addMessage(msg) {\n        if (msg.thread_id !== opt.thread.id) return;\n        if (methods.locateStorageItem({\n          type: 'message',\n          id: msg.id\n        }).found) return;\n        if (msg.temporary_id) {\n          var pending = methods.locateStorageItem({\n            type: 'pending_message',\n            id: msg.temporary_id\n          });\n          if (pending.found) {\n            msg.temporary_id = null;\n            methods.managePendingMessage('completed', opt.storage.pending_messages[pending.index], msg);\n            return;\n          }\n        }\n        methods.updateThread(msg, false, false, true);\n        opt.storage.messages.unshift(msg);\n        methods.updateBobbleHead(msg.owner_id, msg.id);\n        if (msg.system_message) {\n          opt.elements.msg_stack.append(ThreadTemplates.render().system_message(msg));\n        } else if (msg.hasOwnProperty('reply_to')) {\n          Messenger.isProvider(msg.owner_id, msg.owner_type) ? opt.elements.msg_stack.append(ThreadTemplates.render().my_message_reply(msg)) : opt.elements.msg_stack.append(ThreadTemplates.render().message_reply(msg));\n        } else if (opt.storage.messages.length > 1 && opt.storage.messages[1].owner_id === msg.owner_id && opt.storage.messages[1].owner_type === msg.owner_type && !opt.storage.messages[1].system_message && Messenger.format().timeDiffInUnit(msg.created_at, opt.storage.messages[1].created_at, 'm') < 30) {\n          Messenger.isProvider(msg.owner_id, msg.owner_type) ? opt.elements.msg_stack.append(ThreadTemplates.render().my_message_grouped(msg)) : opt.elements.msg_stack.append(ThreadTemplates.render().message_grouped(msg));\n        } else {\n          Messenger.isProvider(msg.owner_id, msg.owner_type) ? opt.elements.msg_stack.append(ThreadTemplates.render().my_message(msg)) : opt.elements.msg_stack.append(ThreadTemplates.render().message(msg));\n        }\n        methods.messageStatusState(msg, true);\n        methods.drawBobbleHeads();\n        if (opt.timers.recent_bobble_timeout) clearTimeout(opt.timers.recent_bobble_timeout);\n        opt.timers.recent_bobble_timeout = setTimeout(function () {\n          methods.checkRecentBobbleHeads([88, 97, 98, 99].includes(msg.type));\n        }, 3000);\n      },\n      messageStatusState: function messageStatusState(message, sound) {\n        opt.thread.click_to_read = false;\n        var forceScroll = Messenger.isProvider(message.owner_id, message.owner_type) || ThreadTemplates.youtubeRegex().test(message.body) || message.type === 4,\n          didScroll = methods.threadScrollBottom(forceScroll, false),\n          hide = function hide() {\n            opt.elements.new_msg_alert.hide();\n            opt.thread.messages_unread = false;\n            opt.elements.message_container.removeClass('msg-ctnr-unread');\n          };\n        methods.imageLoadListener(didScroll);\n        if (didScroll && document.hasFocus() && (!opt.socket.is_away || opt.socket.is_away && opt.socket.online_status_setting === 2)) {\n          hide();\n          if (!Messenger.isProvider(message.owner_id, message.owner_type) || ![0, 1, 2].includes(message.type)) methods.markRead();\n        } else if (Messenger.isProvider(message.owner_id, message.owner_type)) {\n          if (![0, 1, 2].includes(message.type)) methods.markRead();\n          hide();\n        } else {\n          opt.thread.messages_unread = true;\n          opt.elements.message_container.addClass('msg-ctnr-unread');\n          if (!didScroll) {\n            opt.elements.new_msg_alert.show();\n            opt.elements.new_msg_alert.html(ThreadTemplates.render().thread_new_message_alert());\n          } else {\n            opt.thread.click_to_read = true;\n          }\n          if (sound) NotifyManager.sound('message');\n        }\n      },\n      threadCallStatus: function threadCallStatus(call, action) {\n        PageListeners.listen().disposeTooltips();\n        //incoming joined ended left\n        var thread = methods.locateStorageItem({\n            type: 'thread',\n            id: call.thread_id\n          }),\n          call_area = $(\"#thread_option_call\");\n        if (!thread.found) {\n          LoadIn.thread(call.thread_id);\n          return;\n        }\n        if (!opt.storage.threads[thread.index].has_call && ['joined', 'left', 'incoming'].includes(action)) {\n          LoadIn.thread(call.thread_id, function (data) {\n            if (opt.thread.id === call.thread_id) {\n              call_area.html(ThreadTemplates.render().thread_call_state(data));\n            }\n            PageListeners.listen().tooltips();\n          });\n          return;\n        }\n        if (opt.storage.threads[thread.index].has_call) {\n          if (action === 'ended') {\n            delete opt.storage.threads[thread.index].resources.active_call;\n            opt.storage.threads[thread.index].has_call = false;\n          } else if (action === 'joined') {\n            opt.storage.threads[thread.index].resources.active_call.options.in_call = true;\n            opt.storage.threads[thread.index].resources.active_call.options.joined = true;\n            opt.storage.threads[thread.index].resources.active_call.options.left_call = false;\n          } else if (action === 'left') {\n            opt.storage.threads[thread.index].resources.active_call.options.in_call = false;\n            opt.storage.threads[thread.index].resources.active_call.options.joined = true;\n            opt.storage.threads[thread.index].resources.active_call.options.left_call = true;\n          }\n          var temp = opt.storage.threads[thread.index];\n          opt.storage.threads.splice(thread.index, 1);\n          opt.storage.threads.unshift(temp);\n          methods.addThread(temp, true);\n          if (opt.thread.id === call.thread_id) {\n            if (action === 'ended') {\n              opt.thread.can_call ? call_area.html(ThreadTemplates.render().thread_call_state(temp)) : call_area.html('');\n            } else {\n              call_area.html(ThreadTemplates.render().thread_call_state(temp));\n            }\n          }\n          PageListeners.listen().tooltips();\n        } else {\n          LoadIn.thread(call.thread_id, function (data) {\n            if (opt.thread.id === call.thread_id) {\n              opt.thread.can_call ? call_area.html(ThreadTemplates.render().thread_call_state(data)) : call_area.html('');\n            }\n            PageListeners.listen().tooltips();\n          });\n        }\n      },\n      threadOnlineStatus: function threadOnlineStatus(state) {\n        if (opt.thread.type !== 1) return;\n        var thread = methods.locateStorageItem({\n          type: 'thread',\n          id: opt.thread.id\n        });\n        if (thread.found) {\n          opt.storage.threads[thread.index].resources.recipient.options.online_status = state;\n          methods.addThread(opt.storage.threads[thread.index], false);\n        }\n      },\n      removeThread: function removeThread(thread_id) {\n        var the_thread = methods.locateStorageItem({\n            type: 'thread',\n            id: thread_id\n          }),\n          elm = $(\"#thread_list_\" + thread_id);\n        if (the_thread.found) {\n          opt.storage.threads.splice(the_thread.index, 1);\n        }\n        elm.remove();\n        methods.calcUnreadThreads();\n      },\n      updateThread: function updateThread(data, thread, read, top) {\n        var the_thread = methods.locateStorageItem({\n          type: 'thread',\n          id: thread ? data.id : data.thread_id\n        });\n        if (!the_thread.found) {\n          if (thread) {\n            opt.storage.threads.unshift(data);\n            methods.addThread(data, true);\n          } else if (\"thread_id\" in data) {\n            LoadIn.thread(data.thread_id);\n          } else {\n            LoadIn.threads();\n          }\n          return;\n        }\n        if (read) {\n          opt.storage.threads[the_thread.index].unread = false;\n          opt.storage.threads[the_thread.index].unread_count = 0;\n          methods.addThread(opt.storage.threads[the_thread.index], top);\n          return;\n        }\n        if (thread) {\n          opt.storage.threads[the_thread.index] = data;\n          methods.addThread(data, top);\n          return;\n        }\n        var temp = opt.storage.threads[the_thread.index];\n        opt.storage.threads.splice(the_thread.index, 1);\n        temp.resources.latest_message = data;\n        temp.updated_at = data.created_at;\n        if (temp.type === 1 && data.thread_id !== opt.thread.id && !Messenger.isProvider(data.owner_id, data.owner_type)) temp.resources.recipient.options.online_status = 1;\n        if (temp.type === 1 && data.thread_id === opt.thread.id && !Messenger.isProvider(data.owner_id, data.owner_type)) {\n          var bobble = methods.locateStorageItem({\n              type: 'bobble',\n              id: data.owner_id\n            }),\n            i = bobble.index;\n          if (bobble.found) {\n            temp.resources.recipient.options.online_status = opt.storage.participants[i].owner.options.online_status;\n          }\n        }\n        if (Messenger.isProvider(data.owner_id, data.owner_type)) {\n          temp.unread = false;\n          temp.unread_count = 0;\n        } else if (opt.thread.id !== data.thread_id || !document.hasFocus() || opt.socket.is_away || !methods.threadScrollBottom(false, true)) {\n          temp.unread = true;\n          temp.unread_count = temp.unread_count + 1;\n        } else {\n          temp.unread = false;\n          temp.unread_count = 0;\n        }\n        opt.storage.threads.unshift(temp);\n        methods.addThread(temp, top);\n      },\n      addThread: function addThread(data, top) {\n        methods.calcUnreadThreads();\n        if (!opt.elements.thread_area.length) return;\n        if (opt.states.thread_filtered) {\n          methods.drawThreads();\n          return;\n        }\n        methods.checkShowThreadSearch();\n        $(\"#no_message_warning\").remove();\n        var thread_elm = opt.elements.thread_area.find('#thread_list_' + data.id),\n          selected = data.id === opt.thread.id;\n        if (selected) {\n          opt.elements.thread_area.find('.thread_list_item').removeClass('alert-warning shadow-sm rounded');\n          opt.elements.thread_area.find('.thread-group-avatar').removeClass('avatar-is-online').addClass('avatar-is-offline');\n        }\n        if (top || !thread_elm.length) {\n          thread_elm.remove();\n          opt.elements.thread_area.prepend(data.type === 2 ? ThreadTemplates.render().group_thread(data, selected) : ThreadTemplates.render().private_thread(data, selected));\n        } else {\n          thread_elm.replaceWith(data.type === 2 ? ThreadTemplates.render().group_thread(data, selected) : ThreadTemplates.render().private_thread(data, selected));\n        }\n      },\n      drawThreads: function drawThreads() {\n        methods.checkShowThreadSearch();\n        opt.elements.thread_area.html('');\n        if (!opt.states.thread_filtered) {\n          opt.storage.threads.forEach(function (value) {\n            opt.elements.thread_area.append(value.group ? ThreadTemplates.render().group_thread(value, value.id === opt.thread.id) : ThreadTemplates.render().private_thread(value, value.id === opt.thread.id));\n          });\n          return;\n        }\n        var filtered = opt.storage.threads.filter(function (thread) {\n          return thread.name.toLowerCase().includes(opt.states.thread_filter_search.toLowerCase());\n        });\n        if (filtered.length) {\n          filtered.forEach(function (value) {\n            opt.elements.thread_area.append(value.group ? ThreadTemplates.render().group_thread(value, value.id === opt.thread.id) : ThreadTemplates.render().private_thread(value, value.id === opt.thread.id));\n          });\n          return;\n        }\n        opt.elements.thread_area.html('<h4 id=\"no_message_warning\" class=\"text-center mt-4\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-comment-slash\"></i> No matches</span></h4>');\n      },\n      checkThreadFilters: function checkThreadFilters(e) {\n        if (e && e.type === 'mouseup') {\n          setTimeout(methods.checkThreadFilters, 0);\n          return;\n        }\n        var filtered = opt.states.thread_filtered,\n          search = opt.states.thread_filter_search;\n        if (opt.elements.thread_search_input.val().trim().length) {\n          opt.states.thread_filtered = true;\n          opt.states.thread_filter_search = opt.elements.thread_search_input.val();\n          if (search !== opt.states.thread_filter_search) methods.drawThreads();\n        } else {\n          opt.states.thread_filtered = false;\n          opt.states.thread_filter_search = null;\n          if (filtered) methods.drawThreads();\n        }\n      },\n      checkShowThreadSearch: function checkShowThreadSearch() {\n        if (!opt.storage.threads.length) {\n          opt.elements.thread_search_bar.hide();\n          return;\n        }\n        opt.elements.thread_search_bar.show();\n      },\n      calcUnreadThreads: function calcUnreadThreads() {\n        var unread = 0;\n        opt.storage.threads.forEach(function (thread) {\n          if (thread.unread && thread.unread_count > 0) unread++;\n        });\n        NotifyManager.updateMessageCount({\n          total_unread: unread\n        });\n      },\n      editMessage: function editMessage(arg) {\n        if (!opt.thread.id) return;\n        var messageStorage = methods.locateStorageItem({\n            type: 'message',\n            id: arg.id\n          }),\n          i = messageStorage.index,\n          msg = $(\"#message_\" + arg.id);\n        if (messageStorage.found && Messenger.isProvider(opt.storage.messages[i].owner_id, opt.storage.messages[i].owner_type)) {\n          msg.find('.message-body').addClass('shadow-success');\n          Messenger.alert().Modal({\n            icon: 'edit',\n            theme: 'dark',\n            title: 'Editing Message',\n            h4: false,\n            backdrop_ctrl: false,\n            unlock_buttons: false,\n            body: ThreadTemplates.render().edit_message(Messenger.format().shortcodeToUnicode(opt.storage.messages[i].body)),\n            cb_btn_txt: 'Update',\n            cb_btn_icon: 'edit',\n            cb_btn_theme: 'success',\n            onReady: function onReady() {\n              setTimeout(function () {\n                Messenger.format().focusEnd(document.getElementById('edit_message_textarea'));\n                PageListeners.listen().tooltips();\n              }, 500);\n            },\n            callback: function callback() {\n              methods.updateMessage(arg);\n            },\n            onClosed: function onClosed() {\n              msg.find('.message-body').removeClass('shadow-success');\n            }\n          });\n        }\n      },\n      replyToMessage: function replyToMessage(arg) {\n        if (!opt.thread.id) return;\n        if (opt.thread.replying) {\n          methods.resetReplying();\n        }\n        var messageStorage = methods.locateStorageItem({\n            type: 'message',\n            id: arg.id\n          }),\n          i = messageStorage.index,\n          msg = $(\"#message_\" + arg.id),\n          focus_input = document.getElementById('message_text_input');\n        if (messageStorage.found && !opt.storage.messages[i].system_message) {\n          msg.find('.message-body').addClass('shadow-primary');\n          opt.elements.reply_message_alert.show();\n          opt.elements.reply_message_alert.html(ThreadTemplates.render().thread_replying_message_alert(opt.storage.messages[i]));\n          opt.thread.replying = true;\n          opt.thread.reply_to_id = arg.id;\n          Messenger.format().focusEnd(focus_input);\n        }\n      },\n      resetReplying: function resetReplying() {\n        if (!opt.thread.id || !opt.thread.replying) return;\n        var msg = $(\"#message_\" + opt.thread.reply_to_id);\n        opt.elements.reply_message_alert.hide();\n        opt.elements.reply_message_alert.html('');\n        opt.thread.replying = false;\n        opt.thread.reply_to_id = null;\n        msg.find('.message-body').removeClass('shadow-primary');\n      },\n      updateMessage: function updateMessage(arg) {\n        var textarea = $(\"#edit_message_textarea\");\n        textarea.prop('disabled', true);\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages/' + arg.id,\n          data: {\n            message: textarea.val()\n          },\n          success: function success(message) {\n            methods.renderUpdatedMessage(message, true);\n          },\n          close_modal: true,\n          fail_alert: true\n        }, 'put');\n      },\n      renderUpdatedMessage: function renderUpdatedMessage(message, force) {\n        if (force === true && Messenger.isProvider(message.owner_id, message.owner_type)) {\n          return;\n        }\n        var msg = $(\"#message_\" + message.id),\n          messageStorage = methods.locateStorageItem({\n            type: 'message',\n            id: message.id\n          }),\n          i = messageStorage.index;\n        if (messageStorage.found) {\n          opt.storage.messages[i] = message;\n        }\n        if (msg.length) {\n          if (message.hasOwnProperty('reply_to')) {\n            msg.replaceWith(Messenger.isProvider(message.owner_id, message.owner_type) ? ThreadTemplates.render().my_message_reply(message) : ThreadTemplates.render().message_reply(message));\n          } else {\n            msg.find('.message-text').html(ThreadTemplates.render().message_body(message));\n          }\n        }\n      },\n      addNewReaction: function addNewReaction(arg) {\n        if (!opt.thread.id) return;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages/' + arg.message_id + '/reactions',\n          data: {\n            reaction: arg.emoji\n          },\n          fail_alert: true\n        });\n      },\n      removeReaction: function removeReaction(arg, removeLi) {\n        if (!opt.thread.id) return;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages/' + arg.message_id + '/reactions/' + arg.id,\n          data: {},\n          success: function success() {\n            if (removeLi === true) {\n              var reactLi = $(\"#react_li_item_\" + arg.id);\n              if (reactLi.length) {\n                reactLi.remove();\n              }\n            }\n          },\n          fail_alert: true\n        }, 'delete');\n      },\n      updateNewReaction: function updateNewReaction(reaction) {\n        var messageStorage = methods.locateStorageItem({\n            type: 'message',\n            id: reaction.message_id\n          }),\n          i = messageStorage.index;\n        if (messageStorage.found) {\n          if (opt.storage.messages[i].hasOwnProperty('reactions')) {\n            if (opt.storage.messages[i].reactions.data.hasOwnProperty(reaction.reaction)) {\n              opt.storage.messages[i].reactions.data[reaction.reaction].push(reaction);\n            } else {\n              opt.storage.messages[i].reactions.data[reaction.reaction] = [reaction];\n              opt.storage.messages[i].reactions.meta.total_unique = Object.keys(opt.storage.messages[i].reactions.data).length;\n            }\n            opt.storage.messages[i].reactions.meta.total = opt.storage.messages[i].reactions.meta.total + 1;\n          } else {\n            opt.storage.messages[i].reacted = true;\n            opt.storage.messages[i].reactions = {\n              data: {},\n              meta: {\n                total: 1,\n                total_unique: 1\n              }\n            };\n            opt.storage.messages[i].reactions.data[reaction.reaction] = [reaction];\n          }\n          methods.drawReactions(opt.storage.messages[i]);\n        }\n      },\n      updateRemoveReaction: function updateRemoveReaction(reaction) {\n        var messageStorage = methods.locateStorageItem({\n            type: 'message',\n            id: reaction.message_id\n          }),\n          i = messageStorage.index;\n        if (messageStorage.found && opt.storage.messages[i].hasOwnProperty('reactions')) {\n          if (opt.storage.messages[i].reactions.data.hasOwnProperty(reaction.reaction)) {\n            for (var y = 0; y < opt.storage.messages[i].reactions.data[reaction.reaction].length; y++) {\n              if (opt.storage.messages[i].reactions.data[reaction.reaction][y].id === reaction.id) {\n                opt.storage.messages[i].reactions.data[reaction.reaction].splice(y, 1);\n                break;\n              }\n            }\n            if (!opt.storage.messages[i].reactions.data[reaction.reaction].length) {\n              delete opt.storage.messages[i].reactions.data[reaction.reaction];\n            }\n            var unique = Object.keys(opt.storage.messages[i].reactions.data).length;\n            if (!unique) {\n              delete opt.storage.messages[i].reactions;\n              opt.storage.messages[i].reacted = false;\n            } else {\n              opt.storage.messages[i].reactions.meta.total_unique = unique;\n              opt.storage.messages[i].reactions.meta.total = opt.storage.messages[i].reactions.meta.total - 1;\n            }\n          }\n          methods.drawReactions(opt.storage.messages[i]);\n        }\n      },\n      drawReactions: function drawReactions(message) {\n        var msg = $(\"#message_\" + message.id);\n        if (msg.length) {\n          msg.find('.reactions').html(ThreadTemplates.render().message_reactions(message, msg.hasClass('my-message'), msg.hasClass('grouped-message')));\n          methods.threadScrollBottom(false, false);\n          PageListeners.listen().tooltips();\n        }\n      }\n    },\n    _archive = {\n      Message: function Message(arg) {\n        if (!opt.thread.id) return;\n        var msg = $(\"#message_\" + arg.id);\n        msg.find('.message-body').addClass('shadow-warning');\n        Messenger.alert().Modal({\n          size: 'sm',\n          body: false,\n          centered: true,\n          unlock_buttons: false,\n          title: 'Delete message?',\n          theme: 'danger',\n          cb_btn_txt: 'Delete',\n          cb_btn_theme: 'danger',\n          cb_btn_icon: 'trash',\n          icon: 'trash',\n          cb_close: true,\n          callback: function callback() {\n            Messenger.xhr().payload({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages/' + arg.id,\n              data: {},\n              success: function success() {\n                Messenger.alert().Alert({\n                  title: 'Message Removed',\n                  toast: true,\n                  theme: 'warning'\n                });\n                methods.purgeMessage(arg.id);\n                msg.remove();\n              },\n              fail_alert: true\n            }, 'delete');\n          },\n          onClosed: function onClosed() {\n            msg.find('.message-body').removeClass('shadow-warning');\n          }\n        });\n      },\n      Thread: function Thread() {\n        if (!opt.thread.id) return;\n        Messenger.alert().Modal({\n          theme: 'danger',\n          icon: 'trash',\n          backdrop_ctrl: false,\n          pre_loader: true,\n          title: 'Checking delete...',\n          cb_btn_txt: 'Delete',\n          cb_btn_icon: 'trash',\n          cb_btn_theme: 'danger',\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/check-archive',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  body: ThreadTemplates.render().archive_thread_warning(data),\n                  title: ' Delete Conversation?'\n                });\n              },\n              fail: Messenger.alert().destroyModal,\n              bypass: true,\n              fail_alert: true\n            });\n          },\n          callback: _archive.postArchiveThread\n        });\n      },\n      postArchiveThread: function postArchiveThread() {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id,\n          shared: {\n            thread_id: opt.thread.id,\n            name: opt.thread.name,\n            type: opt.thread.type\n          },\n          data: {},\n          success: function success(data) {\n            LoadIn.closeOpened(true);\n            var msg = \"You removed the conversation between you and \" + data.name;\n            if (data.type === 2) {\n              msg = \"You removed the group conversation \" + data.name;\n            }\n            Messenger.alert().Alert({\n              title: msg,\n              theme: 'success',\n              toast: true\n            });\n          },\n          fail_alert: true,\n          close_modal: true\n        }, 'delete');\n      }\n    },\n    groups = {\n      viewParticipants: function viewParticipants(reload) {\n        var gather = function gather() {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants',\n            success: function success(data) {\n              Messenger.alert().fillModal({\n                body: ThreadTemplates.render().group_participants(data.data, opt.thread.admin, opt.thread.lockout),\n                title: opt.thread.name + ' Participants'\n              });\n              methods.loadDataTable($(\"#view_group_participants\"));\n            },\n            fail_alert: true\n          });\n        };\n        if (reload) return gather();\n        var modal = {\n          icon: 'users',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Loading Participants...',\n          pre_loader: true,\n          overflow: true,\n          unlock_buttons: false,\n          h4: false,\n          size: 'lg',\n          onReady: gather\n        };\n        if (!opt.thread.lockout && opt.thread._thread.options.add_participants) {\n          modal.cb_btn_txt = 'Add Participants';\n          modal.cb_btn_icon = 'user-plus';\n          modal.cb_btn_theme = 'success';\n          modal.callback = groups.addParticipants;\n        }\n        Messenger.alert().Modal(modal);\n      },\n      viewInviteGenerator: function viewInviteGenerator() {\n        Messenger.alert().Modal({\n          backdrop_ctrl: false,\n          icon: 'link',\n          theme: 'dark',\n          title: 'Loading Invite...',\n          pre_loader: true,\n          overflow: true,\n          unlock_buttons: false,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/invites',\n              success: groups.manageInviteGenPage,\n              fail_alert: true\n            });\n          }\n        });\n      },\n      manageInviteGenPage: function manageInviteGenPage(data) {\n        var generate_click = function generate_click() {\n            $(\"#grp_inv_generate_btn\").click(groups.generateInviteLink);\n          },\n          name = CallManager.state().initialized ? CallManager.state().thread_name : opt.thread.name;\n        if (data.data.length) {\n          Messenger.alert().fillModal({\n            body: ThreadTemplates.render().thread_show_invite(data.data),\n            title: name + ' Invite Generator'\n          });\n          var btn_switch = $(\"#grp_inv_switch_generate_btn\");\n          btn_switch.click(function () {\n            Messenger.alert().fillModal({\n              body: ThreadTemplates.render().thread_generate_invite(true)\n            });\n            generate_click();\n            $(\"#grp_inv_back_btn\").click(function () {\n              groups.manageInviteGenPage(data);\n            });\n          });\n        } else {\n          Messenger.alert().fillModal({\n            body: ThreadTemplates.render().thread_generate_invite(false),\n            title: name + ' Invite Generator'\n          });\n          generate_click();\n        }\n      },\n      generateInviteLink: function generateInviteLink() {\n        var expire = parseInt($(\"#grp_inv_expires\").val()),\n          uses = parseInt($(\"#grp_inv_uses\").val()),\n          thread = CallManager.state().initialized ? CallManager.state().thread_id : opt.thread.id,\n          expires_at = null;\n        switch (expire) {\n          case 1:\n            expires_at = dayjs().utc().add(30, 'minute').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 2:\n            expires_at = dayjs().utc().add(1, 'hour').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 3:\n            expires_at = dayjs().utc().add(6, 'hour').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 4:\n            expires_at = dayjs().utc().add(12, 'hour').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 5:\n            expires_at = dayjs().utc().add(1, 'day').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 6:\n            expires_at = dayjs().utc().add(1, 'week').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 7:\n            expires_at = dayjs().utc().add(2, 'week').format('YYYY-MM-DD HH:mm:ss');\n            break;\n          case 8:\n            expires_at = dayjs().utc().add(1, 'month').format('YYYY-MM-DD HH:mm:ss');\n            break;\n        }\n        Messenger.alert().fillModal({\n          loader: true,\n          body: null,\n          title: 'Generating...'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + thread + '/invites',\n          data: {\n            expires: expires_at,\n            uses: uses\n          },\n          success: groups.viewInviteGenerator,\n          fail: groups.viewInviteGenerator,\n          bypass: true,\n          fail_alert: true\n        });\n      },\n      removeInviteLink: function removeInviteLink(id) {\n        var thread = CallManager.state().initialized ? CallManager.state().thread_id : opt.thread.id;\n        Messenger.button().addLoader({\n          id: '#inv_remove_btn_' + id\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + thread + '/invites/' + id,\n          data: {},\n          success: groups.viewInviteGenerator,\n          fail: groups.viewInviteGenerator,\n          bypass: true,\n          fail_alert: true\n        }, 'delete');\n      },\n      addParticipants: function addParticipants() {\n        var thread = CallManager.state().initialized ? CallManager.state().thread_id : opt.thread.id,\n          name = CallManager.state().initialized ? CallManager.state().thread_name : opt.thread.name;\n        Messenger.alert().Modal({\n          icon: 'user-plus',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Loading friends...',\n          pre_loader: true,\n          cb_btn_txt: 'Add participants',\n          cb_btn_icon: 'plus-square',\n          cb_btn_theme: 'success',\n          overflow: true,\n          h4: false,\n          size: 'lg',\n          unlock_buttons: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + thread + '/add-participants',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  body: ThreadTemplates.render().group_add_participants(data),\n                  title: 'Add friends to ' + name\n                });\n                methods.loadDataTable($(\"#add_group_participants\"));\n              },\n              fail_alert: true\n            });\n          },\n          callback: function callback() {\n            var providers = [];\n            if (opt.elements.data_table) {\n              opt.elements.data_table.$('input[type=\"checkbox\"]:checked').map(function (key, value) {\n                providers.push({\n                  alias: value.dataset.providerAlias,\n                  id: value.dataset.providerId\n                });\n              });\n            }\n            Messenger.xhr().payload({\n              route: Messenger.common().API + 'threads/' + thread + '/participants',\n              data: {\n                providers: providers.length ? providers : null\n              },\n              success: function success(data) {\n                if (data.length) {\n                  Messenger.alert().Alert({\n                    title: 'Participants added!',\n                    toast: true\n                  });\n                } else {\n                  Messenger.alert().Alert({\n                    title: 'No valid participants found to add.',\n                    theme: 'error',\n                    toast: true\n                  });\n                }\n              },\n              fail_alert: true,\n              close_modal: true\n            });\n          }\n        });\n      },\n      viewSettings: function viewSettings() {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.alert().Modal({\n          icon: 'cog',\n          theme: 'dark',\n          title: 'Loading Settings...',\n          pre_loader: true,\n          h4: false,\n          backdrop_ctrl: false,\n          unlock_buttons: false,\n          cb_btn_txt: 'Save Settings',\n          cb_btn_icon: 'save',\n          cb_btn_theme: 'success',\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/settings',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: opt.thread.name + ' Settings',\n                  body: ThreadTemplates.render().group_settings(data)\n                });\n                PageListeners.listen().tooltips();\n                $(\".m_setting_toggle\").change(function () {\n                  $(this).is(':checked') ? $(this).closest('tr').addClass('alert-success') : $(this).closest('tr').removeClass('alert-success');\n                });\n              },\n              fail_alert: true\n            });\n          },\n          callback: groups.saveSettings\n        });\n      },\n      saveSettings: function saveSettings() {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/settings',\n          data: {\n            subject: $('#g_s_group_subject').val(),\n            add_participants: $(\"#g_s_add_participants\").is(\":checked\"),\n            invitations: $(\"#g_s_invitations\").is(\":checked\"),\n            calling: $(\"#g_s_admin_call\").is(\":checked\"),\n            messaging: $(\"#g_s_send_message\").is(\":checked\"),\n            knocks: $(\"#g_s_knocks\").is(\":checked\"),\n            chat_bots: $(\"#g_s_bots\").is(\":checked\")\n          },\n          success: function success(data) {\n            Messenger.alert().Alert({\n              title: 'You updated ' + data.name + '\\'s Settings.',\n              toast: true\n            });\n          },\n          fail_alert: true,\n          close_modal: true\n        }, 'put');\n      },\n      removeGroupAvatar: function removeGroupAvatar() {\n        Messenger.alert().fillModal({\n          loader: true,\n          no_close: true,\n          body: null,\n          title: 'Uploading...'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/avatar',\n          data: {},\n          success: function success(data) {\n            Messenger.alert().Alert({\n              title: 'You removed ' + data.name + '\\'s avatar.',\n              toast: true\n            });\n          },\n          close_modal: true,\n          fail_alert: true\n        }, 'delete');\n      },\n      removeParticipant: function removeParticipant(x) {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants/' + x,\n          data: {},\n          success: function success(data) {\n            Messenger.alert().Alert({\n              title: \"Participant removed\",\n              toast: true,\n              theme: 'success'\n            });\n            opt.elements.data_table.row($('#row_' + x)).remove().draw(false);\n          },\n          fail_alert: true\n        }, 'delete');\n      },\n      promoteAdmin: function promoteAdmin(participant) {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.alert().fillModal({\n          loader: true\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants/' + participant + '/promote',\n          data: {},\n          success: function success(data) {\n            groups.viewParticipants(true);\n          },\n          fail_alert: true\n        });\n      },\n      demoteAdmin: function demoteAdmin(participant) {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.alert().fillModal({\n          loader: true\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants/' + participant + '/demote',\n          data: {},\n          success: function success(data) {\n            groups.viewParticipants(true);\n          },\n          fail_alert: true\n        });\n      },\n      participantPermissionsView: function participantPermissionsView(participant_id) {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.alert().Modal({\n          icon: 'user-cog',\n          theme: 'dark',\n          title: 'Loading Permissions...',\n          pre_loader: true,\n          h4: false,\n          backdrop_ctrl: false,\n          unlock_buttons: false,\n          cb_btn_txt: 'Save Permissions',\n          cb_btn_icon: 'save',\n          cb_btn_theme: 'success',\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants/' + participant_id,\n              success: function success(participant) {\n                Messenger.alert().fillModal({\n                  title: participant.owner.name + ' Permissions',\n                  body: ThreadTemplates.render().participant_permissions(participant)\n                });\n                PageListeners.listen().tooltips();\n                $(\".m_setting_toggle\").change(function () {\n                  $(this).is(':checked') ? $(this).closest('tr').addClass('bg-light') : $(this).closest('tr').removeClass('bg-light');\n                });\n              },\n              fail_alert: true\n            });\n          },\n          callback: function callback() {\n            groups.participantPermissionSave(participant_id);\n          }\n        });\n      },\n      participantPermissionSave: function participantPermissionSave(participant_id) {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants/' + participant_id,\n          data: {\n            add_participants: $(\"#p_add_participants\").is(\":checked\"),\n            manage_invites: $(\"#p_manage_invites\").is(\":checked\"),\n            send_messages: $(\"#p_send_messages\").is(\":checked\"),\n            send_knocks: $(\"#p_send_knocks\").is(\":checked\"),\n            start_calls: $(\"#p_start_calls\").is(\":checked\"),\n            manage_bots: $(\"#p_manage_bots\").is(\":checked\")\n          },\n          success: function success(participant) {\n            Messenger.alert().Alert({\n              title: 'You updated ' + participant.owner.name + '\\'s permissions.',\n              toast: true\n            });\n          },\n          fail_alert: true,\n          close_modal: true\n        }, 'put');\n      },\n      leaveGroup: function leaveGroup() {\n        Messenger.alert().Modal({\n          icon: 'sign-out-alt',\n          backdrop_ctrl: false,\n          centered: true,\n          size: 'sm',\n          h4: false,\n          theme: 'danger',\n          title: 'Leave Group?',\n          body: '<span class=\"h5 font-weight-bold\">Are you sure you want to leave ' + opt.thread.name + '?</span>',\n          cb_btn_txt: 'Leave',\n          cb_btn_icon: 'sign-out-alt',\n          cb_btn_theme: 'danger',\n          callback: function callback() {\n            Messenger.xhr().payload({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/leave',\n              shared: {\n                thread_id: opt.thread.id,\n                name: opt.thread.name\n              },\n              data: {},\n              success: function success(data) {\n                LoadIn.closeOpened();\n                methods.removeThread(data.thread_id);\n                Messenger.alert().Alert({\n                  title: \"You left \" + data.name,\n                  toast: true,\n                  theme: 'success'\n                });\n              },\n              fail_alert: true,\n              close_modal: true\n            });\n          }\n        });\n      }\n    },\n    new_forms = {\n      newGroup: function newGroup() {\n        var subject = $(\"#subject\").val(),\n          providers = [];\n        if (opt.states.lock || !subject.trim().length) return;\n        opt.states.lock = true;\n        opt.elements.message_container.html(ThreadTemplates.render().loading_thread_base());\n        if (opt.elements.data_table) {\n          opt.elements.data_table.$('input[type=\"checkbox\"]:checked').map(function (key, value) {\n            providers.push({\n              alias: value.dataset.providerAlias,\n              id: value.dataset.providerId\n            });\n          });\n        }\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'groups',\n          data: {\n            providers: providers.length ? providers : null,\n            subject: subject\n          },\n          success: function success(x) {\n            mounted.reset(true);\n            methods.initiateGroup({\n              \"new\": true\n            }, x, false);\n          },\n          fail: LoadIn.closeOpened,\n          fail_alert: true,\n          bypass: true\n        });\n      },\n      newPrivate: function newPrivate(isFile, voiceMessage, audio) {\n        if (opt.states.lock) return;\n        var form = new FormData(),\n          message_contents = opt.elements.message_text_input.val();\n        if (isFile === true) {\n          var file = opt.elements.doc_file[0].files[0];\n          var type = methods.sendUploadFiles(file, true);\n          form.append(type, file);\n        } else if (voiceMessage === true) {\n          form.append('audio', audio, 'audio_message.webm');\n          form.append('extra', JSON.stringify({\n            audio_message: true\n          }));\n        } else {\n          if (!message_contents.trim().length) return;\n          form.append('message', message_contents);\n          opt.elements.message_text_input.val('').focus();\n        }\n        form.append('recipient_id', opt.storage.temp_data.provider_id);\n        form.append('recipient_alias', opt.storage.temp_data.provider_alias);\n        opt.states.lock = true;\n        opt.elements.message_container.html(ThreadTemplates.render().loading_thread_base());\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'privates',\n          data: form,\n          success: function success(x) {\n            mounted.reset(true);\n            methods.initiatePrivate({\n              \"new\": true\n            }, x, false);\n          },\n          fail: LoadIn.closeOpened,\n          fail_alert: true,\n          bypass: true\n        });\n      },\n      threadApproval: function threadApproval(approve) {\n        if (opt.states.lock || !opt.thread.id) return;\n        opt.states.lock = true;\n        Messenger.button().addLoader({\n          id: approve ? '#thread_approval_accept_btn' : '#thread_approval_deny_btn'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/approval',\n          data: {\n            approve: approve\n          },\n          success: function success(x) {\n            Messenger.alert().Alert({\n              title: \"You \" + (approve ? 'approved' : 'denied') + ' the message request from ' + opt.thread.name,\n              toast: true,\n              theme: approve ? 'success' : 'error'\n            });\n            if (approve) {\n              LoadIn.initiate_thread({\n                thread_id: opt.thread.id,\n                force: true\n              });\n            } else {\n              methods.removeThread(opt.thread.id);\n              LoadIn.closeOpened();\n            }\n          },\n          fail_alert: true,\n          bypass: true\n        });\n      }\n    },\n    Calls = {\n      showCreateModal: function showCreateModal() {\n        Messenger.alert().Modal({\n          size: 'sm',\n          icon: 'user-plus',\n          pre_loader: true,\n          centered: true,\n          unlock_buttons: false,\n          allow_close: false,\n          backdrop_ctrl: false,\n          title: 'Creating Call',\n          theme: 'success'\n        });\n      },\n      initCall: function initCall() {\n        if (opt.states.lock) return;\n        opt.states.lock = true;\n        Messenger.button().addLoader({\n          id: '.video_btn'\n        });\n        Calls.showCreateModal(false);\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/calls',\n          data: {},\n          success: function success(data) {\n            CallManager.join(data);\n            NotifyManager.heartbeat();\n            Messenger.button().removeLoader();\n          },\n          close_modal: true,\n          fail_alert: true\n        });\n      },\n      sendKnock: function sendKnock() {\n        if (opt.states.lock || !NotifyManager.sockets().status) return;\n        Messenger.button().addLoader({\n          id: '#knok_btn'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/knock-knock',\n          data: {},\n          success: function success(data) {\n            NotifyManager.sound('knok');\n            Messenger.alert().Alert({\n              close: true,\n              title: 'Knock Knock!',\n              body: \"You sent a knock to \" + opt.thread.name + \"!\",\n              toast: true\n            });\n          },\n          fail_alert: true\n        });\n      }\n    },\n    Mute = {\n      mute: function mute() {\n        var payload = function payload() {\n          Messenger.xhr().payload({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/mute',\n            data: {},\n            success: function success() {\n              Messenger.alert().Alert({\n                close: true,\n                title: \"You muted \" + opt.thread.name,\n                toast: true\n              });\n              LoadIn.initiate_thread({\n                thread_id: opt.thread.id,\n                force: true\n              });\n            },\n            fail_alert: true,\n            close_modal: true\n          });\n        };\n        Messenger.alert().Modal({\n          icon: 'volume-mute',\n          size: 'md',\n          backdrop_ctrl: false,\n          h4: false,\n          theme: 'primary',\n          title: 'Mute?',\n          body: '<span class=\"h5 font-weight-bold\">Really mute ' + opt.thread.name + '? You will no longer receive any alerts or notifications from that conversation.</span>',\n          cb_btn_txt: 'Mute',\n          cb_btn_icon: 'volume-mute',\n          cb_btn_theme: 'primary',\n          callback: payload\n        });\n      },\n      unmute: function unmute() {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/unmute',\n          data: {},\n          success: function success() {\n            Messenger.alert().Alert({\n              close: true,\n              title: \"You un-muted \" + opt.thread.name,\n              toast: true\n            });\n            LoadIn.initiate_thread({\n              thread_id: opt.thread.id,\n              force: true\n            });\n          },\n          fail_alert: true\n        });\n      }\n    },\n    LoadIn = {\n      closeOpened: function closeOpened(force) {\n        if (opt.states.lock && !force) return;\n        if (Messenger.common().mobile) ThreadTemplates.mobile(false);\n        mounted.reset(false);\n        mounted.Initialize({\n          type: 5\n        });\n        window.history.pushState({\n          type: 5\n        }, null, Messenger.common().WEB);\n      },\n      messageEdits: function messageEdits(route) {\n        if (!opt.thread.id) return;\n        Messenger.alert().Modal({\n          size: 'md',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'edit',\n          title: 'Loading Edit History...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: route,\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: 'Message Edit History',\n                  body: ThreadTemplates.render().message_edit_history(data)\n                });\n              }\n            });\n          }\n        });\n      },\n      threads: function threads() {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads',\n          success: function success(data) {\n            opt.storage.threads = data.data;\n            if (opt.elements.thread_area.length) {\n              if (!opt.storage.threads.length) {\n                methods.checkShowThreadSearch();\n                opt.elements.thread_area.html('<h4 id=\"no_message_warning\" class=\"text-center mt-4\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-comments\"></i> No conversations</span></h4>');\n                return;\n              }\n              methods.drawThreads();\n            }\n            methods.calcUnreadThreads();\n          },\n          fail: function fail() {\n            if (opt.states.load_in_retries >= 6) {\n              Messenger.alert().Alert({\n                theme: 'error',\n                title: 'We could not load in your threads. Please try refreshing your browser page',\n                toast: true\n              });\n              return;\n            }\n            opt.states.load_in_retries++;\n            LoadIn.threads();\n          }\n        });\n      },\n      threadLogs: function threadLogs(paginate, page) {\n        if (!opt.thread.id) return;\n        if (paginate) {\n          $(\"#log_paginate_btn\").html(Messenger.alert().loader(true));\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/logs/page/' + page,\n            success: function success(data) {\n              $(\"#log_paginate_btn\").remove();\n              $(\"#body_modal\").append(ThreadTemplates.render().thread_logs(data));\n            }\n          });\n          return;\n        }\n        Messenger.alert().Modal({\n          size: 'lg',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'database',\n          title: 'Loading Logs...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/logs',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: opt.thread.name + ' Logs',\n                  body: data.data.length ? ThreadTemplates.render().thread_logs(data) : '<h3 class=\"text-center mt-2\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-database\"></i> No logs</span></h3>'\n                });\n              }\n            });\n          }\n        });\n      },\n      threadImages: function threadImages(paginate, page) {\n        if (!opt.thread.id) return;\n        if (paginate) {\n          $(\"#image_paginate_btn\").html(Messenger.alert().loader(true));\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/images/page/' + page,\n            success: function success(data) {\n              $(\"#image_paginate_btn\").remove();\n              $(\"#body_modal\").append(ThreadTemplates.render().thread_images(data));\n              LazyImages.update();\n            }\n          });\n          return;\n        }\n        Messenger.alert().Modal({\n          size: 'fullscreen',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          icon: 'images',\n          title: 'Loading Images...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/images',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: opt.thread.name + ' Shared Images',\n                  body: data.data.length ? ThreadTemplates.render().thread_images(data) : '<h3 class=\"text-center mt-2\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-images\"></i> No Images</span></h3>'\n                });\n                LazyImages.update();\n              }\n            });\n          }\n        });\n      },\n      threadDocuments: function threadDocuments(paginate, page) {\n        if (!opt.thread.id) return;\n        if (paginate) {\n          $(\"#document_paginate_btn\").html(Messenger.alert().loader(true));\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/documents/page/' + page,\n            success: function success(data) {\n              $(\"#document_paginate_btn\").remove();\n              $(\"#documents_history\").append(ThreadTemplates.render().thread_documents(false, data));\n            }\n          });\n          return;\n        }\n        Messenger.alert().Modal({\n          size: 'lg',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'file-alt',\n          title: 'Loading Documents...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/documents',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: opt.thread.name + ' Shared Documents',\n                  body: data.data.length ? ThreadTemplates.render().thread_documents(true, data) : '<h3 class=\"text-center mt-2\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-file-alt\"></i> No Documents</span></h3>'\n                });\n              }\n            });\n          }\n        });\n      },\n      messageReactions: function messageReactions(messageId) {\n        if (!opt.thread.id) return;\n        Messenger.alert().Modal({\n          size: 'md',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'grin-tongue',\n          title: 'Loading Reactions...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/messages/' + messageId + '/reactions',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: 'Message Reactions',\n                  body: ThreadTemplates.render().show_message_reactions(data)\n                });\n              }\n            });\n          }\n        });\n      },\n      threadAudio: function threadAudio(paginate, page) {\n        if (!opt.thread.id) return;\n        if (paginate) {\n          $(\"#audio_paginate_btn\").html(Messenger.alert().loader(true));\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/audio/page/' + page,\n            success: function success(data) {\n              $(\"#audio_paginate_btn\").remove();\n              $(\"#audio_history\").append(ThreadTemplates.render().thread_audio(false, data));\n            }\n          });\n          return;\n        }\n        Messenger.alert().Modal({\n          size: 'lg',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'music',\n          title: 'Loading Audio...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/audio',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: opt.thread.name + ' Shared Audio',\n                  body: data.data.length ? ThreadTemplates.render().thread_audio(true, data) : '<h3 class=\"text-center mt-2\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-music\"></i> No Audio</span></h3>'\n                });\n              }\n            });\n          }\n        });\n      },\n      threadVideos: function threadVideos(paginate, page) {\n        if (!opt.thread.id) return;\n        if (paginate) {\n          $(\"#video_paginate_btn\").html(Messenger.alert().loader(true));\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/videos/page/' + page,\n            success: function success(data) {\n              $(\"#video_paginate_btn\").remove();\n              $(\"#video_history\").append(ThreadTemplates.render().thread_videos(false, data));\n            }\n          });\n          return;\n        }\n        Messenger.alert().Modal({\n          size: 'lg',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'video',\n          title: 'Loading Videos...',\n          pre_loader: true,\n          h4: false,\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'threads/' + opt.thread.id + '/videos',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: opt.thread.name + ' Shared Videos',\n                  body: data.data.length ? ThreadTemplates.render().thread_videos(true, data) : '<h3 class=\"text-center mt-2\"><span class=\"badge badge-pill badge-secondary\"><i class=\"fas fa-video\"></i> No Videos</span></h3>'\n                });\n              }\n            });\n          }\n        });\n      },\n      thread: function thread(thread_id, _success) {\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + thread_id,\n          success: function success(data) {\n            var thread = methods.locateStorageItem({\n              type: 'thread',\n              id: thread_id\n            });\n            if (!thread.found) {\n              opt.storage.threads.unshift(data);\n            } else {\n              opt.storage.threads.splice(thread.index, 1);\n              opt.storage.threads.unshift(data);\n            }\n            methods.addThread(data, true);\n            if (_success) _success(data);\n          },\n          fail_alert: true\n        });\n      },\n      bobbleHeads: function bobbleHeads() {\n        if (!opt.thread.id) return;\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/participants',\n          success: function success(data) {\n            opt.storage.participants = data.data;\n            $(\".bobble-head-item\").remove();\n            if (opt.storage.active_profiles.length) {\n              opt.storage.active_profiles.forEach(function (value) {\n                methods.updateBobbleHead(value.provider_id, null);\n              });\n            }\n            if (opt.thread.type === 1 && opt.storage.participants.length) {\n              for (var i = 0; i < opt.storage.participants.length; i++) {\n                if (!Messenger.isProvider(opt.storage.participants[i].owner_id, opt.storage.participants[i].owner_type)) {\n                  methods.threadOnlineStatus(opt.storage.participants[i].owner.options.online_status);\n                }\n              }\n            }\n            methods.drawBobbleHeads();\n          },\n          fail: null\n        });\n      },\n      search: function search(noHistory) {\n        if (!opt.INIT) return;\n        if (Messenger.common().mobile) ThreadTemplates.mobile(true);\n        opt.elements.message_container.html(ThreadTemplates.render().search_base());\n        mounted.reset(false);\n        mounted.Initialize({\n          type: 7\n        });\n        if (!noHistory) window.history.pushState({\n          type: 7\n        }, null, Messenger.common().WEB + '?search');\n      },\n      contacts: function contacts(noHistory) {\n        if (!opt.INIT) return;\n        if (Messenger.common().mobile) ThreadTemplates.mobile(true);\n        opt.elements.message_container.html(ThreadTemplates.render().contacts_base());\n        mounted.reset(false);\n        opt.thread.type = 6;\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'friends',\n          success: function success(data) {\n            $(\"#messenger_contacts_ctnr\").html(ThreadTemplates.render().contacts(data));\n            if (!noHistory) window.history.pushState({\n              type: 6\n            }, null, Messenger.common().WEB + '?contacts');\n            methods.loadDataTable($(\"#contact_list_table\"), true);\n          },\n          fail: LoadIn.closeOpened,\n          fail_alert: true,\n          bypass: true\n        });\n      },\n      createPrivate: function createPrivate(arg, noHistory) {\n        if (CallManager.state().initialized) {\n          window.open(Messenger.common().WEB + '/recipient/' + arg.alias + '/' + arg.id);\n          return;\n        }\n        opt.elements.message_container.html(ThreadTemplates.render().loading_thread_base());\n        mounted.reset(false);\n        if (Messenger.common().mobile) ThreadTemplates.mobile(true);\n        $(\".modal\").modal('hide');\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'privates/recipient/' + arg.alias + '/' + arg.id,\n          success: function success(data) {\n            if (data.thread_id) {\n              LoadIn.initiate_thread({\n                thread_id: data.thread_id\n              });\n              return;\n            }\n            opt.elements.message_container.html(ThreadTemplates.render().render_new_private(data.recipient));\n            if (!noHistory) window.history.pushState({\n              type: 3,\n              id: arg.id,\n              alias: arg.alias\n            }, null, Messenger.common().WEB + '/recipient/' + arg.alias + '/' + arg.id);\n            opt.thread.messaging = data.recipient.options.can_message_first;\n            mounted.Initialize({\n              type: 3,\n              thread_id: 'new',\n              t_name: data.recipient.name,\n              temp_data: data.recipient\n            });\n          },\n          fail: LoadIn.closeOpened,\n          fail_alert: true,\n          bypass: true\n        });\n      },\n      createGroup: function createGroup(noHistory) {\n        if (opt.states.lock) return;\n        mounted.reset(false);\n        opt.elements.message_container.html(ThreadTemplates.render().new_group_base());\n        if (!noHistory) window.history.pushState({\n          type: 4\n        }, null, Messenger.common().WEB + '?newGroup');\n        if (Messenger.common().mobile) ThreadTemplates.mobile(true);\n        mounted.Initialize({\n          type: 4\n        });\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'friends',\n          success: function success(data) {\n            if (opt.thread.type === 4) {\n              $(\"#messages_container_new_group\").html(ThreadTemplates.render().new_group_friends(data));\n              methods.loadDataTable($(\"#add_group_participants\"), true);\n            }\n          },\n          fail_alert: true\n        });\n      },\n      initiate_thread: function initiate_thread(arg, noHistory) {\n        if (opt.states.lock || arg.thread_id === opt.thread.id && !(\"force\" in arg)) return;\n        if (Messenger.common().mobile) ThreadTemplates.mobile(true);\n        opt.elements.message_container.html(ThreadTemplates.render().loading_thread_base());\n        mounted.reset(true);\n        opt.thread.initializing = true;\n        opt.thread._id = arg.thread_id;\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + arg.thread_id + '/load',\n          success: function success(data) {\n            data.group ? methods.initiateGroup(arg, data, noHistory) : methods.initiatePrivate(arg, data, noHistory);\n          },\n          fail: LoadIn.closeOpened,\n          bypass: true,\n          fail_alert: true\n        });\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    Import: function Import() {\n      return Imports;\n    },\n    newForms: function newForms() {\n      return new_forms;\n    },\n    calls: function calls() {\n      return Calls;\n    },\n    send: methods.sendMessage,\n    archive: function archive() {\n      return _archive;\n    },\n    editMessage: methods.editMessage,\n    reply: methods.replyToMessage,\n    addNewReaction: methods.addNewReaction,\n    removeReaction: methods.removeReaction,\n    mute: function mute() {\n      return Mute;\n    },\n    group: function group() {\n      return groups;\n    },\n    load: function load() {\n      return LoadIn;\n    },\n    switchToggle: mounted.switchToggleListener,\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.states.lock = arg;\n    },\n    state: function state() {\n      return {\n        thread_id: opt.thread.id,\n        thread_lockout: opt.thread.lockout,\n        type: opt.thread.type,\n        thread_admin: opt.thread.admin,\n        t_name: opt.thread.name,\n        _thread: opt.thread._thread,\n        online_status: opt.socket.online_status_setting,\n        socketStatusCheck: Health.checkConnection,\n        reConnected: Health.reConnected,\n        online: function online(state) {\n          methods.statusOnline(state, true);\n        },\n        statusSetting: methods.updateOnlineStatusSetting\n      };\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi92ZW5kb3IvcnRpcHBpbi9tZXNzZW5nZXItdWkvcmVzb3VyY2VzL2pzL21hbmFnZXJzL1RocmVhZE1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBQSxNQUFNLENBQUNDLGFBQWEsR0FBSSxZQUFZO0VBQ2hDLElBQUlDLEdBQUcsR0FBRztNQUNOQyxJQUFJLEVBQUcsS0FBSztNQUNaQyxZQUFZLEVBQUcsSUFBSTtNQUNuQkMsS0FBSyxFQUFHLElBQUk7TUFDWkMsR0FBRyxFQUFHQyxTQUFTLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNGLEdBQUc7TUFDNUJHLE1BQU0sRUFBRztRQUNMQyxFQUFFLEVBQUcsSUFBSTtRQUNUQyxJQUFJLEVBQUcsSUFBSTtRQUNYQyxJQUFJLEVBQUcsSUFBSTtRQUNYQyxLQUFLLEVBQUcsS0FBSztRQUNiQyxPQUFPLEVBQUcsS0FBSztRQUNmQyxLQUFLLEVBQUcsS0FBSztRQUNiQyxRQUFRLEVBQUcsS0FBSztRQUNoQkMsV0FBVyxFQUFHLElBQUk7UUFDbEJDLG9CQUFvQixFQUFHLEtBQUs7UUFDNUJDLFVBQVUsRUFBRyxJQUFJO1FBQ2pCQyxlQUFlLEVBQUcsS0FBSztRQUN2QkMsYUFBYSxFQUFHLEtBQUs7UUFDckJDLFNBQVMsRUFBRyxJQUFJO1FBQ2hCQyxRQUFRLEVBQUcsSUFBSTtRQUNmQyxPQUFPLEVBQUcsS0FBSztRQUNmQyxjQUFjLEVBQUcsSUFBSTtRQUNyQkMsVUFBVSxFQUFHLElBQUk7UUFDakJDLGFBQWEsRUFBRyxJQUFJO1FBQ3BCQyxlQUFlLEVBQUcsS0FBSztRQUN2QkMsWUFBWSxFQUFHLEtBQUs7UUFDcEJDLEdBQUcsRUFBRyxJQUFJO1FBQ1ZDLE9BQU8sRUFBRztNQUNkLENBQUM7TUFDREMsTUFBTSxFQUFHO1FBQ0xDLElBQUksRUFBRyxJQUFJO1FBQ1hDLGVBQWUsRUFBRyxDQUFDO1FBQ25CQyxxQkFBcUIsRUFBRyxDQUFDO1FBQ3pCQyxlQUFlLEVBQUcsS0FBSztRQUN2QkMsb0JBQW9CLEVB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LEVBQUM7VUFDcEJqQixPQUFPLENBQUNnUCxZQUFZLENBQUMvTixLQUFLLEVBQUUsSUFBSSxDQUFDO1FBQ3JDLENBQUM7UUFDRGtoQixhQUFhLEVBQUduaUIsT0FBTyxDQUFDa1A7TUFDNUIsQ0FBQztJQUNMO0VBQ0osQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdmVuZG9yL3J0aXBwaW4vbWVzc2VuZ2VyLXVpL3Jlc291cmNlcy9qcy9tYW5hZ2Vycy9UaHJlYWRNYW5hZ2VyLmpzPzkyNjYiXSwic291cmNlc0NvbnRlbnQiOlsid2luZG93LlRocmVhZE1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHQgPSB7XG4gICAgICAgIElOSVQgOiBmYWxzZSxcbiAgICAgICAgT1JJR0lOQUxfQVJHIDogbnVsbCxcbiAgICAgICAgU0VUVVAgOiB0cnVlLFxuICAgICAgICBBUEkgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJLFxuICAgICAgICB0aHJlYWQgOiB7XG4gICAgICAgICAgICBpZCA6IG51bGwsXG4gICAgICAgICAgICB0eXBlIDogbnVsbCxcbiAgICAgICAgICAgIG5hbWUgOiBudWxsLFxuICAgICAgICAgICAgYWRtaW4gOiBmYWxzZSxcbiAgICAgICAgICAgIHBlbmRpbmcgOiBmYWxzZSxcbiAgICAgICAgICAgIG11dGVkIDogZmFsc2UsXG4gICAgICAgICAgICByZXBseWluZyA6IGZhbHNlLFxuICAgICAgICAgICAgcmVwbHlfdG9faWQgOiBudWxsLFxuICAgICAgICAgICAgYXdhaXRpbmdfbXlfYXBwcm92YWwgOiBmYWxzZSxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQgOiBudWxsLFxuICAgICAgICAgICAgbWVzc2FnZXNfdW5yZWFkIDogZmFsc2UsXG4gICAgICAgICAgICBjbGlja190b19yZWFkIDogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdpbmcgOiB0cnVlLFxuICAgICAgICAgICAgY2FuX2NhbGwgOiB0cnVlLFxuICAgICAgICAgICAgbG9ja291dCA6IGZhbHNlLFxuICAgICAgICAgICAgdGhyZWFkX2hpc3RvcnkgOiB0cnVlLFxuICAgICAgICAgICAgaGlzdG9yeV9pZCA6IG51bGwsXG4gICAgICAgICAgICBoaXN0b3J5X3JvdXRlIDogbnVsbCxcbiAgICAgICAgICAgIGhpc3RvcnlfbG9hZGluZyA6IGZhbHNlLFxuICAgICAgICAgICAgaW5pdGlhbGl6aW5nIDogZmFsc2UsXG4gICAgICAgICAgICBfaWQgOiBudWxsLFxuICAgICAgICAgICAgX3RocmVhZCA6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXRlcyA6IHtcbiAgICAgICAgICAgIGxvY2sgOiB0cnVlLFxuICAgICAgICAgICAgbG9hZF9pbl9yZXRyaWVzIDogMCxcbiAgICAgICAgICAgIHN0YXRlX2xvY2tvdXRfcmV0cmllcyA6IDAsXG4gICAgICAgICAgICB0aHJlYWRfZmlsdGVyZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIHRocmVhZF9maWx0ZXJfc2VhcmNoIDogbnVsbCxcbiAgICAgICAgICAgIG1lc3Nlbmdlcl9zZWFyY2hfdGVybSA6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgc29ja2V0IDoge1xuICAgICAgICAgICAgb25saW5lX3N0YXR1c19zZXR0aW5nIDogMSxcbiAgICAgICAgICAgIGNoYXQgOiBudWxsLFxuICAgICAgICAgICAgc29ja2V0X3JldHJpZXMgOiAwLFxuICAgICAgICAgICAgc2VuZF90eXBpbmcgOiAwLFxuICAgICAgICAgICAgaXNfYXdheSA6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0b3JhZ2UgOiB7XG4gICAgICAgICAgICBhY3RpdmVfcHJvZmlsZXMgOiBbXSxcbiAgICAgICAgICAgIHdob190eXBpbmcgOiBbXSxcbiAgICAgICAgICAgIGJvdF90eXBpbmcgOiBbXSxcbiAgICAgICAgICAgIHRocmVhZHMgOiBbXSxcbiAgICAgICAgICAgIG1lc3NhZ2VzIDogW10sXG4gICAgICAgICAgICBwYXJ0aWNpcGFudHMgOiBbXSxcbiAgICAgICAgICAgIHBlbmRpbmdfbWVzc2FnZXMgOiBbXSxcbiAgICAgICAgICAgIHRlbXBfZGF0YSA6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgdGltZXJzIDoge1xuICAgICAgICAgICAgbWFya19yZWFkX3RpbWVvdXQgOiBudWxsLFxuICAgICAgICAgICAgcmVjZW50X2JvYmJsZV90aW1lb3V0IDogbnVsbCxcbiAgICAgICAgICAgIHNvY2tldF9pbnRlcnZhbCA6IG51bGwsXG4gICAgICAgICAgICByZW1vdmVfdHlwaW5nX2ludGVydmFsIDogbnVsbCxcbiAgICAgICAgICAgIHByaXZhdGVfYm9iYmxlX3JlZnJlc2hfdGltZW91dCA6IG51bGwsXG4gICAgICAgICAgICBib2JibGVfcmVmcmVzaF9pbnRlcnZhbCA6IG51bGwsXG4gICAgICAgICAgICBkcmFnX2Ryb3Bfb3ZlcmxheV9oaWRlIDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBlbGVtZW50cyA6IHtcbiAgICAgICAgICAgIG5hdl9zZWFyY2hfbGluayA6ICQoXCIubmF2LXNlYXJjaC1saW5rXCIpLFxuICAgICAgICAgICAgbXlfYXZhdGFyX2FyZWEgOiAkKFwiI215X2F2YXRhcl9zdGF0dXNcIiksXG4gICAgICAgICAgICB0aHJlYWRfYXJlYSA6ICQoXCIjbWVzc2FnZXNfdWxcIiksXG4gICAgICAgICAgICBtZXNzYWdlX2NvbnRhaW5lciA6ICQoXCIjbWVzc2FnZV9jb250YWluZXJcIiksXG4gICAgICAgICAgICBtZXNzYWdlX3NpZGViYXJfY29udGFpbmVyIDogJChcIiNtZXNzYWdlX3NpZGViYXJfY29udGFpbmVyXCIpLFxuICAgICAgICAgICAgc29ja2V0X2Vycm9yX21zZyA6ICQoXCIjc29ja2V0X2Vycm9yXCIpLFxuICAgICAgICAgICAgdGhyZWFkX3NlYXJjaF9pbnB1dCA6ICQoXCIjdGhyZWFkX3NlYXJjaF9pbnB1dFwiKSxcbiAgICAgICAgICAgIHRocmVhZF9zZWFyY2hfYmFyIDogJChcIiN0aHJlYWRzX3NlYXJjaF9iYXJcIiksXG4gICAgICAgICAgICBkcmFnX2Ryb3Bfem9uZSA6ICQoJyNkcmFnX2Ryb3Bfb3ZlcmxheScpLFxuICAgICAgICAgICAgbWVzc2VuZ2VyX3NlYXJjaF9pbnB1dCA6IG51bGwsXG4gICAgICAgICAgICBtZXNzZW5nZXJfc2VhcmNoX3Jlc3VsdHMgOiBudWxsLFxuICAgICAgICAgICAgbXNnX3BhbmVsIDogbnVsbCxcbiAgICAgICAgICAgIGRvY19maWxlIDogbnVsbCxcbiAgICAgICAgICAgIGdyb3VwX2F2YXRhcl9maWxlIDogbnVsbCxcbiAgICAgICAgICAgIHJlY29yZF9hdWRpb19tZXNzYWdlX2J0biA6IG51bGwsXG4gICAgICAgICAgICBhZGRfZW1vamlfYnRuIDogbnVsbCxcbiAgICAgICAgICAgIGRhdGFfdGFibGUgOiBudWxsLFxuICAgICAgICAgICAgbWVzc2FnZV90ZXh0X2lucHV0IDogbnVsbCxcbiAgICAgICAgICAgIGZvcm0gOiBudWxsLFxuICAgICAgICAgICAgdGhlX3RocmVhZCA6IG51bGwsXG4gICAgICAgICAgICBtc2dfc3RhY2sgOiBudWxsLFxuICAgICAgICAgICAgcGVuZGluZ19tc2dfc3RhY2sgOiBudWxsLFxuICAgICAgICAgICAgbmV3X21zZ19hbGVydCA6IG51bGwsXG4gICAgICAgICAgICByZXBseV9tZXNzYWdlX2FsZXJ0IDogbnVsbCxcbiAgICAgICAgICAgIHNlZW5fYnlfZmluYWwgOiBudWxsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQgPSB7XG4gICAgICAgIEluaXRpYWxpemUgOiBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGlmKCFNZXNzZW5nZXIuY29tbW9uKCkubW9kdWxlcy5pbmNsdWRlcygnVGhyZWFkVGVtcGxhdGVzJykpe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBtb3VudGVkLkluaXRpYWxpemUoYXJnKVxuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5zdGF0ZXMubG9jayA9IGZhbHNlO1xuICAgICAgICAgICAgaWYoIW9wdC5PUklHSU5BTF9BUkcpe1xuICAgICAgICAgICAgICAgIG9wdC5PUklHSU5BTF9BUkcgPSBhcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihcIm9ubGluZV9zdGF0dXNfc2V0dGluZ1wiIGluIGFyZykgb3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgPSBhcmcub25saW5lX3N0YXR1c19zZXR0aW5nO1xuICAgICAgICAgICAgaWYoXCJtZXNzYWdpbmdcIiBpbiBhcmcpIG9wdC50aHJlYWQubWVzc2FnaW5nID0gYXJnLm1lc3NhZ2luZztcbiAgICAgICAgICAgIGlmKFwibG9ja291dFwiIGluIGFyZykgb3B0LnRocmVhZC5sb2Nrb3V0ID0gYXJnLmxvY2tvdXQ7XG4gICAgICAgICAgICBpZihcImFkbWluXCIgaW4gYXJnKSBvcHQudGhyZWFkLmFkbWluID0gYXJnLmFkbWluO1xuICAgICAgICAgICAgaWYoXCJhd2FpdGluZ19teV9hcHByb3ZhbFwiIGluIGFyZykgb3B0LnRocmVhZC5hd2FpdGluZ19teV9hcHByb3ZhbCA9IGFyZy5hd2FpdGluZ19teV9hcHByb3ZhbDtcbiAgICAgICAgICAgIGlmKFwicGVuZGluZ1wiIGluIGFyZykgb3B0LnRocmVhZC5wZW5kaW5nID0gYXJnLnBlbmRpbmc7XG4gICAgICAgICAgICBpZihcImNhbl9jYWxsXCIgaW4gYXJnKSBvcHQudGhyZWFkLmNhbl9jYWxsID0gYXJnLmNhbl9jYWxsO1xuICAgICAgICAgICAgaWYoXCJzZXR1cFwiIGluIGFyZyAmJiBcInRocmVhZF9pZFwiIGluIGFyZyAmJiBhcmcudHlwZSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgbW91bnRlZC5zZXR1cE9uY2UoKTtcbiAgICAgICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBhcmcudGhyZWFkX2lkfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoXCJzZXR1cFwiIGluIGFyZyAmJiBhcmcudHlwZSA9PT0gMyl7XG4gICAgICAgICAgICAgICAgbW91bnRlZC5zZXR1cE9uY2UoKTtcbiAgICAgICAgICAgICAgICBMb2FkSW4uY3JlYXRlUHJpdmF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlkIDogYXJnLmlkLFxuICAgICAgICAgICAgICAgICAgICBhbGlhcyA6IGFyZy5hbGlhc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5JTklUID0gdHJ1ZTtcbiAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkuZGlzcG9zZVRvb2x0aXBzKCk7XG4gICAgICAgICAgICBvcHQudGhyZWFkLnR5cGUgPSBhcmcudHlwZTtcbiAgICAgICAgICAgIGlmKFsxLDIsMyw0XS5pbmNsdWRlcyhhcmcudHlwZSkpe1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQgPSAkKFwiI21lc3NhZ2VfdGV4dF9pbnB1dFwiKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZm9ybSA9ICQoXCIjdGhyZWFkX2Zvcm1cIik7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm5ld19tc2dfYWxlcnQgPSAkKFwiI25ld19tZXNzYWdlX2FsZXJ0XCIpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZXBseV9tZXNzYWdlX2FsZXJ0ID0gJChcIiNyZXBseV9tZXNzYWdlX2FsZXJ0XCIpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfcGFuZWwgPSAkKFwiLmNoYXQtYm9keVwiKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZG9jX2ZpbGUgPSAkKFwiI2RvY19maWxlXCIpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5ncm91cF9hdmF0YXJfZmlsZSA9ICQoXCIjdGhyZWFkX2F2YXRhcl9pbWFnZV9maWxlXCIpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZWNvcmRfYXVkaW9fbWVzc2FnZV9idG4gPSAkKFwiI3JlY29yZF9hdWRpb19tZXNzYWdlX2J0blwiKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuYWRkX2Vtb2ppX2J0biA9ICQoXCIjYWRkX2Vtb2ppX2J0blwiKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuc2Vlbl9ieV9maW5hbCA9ICQoXCIjc2Vlbi1ieV9maW5hbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKFsxLDIsM10uaW5jbHVkZXMoYXJnLnR5cGUpKXtcbiAgICAgICAgICAgICAgICBpZihhcmcudHlwZSA9PT0gMykgb3B0LnN0b3JhZ2UudGVtcF9kYXRhID0gYXJnLnRlbXBfZGF0YTtcbiAgICAgICAgICAgICAgICBtb3VudGVkLnN0YXJ0V2F0Y2hkb2coKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoYXJnLnR5cGUgPT09IDQpIG1vdW50ZWQuc3RhcnRXYXRjaGRvZygpO1xuICAgICAgICAgICAgaWYoYXJnLnR5cGUgPT09IDUgJiYgIU1lc3Nlbmdlci5jb21tb24oKS5tb2JpbGUpIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5lbXB0eV9iYXNlKCkpO1xuICAgICAgICAgICAgaWYoYXJnLnR5cGUgPT09IDcpe1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfcGFuZWwgPSAkKFwiLmNoYXQtYm9keVwiKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2VuZ2VyX3NlYXJjaF9yZXN1bHRzID0gJChcIiNtZXNzZW5nZXJfc2VhcmNoX2NvbnRlbnRcIik7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfaW5wdXQgPSAkKFwiI21lc3Nlbmdlcl9zZWFyY2hfcHJvZmlsZXNcIik7XG4gICAgICAgICAgICAgICAgbW91bnRlZC5zdGFydFdhdGNoZG9nKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCd0aHJlYWRfaWQnIGluIGFyZyl7XG4gICAgICAgICAgICAgICAgb3B0LnRocmVhZC5pZCA9IGFyZy50aHJlYWRfaWQ7XG4gICAgICAgICAgICAgICAgb3B0LnRocmVhZC5uYW1lID0gYXJnLnRfbmFtZTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMudGhlX3RocmVhZCA9ICQoJyNtc2dfdGhyZWFkXycrYXJnLnRocmVhZF9pZCk7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19zdGFjayA9ICQoJyNtZXNzYWdlc19jb250YWluZXJfJythcmcudGhyZWFkX2lkKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMucGVuZGluZ19tc2dfc3RhY2sgPSAkKFwiI3BlbmRpbmdfbWVzc2FnZXNcIik7XG4gICAgICAgICAgICAgICAgb3B0LnRocmVhZC5pbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBvcHQudGhyZWFkLl9pZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYoYXJnLnR5cGUgIT09IDMpIG1ldGhvZHMuaW5pdGlhbGl6ZVJlY2VudE1lc3NhZ2VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBIZWFsdGguY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICBpZignc2V0dXAnIGluIGFyZykgbW91bnRlZC5zZXR1cE9uY2UoKTtcbiAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKVxuICAgICAgICB9LFxuICAgICAgICBzZXR1cE9uY2UgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoIW9wdC5TRVRVUCkgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlX2NvbnRhaW5lcicpO1xuICAgICAgICAgICAgTG9hZEluLnRocmVhZHMoKTtcbiAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYoIU5vdGlmeU1hbmFnZXIuc29ja2V0cygpLmZvcmNlZF9kaXNjb25uZWN0KSBMb2FkSW4udGhyZWFkcygpXG4gICAgICAgICAgICB9LCAzMDAwMDApO1xuICAgICAgICAgICAgaWYob3B0LnRocmVhZC50eXBlID09PSA1KSB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe3R5cGUgOiA1fSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQik7XG4gICAgICAgICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYoZXZlbnQuc3RhdGUgJiYgXCJ0eXBlXCIgaW4gZXZlbnQuc3RhdGUgJiYgIW9wdC5zdGF0ZXMubG9jayl7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChldmVudC5zdGF0ZS50eXBlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBldmVudC5zdGF0ZS50aHJlYWRfaWR9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWRJbi5jcmVhdGVQcml2YXRlKHthbGlhcyA6IGV2ZW50LnN0YXRlLmFsaWFzLCBpZCA6IGV2ZW50LnN0YXRlLmlkfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4uY3JlYXRlR3JvdXAodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4uY2xvc2VPcGVuZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWRJbi5jb250YWN0cyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWRJbi5zZWFyY2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy50aHJlYWRfc2VhcmNoX2lucHV0Lm9uKFwia2V5dXAgbW91c2V1cFwiLCBtZXRob2RzLmNoZWNrVGhyZWFkRmlsdGVycyk7XG5cbiAgICAgICAgICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICAgICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbWV0aG9kcy5maWxlRHJhZ0Ryb3AsIGZhbHNlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZihvcHQuZWxlbWVudHMubmF2X3NlYXJjaF9saW5rLmxlbmd0aCkgb3B0LmVsZW1lbnRzLm5hdl9zZWFyY2hfbGluay5jbGljayhtb3VudGVkLnNlYXJjaExpbmtDbGlja2VkKTtcbiAgICAgICAgICAgIHNldEludGVydmFsKG1vdW50ZWQudGltZUFnbywgMTAwMDApO1xuICAgICAgICAgICAgb3B0LlNFVFVQID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0IDogZnVuY3Rpb24obG9jayl7XG4gICAgICAgICAgICBtb3VudGVkLnN0b3BXYXRjaGRvZygpO1xuICAgICAgICAgICAgaWYob3B0LnNvY2tldC5jaGF0KSBvcHQuc29ja2V0LmNoYXQudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlmKG9wdC50aW1lcnMucmVtb3ZlX3R5cGluZ19pbnRlcnZhbCkgY2xlYXJJbnRlcnZhbChvcHQudGltZXJzLnJlbW92ZV90eXBpbmdfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgaWYob3B0LnRpbWVycy5zb2NrZXRfaW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwob3B0LnRpbWVycy5zb2NrZXRfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgaWYob3B0LnRpbWVycy5tYXJrX3JlYWRfdGltZW91dCkgY2xlYXJUaW1lb3V0KG9wdC50aW1lcnMubWFya19yZWFkX3RpbWVvdXQpO1xuICAgICAgICAgICAgaWYob3B0LnRpbWVycy5yZWNlbnRfYm9iYmxlX3RpbWVvdXQpIGNsZWFyVGltZW91dChvcHQudGltZXJzLnJlY2VudF9ib2JibGVfdGltZW91dCk7XG4gICAgICAgICAgICBpZihvcHQudGltZXJzLmJvYmJsZV9yZWZyZXNoX2ludGVydmFsKSBjbGVhckludGVydmFsKG9wdC50aW1lcnMuYm9iYmxlX3JlZnJlc2hfaW50ZXJ2YWwpO1xuICAgICAgICAgICAgaWYob3B0LnRpbWVycy5wcml2YXRlX2JvYmJsZV9yZWZyZXNoX3RpbWVvdXQpIGNsZWFyVGltZW91dChvcHQudGltZXJzLnByaXZhdGVfYm9iYmxlX3JlZnJlc2hfdGltZW91dCk7XG4gICAgICAgICAgICBpZihvcHQudGltZXJzLmRyYWdfZHJvcF9vdmVybGF5X2hpZGUpe1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChvcHQudGltZXJzLmRyYWdfZHJvcF9vdmVybGF5X2hpZGUpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5kcmFnX2Ryb3Bfem9uZS5hZGRDbGFzcygnTlMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5yZW1vdmVDbGFzcygnbXNnLWN0bnItdW5yZWFkJyk7XG4gICAgICAgICAgICBvcHQuZWxlbWVudHMudGhyZWFkX2FyZWEuZmluZCgnLnRocmVhZF9saXN0X2l0ZW0nKS5yZW1vdmVDbGFzcygnYWxlcnQtd2FybmluZyBzaGFkb3ctc20gcm91bmRlZCcpO1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnRocmVhZF9hcmVhLmZpbmQoJy50aHJlYWQtZ3JvdXAtYXZhdGFyJykucmVtb3ZlQ2xhc3MoJ2F2YXRhci1pcy1vbmxpbmUnKS5hZGRDbGFzcygnYXZhdGFyLWlzLW9mZmxpbmUnKTtcbiAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkuZGlzcG9zZVRvb2x0aXBzKCk7XG4gICAgICAgICAgICBvcHQgPSBPYmplY3QuYXNzaWduKHt9LCBvcHQsIHtcbiAgICAgICAgICAgICAgICB0aHJlYWQgOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBhZG1pbiA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG11dGVkIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlcGx5aW5nIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlcGx5X3RvX2lkIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgYXdhaXRpbmdfbXlfYXBwcm92YWwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZF9hdCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzX3VucmVhZCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjbGlja190b19yZWFkIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2luZyA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNhbl9jYWxsIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbG9ja291dCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0aHJlYWRfaGlzdG9yeSA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnlfaWQgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5X3JvdXRlIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeV9sb2FkaW5nIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemluZyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBfaWQgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBfdGhyZWFkIDogbnVsbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXRlcyA6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9jayA6IGxvY2ssXG4gICAgICAgICAgICAgICAgICAgIGxvYWRfaW5fcmV0cmllcyA6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlX2xvY2tvdXRfcmV0cmllcyA6IDAsXG4gICAgICAgICAgICAgICAgICAgIHRocmVhZF9maWx0ZXJlZCA6IG9wdC5zdGF0ZXMudGhyZWFkX2ZpbHRlcmVkLFxuICAgICAgICAgICAgICAgICAgICB0aHJlYWRfZmlsdGVyX3NlYXJjaCA6IG9wdC5zdGF0ZXMudGhyZWFkX2ZpbHRlcl9zZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgIG1lc3Nlbmdlcl9zZWFyY2hfdGVybSA6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNvY2tldCA6IHtcbiAgICAgICAgICAgICAgICAgICAgb25saW5lX3N0YXR1c19zZXR0aW5nIDogb3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcsXG4gICAgICAgICAgICAgICAgICAgIGNoYXQgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzb2NrZXRfcmV0cmllcyA6IDAsXG4gICAgICAgICAgICAgICAgICAgIHNlbmRfdHlwaW5nIDogMCxcbiAgICAgICAgICAgICAgICAgICAgaXNfYXdheSA6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdG9yYWdlIDoge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVfcHJvZmlsZXMgOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgd2hvX3R5cGluZyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICBib3RfdHlwaW5nIDogW10sXG4gICAgICAgICAgICAgICAgICAgIHRocmVhZHMgOiBvcHQuc3RvcmFnZS50aHJlYWRzLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudHMgOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ19tZXNzYWdlcyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wX2RhdGEgOiBudWxsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aW1lcnMgOiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtfcmVhZF90aW1lb3V0IDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmVjZW50X2JvYmJsZV90aW1lb3V0IDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0X2ludGVydmFsIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlX3R5cGluZ19pbnRlcnZhbCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGVfYm9iYmxlX3JlZnJlc2hfdGltZW91dCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGJvYmJsZV9yZWZyZXNoX2ludGVydmFsIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ19kcm9wX292ZXJsYXlfaGlkZSA6IG51bGxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVsZW1lbnRzIDoge1xuICAgICAgICAgICAgICAgICAgICBuYXZfc2VhcmNoX2xpbmsgOiBvcHQuZWxlbWVudHMubmF2X3NlYXJjaF9saW5rLFxuICAgICAgICAgICAgICAgICAgICBteV9hdmF0YXJfYXJlYSA6IG9wdC5lbGVtZW50cy5teV9hdmF0YXJfYXJlYSxcbiAgICAgICAgICAgICAgICAgICAgdGhyZWFkX2FyZWEgOiBvcHQuZWxlbWVudHMudGhyZWFkX2FyZWEsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfY29udGFpbmVyIDogb3B0LmVsZW1lbnRzLm1lc3NhZ2VfY29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlX3NpZGViYXJfY29udGFpbmVyIDogb3B0LmVsZW1lbnRzLm1lc3NhZ2Vfc2lkZWJhcl9jb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIHNvY2tldF9lcnJvcl9tc2cgOiBvcHQuZWxlbWVudHMuc29ja2V0X2Vycm9yX21zZyxcbiAgICAgICAgICAgICAgICAgICAgdGhyZWFkX3NlYXJjaF9pbnB1dCA6IG9wdC5lbGVtZW50cy50aHJlYWRfc2VhcmNoX2lucHV0LFxuICAgICAgICAgICAgICAgICAgICB0aHJlYWRfc2VhcmNoX2JhciA6IG9wdC5lbGVtZW50cy50aHJlYWRfc2VhcmNoX2JhcixcbiAgICAgICAgICAgICAgICAgICAgZHJhZ19kcm9wX3pvbmUgOiBvcHQuZWxlbWVudHMuZHJhZ19kcm9wX3pvbmUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3Nlbmdlcl9zZWFyY2hfaW5wdXQgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtZXNzZW5nZXJfc2VhcmNoX3Jlc3VsdHMgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtc2dfcGFuZWwgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBkb2NfZmlsZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwX2F2YXRhcl9maWxlIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkX2F1ZGlvX21lc3NhZ2VfYnRuIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YV90YWJsZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfdGV4dF9pbnB1dCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZvcm0gOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0aGVfdGhyZWFkIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbXNnX3N0YWNrIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ19tc2dfc3RhY2sgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBuZXdfbXNnX2FsZXJ0IDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmVwbHlfbWVzc2FnZV9hbGVydCA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHNlZW5fYnlfZmluYWwgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBhZGRfZW1vamlfYnRuIDogbnVsbCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICB0aW1lQWdvIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoXCJ0aW1lLnRpbWVhZ29cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5odG1sKE1lc3Nlbmdlci5mb3JtYXQoKS5tYWtlVGltZUFnbygkKHRoaXMpLmF0dHIoJ2RhdGV0aW1lJykpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0V2F0Y2hkb2cgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc3dpdGNoKG9wdC50aHJlYWQudHlwZSl7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQubG9ja291dCAmJiBvcHQudGhyZWFkLm1lc3NhZ2luZykgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfdGV4dF9pbnB1dC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnRpbWVycy5yZW1vdmVfdHlwaW5nX2ludGVydmFsID0gc2V0SW50ZXJ2YWwobWV0aG9kcy5yZW1vdmVUeXBlcnMsIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICBvcHQudGltZXJzLmJvYmJsZV9yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighTm90aWZ5TWFuYWdlci5zb2NrZXRzKCkuZm9yY2VkX2Rpc2Nvbm5lY3QpIExvYWRJbi5ib2JibGVIZWFkcygpXG4gICAgICAgICAgICAgICAgICAgIH0sIDE4MDAwMCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfcGFuZWwuY2xpY2sobW91bnRlZC5tc2dQYW5lbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19wYW5lbC5zY3JvbGwobW91bnRlZC5tc2dQYW5lbFNjcm9sbCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5kb2NfZmlsZS5jaGFuZ2UobW91bnRlZC5kb2N1bWVudENoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5ncm91cF9hdmF0YXJfZmlsZS5jaGFuZ2UobW91bnRlZC51cGxvYWRHcm91cEF2YXRhcik7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZWNvcmRfYXVkaW9fbWVzc2FnZV9idG4uY2xpY2sobW91bnRlZC5hdWRpb01lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuYWRkX2Vtb2ppX2J0bi5jbGljayhtb3VudGVkLnNob3dFbW9qaVBpY2tlcik7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQub24oJ3Bhc3RlJywgbWV0aG9kcy5wYXN0ZUltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmZvcm0ua2V5ZG93bihtb3VudGVkLmZvcm1LZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmZvcm0ub24oJ2lucHV0IGtleXVwJywgbWV0aG9kcy5tYW5hZ2VTZW5kTWVzc2FnZUJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5mb3JtLm9uKCdzdWJtaXQnLCBtb3VudGVkLnN0b3BEZWZhdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm5ld19tc2dfYWxlcnQuY2xpY2sobW91bnRlZC5uZXdNc2dBbGVydENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnJlcGx5X21lc3NhZ2VfYWxlcnQuY2xpY2sobWV0aG9kcy5yZXNldFJlcGx5aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfY29udGFpbmVyLmNsaWNrKG1vdW50ZWQuY2xpY2tNYXJrUmVhZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKE1lc3Nlbmdlci5jb21tb24oKS5tb2JpbGUpIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQuY2xpY2sobW91bnRlZC5pbnB1dENsaWNrU2Nyb2xsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIU1lc3Nlbmdlci5jb21tb24oKS5tb2JpbGUpIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfcGFuZWwuY2xpY2sobW91bnRlZC5tc2dQYW5lbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmRvY19maWxlLmNoYW5nZShtb3VudGVkLmRvY3VtZW50Q2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnJlY29yZF9hdWRpb19tZXNzYWdlX2J0bi5jbGljayhtb3VudGVkLmF1ZGlvTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5hZGRfZW1vamlfYnRuLmNsaWNrKG1vdW50ZWQuc2hvd0Vtb2ppUGlja2VyKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmZvcm0ua2V5ZG93bihtb3VudGVkLmZvcm1LZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmZvcm0ub24oJ2lucHV0IGtleXVwJywgbWV0aG9kcy5tYW5hZ2VTZW5kTWVzc2FnZUJ1dHRvbik7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5mb3JtLm9uKCdzdWJtaXQnLCBtb3VudGVkLnN0b3BEZWZhdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIU1lc3Nlbmdlci5jb21tb24oKS5tb2JpbGUpIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJqZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1YmplY3QnKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19wYW5lbC5jbGljayhtb3VudGVkLm1zZ1BhbmVsQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICBpZighTWVzc2VuZ2VyLmNvbW1vbigpLm1vYmlsZSkgc3ViamVjdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICBQYWdlTGlzdGVuZXJzLmxpc3RlbigpLnZhbGlkYXRlRm9ybXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzZW5nZXJfc2VhcmNoX2lucHV0Lm9uKFwia2V5dXAgbW91c2V1cFwiLCBtb3VudGVkLnJ1bk1lc3NlbmdlclNlYXJjaCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfcGFuZWwuY2xpY2sobW91bnRlZC5tc2dQYW5lbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RvcFdhdGNoZG9nIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHN3aXRjaChvcHQudGhyZWFkLnR5cGUpe1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfcGFuZWwub2ZmKCdjbGljaycsIG1vdW50ZWQubXNnUGFuZWxDbGljayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubXNnX3BhbmVsLm9mZignc2Nyb2xsJywgbW91bnRlZC5tc2dQYW5lbFNjcm9sbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZG9jX2ZpbGUub2ZmKCdjaGFuZ2UnLCBtb3VudGVkLmRvY3VtZW50Q2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5ncm91cF9hdmF0YXJfZmlsZS5vZmYoJ2NoYW5nZScsIG1vdW50ZWQudXBsb2FkR3JvdXBBdmF0YXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnJlY29yZF9hdWRpb19tZXNzYWdlX2J0bi5vZmYoJ2NsaWNrJywgbW91bnRlZC5hdWRpb01lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmFkZF9lbW9qaV9idG4ub2ZmKCdjbGljaycsIG1vdW50ZWQuc2hvd0Vtb2ppUGlja2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQub2ZmKCdwYXN0ZScsIG1ldGhvZHMucGFzdGVJbWFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZm9ybS5vZmYoJ2tleWRvd24nLCBtb3VudGVkLmZvcm1LZXlkb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5mb3JtLm9mZignaW5wdXQga2V5dXAnLCBtZXRob2RzLm1hbmFnZVNlbmRNZXNzYWdlQnV0dG9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5mb3JtLm9mZignc3VibWl0JywgbW91bnRlZC5zdG9wRGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubmV3X21zZ19hbGVydC5vZmYoJ2NsaWNrJywgbW91bnRlZC5uZXdNc2dBbGVydENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZXBseV9tZXNzYWdlX2FsZXJ0Lm9mZignY2xpY2snLCBtZXRob2RzLnJlc2V0UmVwbHlpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfY29udGFpbmVyLm9mZignY2xpY2snLCBtb3VudGVkLmNsaWNrTWFya1JlYWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmNvbW1vbigpLm1vYmlsZSkgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfdGV4dF9pbnB1dC5vZmYoJ2NsaWNrJywgbW91bnRlZC5pbnB1dENsaWNrU2Nyb2xsKTtcbiAgICAgICAgICAgICAgICAgICAgfWNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19wYW5lbC5vZmYoJ2NsaWNrJywgbW91bnRlZC5tc2dQYW5lbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5kb2NfZmlsZS5vZmYoJ2NoYW5nZScsIG1vdW50ZWQuZG9jdW1lbnRDaGFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnJlY29yZF9hdWRpb19tZXNzYWdlX2J0bi5vZmYoJ2NsaWNrJywgbW91bnRlZC5hdWRpb01lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmFkZF9lbW9qaV9idG4ub2ZmKCdjbGljaycsIG1vdW50ZWQuc2hvd0Vtb2ppUGlja2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5mb3JtLm9mZigna2V5ZG93bicsIG1vdW50ZWQuZm9ybUtleWRvd24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmZvcm0ub2ZmKCdpbnB1dCBrZXl1cCcsIG1ldGhvZHMubWFuYWdlU2VuZE1lc3NhZ2VCdXR0b24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmZvcm0ub2ZmKCdzdWJtaXQnLCBtb3VudGVkLnN0b3BEZWZhdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfWNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19wYW5lbC5vZmYoJ2NsaWNrJywgbW91bnRlZC5tc2dQYW5lbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfWNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19wYW5lbC5vZmYoJ2NsaWNrJywgbW91bnRlZC5tc2dQYW5lbENsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzZW5nZXJfc2VhcmNoX2lucHV0Lm9mZihcImtleXVwIG1vdXNldXBcIiwgbW91bnRlZC5ydW5NZXNzZW5nZXJTZWFyY2gpO1xuICAgICAgICAgICAgICAgICAgICB9Y2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BEZWZhdWx0IDogZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfSxcbiAgICAgICAgc2VhcmNoTGlua0NsaWNrZWQgOiBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIG1vdW50ZWQuc3RvcERlZmF1bHQoZSk7XG4gICAgICAgICAgICAkKCdib2R5JykuY2xpY2soKTtcbiAgICAgICAgICAgIExvYWRJbi5zZWFyY2goKVxuICAgICAgICB9LFxuICAgICAgICBydW5NZXNzZW5nZXJTZWFyY2ggOiBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQudHlwZSAhPT0gNykgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRfdGVybSA9IG9wdC5zdGF0ZXMubWVzc2VuZ2VyX3NlYXJjaF90ZXJtLCB0aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGlmKGUgJiYgZS50eXBlID09PSAnbW91c2V1cCcpe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobW91bnRlZC5ydW5NZXNzZW5nZXJTZWFyY2gsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG9wdC5lbGVtZW50cy5tZXNzZW5nZXJfc2VhcmNoX2lucHV0LnZhbCgpLnRyaW0oKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGlmKG9wdC5lbGVtZW50cy5tZXNzZW5nZXJfc2VhcmNoX2lucHV0LnZhbCgpLnRyaW0oKS5sZW5ndGggPj0gMyl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRfdGVybSAhPT0gb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfaW5wdXQudmFsKCkudHJpbSgpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5zdGF0ZXMubWVzc2VuZ2VyX3NlYXJjaF90ZXJtID0gb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfaW5wdXQudmFsKCkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfcmVzdWx0cy5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5sb2FkZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3NlYXJjaC8nK29wdC5zdGF0ZXMubWVzc2VuZ2VyX3NlYXJjaF90ZXJtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBtZXRob2RzLm1hbmFnZU1lc3NlbmdlclNlYXJjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RhdGVzLm1lc3Nlbmdlcl9zZWFyY2hfdGVybSA9IG9wdC5lbGVtZW50cy5tZXNzZW5nZXJfc2VhcmNoX2lucHV0LnZhbCgpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfcmVzdWx0cy5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfZW1wdHlfc2VhcmNoKHRydWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIG9wdC5zdGF0ZXMubWVzc2VuZ2VyX3NlYXJjaF90ZXJtID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2VuZ2VyX3NlYXJjaF9yZXN1bHRzLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9lbXB0eV9zZWFyY2goKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0Q2xpY2tTY3JvbGwgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy50aHJlYWRTY3JvbGxCb3R0b20odHJ1ZSwgZmFsc2UpXG4gICAgICAgICAgICB9LCAyMDApXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1LZXlkb3duIDogZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdC50aHJlYWQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQubG9ja291dCB8fCAhb3B0LnRocmVhZC5tZXNzYWdpbmcpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMuc2VuZE1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMuc3RvcFR5cGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMuaXNUeXBpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmKGUua2V5Q29kZSA9PT0gMTMpIG5ld19mb3Jtcy5uZXdQcml2YXRlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xpY2tNYXJrUmVhZCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmNsaWNrX3RvX3JlYWQgfHwgbWV0aG9kcy5jaGVja1RocmVhZFN0b3JhZ2VVbnJlYWQoKSkgbWV0aG9kcy5tYXJrUmVhZCgpXG4gICAgICAgIH0sXG4gICAgICAgIG1zZ1BhbmVsQ2xpY2sgOiBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQudHlwZSA9PT0gNyl7XG4gICAgICAgICAgICAgICAgbGV0IGZvY3VzX2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3Nlbmdlcl9zZWFyY2hfcHJvZmlsZXMnKTtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuZm9ybWF0KCkuZm9jdXNFbmQoZm9jdXNfaW5wdXQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBmb2N1c19pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlX3RleHRfaW5wdXQnKTtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0LnRocmVhZC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYob3B0LnRocmVhZC5sb2Nrb3V0IHx8ICFvcHQudGhyZWFkLm1lc3NhZ2luZykgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWxtX2NsYXNzID0gJChlLnRhcmdldCkuYXR0cignY2xhc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlnbm9yZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdtZXNzYWdlLXRleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2UtdGV4dCBwdC0yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYXMgZmEtdHJhc2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZhcyBmYS1ncmluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkcm9wZG93bi1pdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYXMgZmEtZWxsaXBzaXMtdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmFzIGZhLWdyaW4tdG9uZ3VlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYXMgZmEtcmVwbHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZhcyBmYS1wZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2pveXBpeGVscycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWwtMSBmb250LXdlaWdodC1ib2xkIHRleHQtcHJpbWFyeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnYmFkZ2UgYmFkZ2UtbGlnaHQgbXItMSBweC0xIHBvaW50ZXJfYXJlYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAncmVhY3RlZC1ieS1tZSBiYWRnZSBiYWRnZS1saWdodCBtci0xIHB4LTEgcG9pbnRlcl9hcmVhJ1xuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWdub3JlLmluY2x1ZGVzKGVsbV9jbGFzcykgfHwgTWVzc2VuZ2VyLmNvbW1vbigpLm1vYmlsZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuZm9ybWF0KCkuZm9jdXNFbmQoZm9jdXNfaW5wdXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQubWVzc2FnaW5nKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5mb3JtYXQoKS5mb2N1c0VuZChmb2N1c19pbnB1dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZihlLnRhcmdldC5pZCA9PT0gJ21zZ190aHJlYWRfbmV3X2dyb3VwJykgTWVzc2VuZ2VyLmZvcm1hdCgpLmZvY3VzRW5kKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJqZWN0JykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtc2dQYW5lbFNjcm9sbCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZigkKHRoaXMpLnNjcm9sbFRvcCgpICA8PSA1MDAgKSBtZXRob2RzLmxvYWRIaXN0b3J5KCk7XG4gICAgICAgICAgICBpZihtZXRob2RzLnRocmVhZFNjcm9sbEJvdHRvbShmYWxzZSwgdHJ1ZSkgJiYgb3B0LnRocmVhZC5tZXNzYWdlc191bnJlYWQgJiYgIW9wdC5zb2NrZXQuaXNfYXdheSAmJiBkb2N1bWVudC5oYXNGb2N1cygpKSBtZXRob2RzLm1hcmtSZWFkKClcbiAgICAgICAgfSxcbiAgICAgICAgbmV3TXNnQWxlcnRDbGljayA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBtZXRob2RzLnRocmVhZFNjcm9sbEJvdHRvbSh0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICBtZXRob2RzLm1hcmtSZWFkKClcbiAgICAgICAgfSxcbiAgICAgICAgYXVkaW9NZXNzYWdlIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQubG9ja291dCB8fCAhb3B0LnRocmVhZC5tZXNzYWdpbmcpIHJldHVybjtcbiAgICAgICAgICAgIFJlY29yZEF1ZGlvLm9wZW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd0Vtb2ppUGlja2VyIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQubG9ja291dCB8fCAhb3B0LnRocmVhZC5tZXNzYWdpbmcpIHJldHVybjtcbiAgICAgICAgICAgIEVtb2ppUGlja2VyLmFkZE1lc3NhZ2UoKVxuICAgICAgICB9LFxuICAgICAgICBkb2N1bWVudENoYW5nZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdC50aHJlYWQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQubG9ja291dCB8fCAhb3B0LnRocmVhZC5tZXNzYWdpbmcpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgKFsuLi5vcHQuZWxlbWVudHMuZG9jX2ZpbGVbMF0uZmlsZXNdKS5mb3JFYWNoKG1ldGhvZHMuc2VuZFVwbG9hZEZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmRvY19maWxlWzBdLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZighb3B0LnRocmVhZC5tZXNzYWdpbmcpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmJ1dHRvbigpLmFkZExvYWRlcih7aWQgOiAnI2ZpbGVfdXBsb2FkX2J0bid9KTtcbiAgICAgICAgICAgICAgICAgICAgbmV3X2Zvcm1zLm5ld1ByaXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwbG9hZEdyb3VwQXZhdGFyIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxldCBkYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBkYXRhLmFwcGVuZCgnaW1hZ2UnLCBvcHQuZWxlbWVudHMuZ3JvdXBfYXZhdGFyX2ZpbGVbMF0uZmlsZXNbMF0pO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuZmlsbE1vZGFsKHtsb2FkZXIgOiB0cnVlLCBub19jbG9zZSA6IHRydWUsIGJvZHkgOiBudWxsLCB0aXRsZSA6ICdVcGxvYWRpbmcuLi4nfSk7XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIG9wdC50aHJlYWQuaWQgKyAnL2F2YXRhcicsXG4gICAgICAgICAgICAgICAgZGF0YSA6IGRhdGEsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6ICdZb3UgdXBkYXRlZCAnK2RhdGEubmFtZSsnXFwncyBBdmF0YXIuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzd2l0Y2hUb2dnbGVMaXN0ZW5lciA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKFwiLnN3aXRjaF9pbnB1dFwiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYoJCh0aGlzKS5pcygnOmNoZWNrZWQnKSl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50cygpLmNsb3Nlc3QoJ3RyJykuYWRkQ2xhc3MoJ3RhYmxlLXdhcm5pbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudHMoKS5jbG9zZXN0KCd0cicpLnJlbW92ZUNsYXNzKCd0YWJsZS13YXJuaW5nJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0UHJlc2VuY2UgOiBmdW5jdGlvbihmdWxsKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuYXdhaXRpbmdfbXlfYXBwcm92YWwgfHwgb3B0LnRocmVhZC5tdXRlZCB8fCBvcHQudGhyZWFkLmxvY2tvdXQpIHJldHVybjtcbiAgICAgICAgICAgIGlmKGZ1bGwpIG9wdC5zb2NrZXQuY2hhdCA9IG51bGw7XG4gICAgICAgICAgICBpZihvcHQuc29ja2V0LmNoYXQpe1xuICAgICAgICAgICAgICAgIG9wdC5zb2NrZXQuY2hhdC5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0eXBlb2YgTm90aWZ5TWFuYWdlci5zb2NrZXRzKCkuRWNoby5jb25uZWN0b3IuY2hhbm5lbHNbJ3ByZXNlbmNlLW1lc3Nlbmdlci50aHJlYWQuJytvcHQudGhyZWFkLmlkXSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgIE5vdGlmeU1hbmFnZXIuc29ja2V0cygpLkVjaG8uY29ubmVjdG9yLmNoYW5uZWxzWydwcmVzZW5jZS1tZXNzZW5nZXIudGhyZWFkLicrb3B0LnRocmVhZC5pZF0uc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgb3B0LnNvY2tldC5jaGF0ID0gTm90aWZ5TWFuYWdlci5zb2NrZXRzKCkuRWNoby5jb25uZWN0b3IuY2hhbm5lbHNbJ3ByZXNlbmNlLW1lc3Nlbmdlci50aHJlYWQuJytvcHQudGhyZWFkLmlkXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBvcHQuc29ja2V0LmNoYXQgPSBOb3RpZnlNYW5hZ2VyLnNvY2tldHMoKS5FY2hvLmpvaW4oJ21lc3Nlbmdlci50aHJlYWQuJytvcHQudGhyZWFkLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5zb2NrZXQuY2hhdC5oZXJlKGZ1bmN0aW9uKHVzZXJzKXtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5hY3RpdmVfcHJvZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAkKCcudGhyZWFkX2Vycm9yX2FyZWEnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJC5lYWNoKHVzZXJzLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIU1lc3Nlbmdlci5pc1Byb3ZpZGVyKHRoaXMucHJvdmlkZXJfaWQsIG51bGwsIHRoaXMucHJvdmlkZXJfYWxpYXMpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLmFjdGl2ZV9wcm9maWxlcy5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVCb2JibGVIZWFkKHRoaXMucHJvdmlkZXJfaWQsIG51bGwpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLmRyYXdCb2JibGVIZWFkcygpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuc2VuZE9ubGluZVN0YXR1cygob3B0LnNvY2tldC5pc19hd2F5ICYmIG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nICE9PSAwID8gMiA6IG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW5pbmcoZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLmFjdGl2ZV9wcm9maWxlcy5wdXNoKHVzZXIpO1xuICAgICAgICAgICAgICAgIGlmKG9wdC5zdG9yYWdlLm1lc3NhZ2VzLmxlbmd0aCkgbWV0aG9kcy51cGRhdGVCb2JibGVIZWFkKHVzZXIucHJvdmlkZXJfaWQsIG9wdC5zdG9yYWdlLm1lc3NhZ2VzWzBdLmlkKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLmRyYXdCb2JibGVIZWFkcygpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuc2VuZE9ubGluZVN0YXR1cygob3B0LnNvY2tldC5pc19hd2F5ICYmIG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nICE9PSAwID8gMiA6IG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nKSk7XG4gICAgICAgICAgICAgICAgUGFnZUxpc3RlbmVycy5saXN0ZW4oKS50b29sdGlwcygpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmxlYXZpbmcoZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgIG1ldGhvZHMudXBkYXRlQWN0aXZlUHJvZmlsZSh1c2VyLnByb3ZpZGVyX2lkLCAzKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5saXN0ZW5Gb3JXaGlzcGVyKCd0eXBpbmcnLCBtZXRob2RzLmFkZFR5cGVycylcbiAgICAgICAgICAgIC5saXN0ZW5Gb3JXaGlzcGVyKCdzdG9wLXR5cGluZycsIG1ldGhvZHMucmVtb3ZlVHlwZXJzKVxuICAgICAgICAgICAgLmxpc3RlbkZvcldoaXNwZXIoJ29ubGluZScsIGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgICAgICAgICAgIG1ldGhvZHMudGhyZWFkT25saW5lU3RhdHVzKCh1c2VyLm9ubGluZV9zdGF0dXMpKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnVwZGF0ZUFjdGl2ZVByb2ZpbGUodXNlci5wcm92aWRlcl9pZCwgdXNlci5vbmxpbmVfc3RhdHVzKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5saXN0ZW5Gb3JXaGlzcGVyKCdyZWFkJywgZnVuY3Rpb24obWVzc2FnZSl7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVCb2JibGVIZWFkKG1lc3NhZ2UucHJvdmlkZXJfaWQsIG1lc3NhZ2UubWVzc2FnZV9pZCk7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5kcmF3Qm9iYmxlSGVhZHMoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5saXN0ZW4oJy50aHJlYWQuc2V0dGluZ3MnLCBtZXRob2RzLmdyb3VwU2V0dGluZ3NTdGF0ZSlcbiAgICAgICAgICAgIC5saXN0ZW4oJy50aHJlYWQuYXZhdGFyJywgbWV0aG9kcy5ncm91cEF2YXRhclN0YXRlKVxuICAgICAgICAgICAgLmxpc3RlbignLm1lc3NhZ2UuZWRpdGVkJywgbWV0aG9kcy5yZW5kZXJVcGRhdGVkTWVzc2FnZSlcbiAgICAgICAgICAgIC5saXN0ZW4oJy5yZWFjdGlvbi5hZGRlZCcsIG1ldGhvZHMudXBkYXRlTmV3UmVhY3Rpb24pXG4gICAgICAgICAgICAubGlzdGVuKCcucmVhY3Rpb24ucmVtb3ZlZCcsIG1ldGhvZHMudXBkYXRlUmVtb3ZlUmVhY3Rpb24pXG4gICAgICAgIH1cbiAgICB9LFxuICAgIEhlYWx0aCA9IHtcbiAgICAgICAgY2hlY2tDb25uZWN0aW9uIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCFNZXNzZW5nZXIuY29tbW9uKCkubW9kdWxlcy5pbmNsdWRlcygnTm90aWZ5TWFuYWdlcicpIHx8ICFOb3RpZnlNYW5hZ2VyLnNvY2tldHMoKS5zdGF0dXMgfHwgIU5vdGlmeU1hbmFnZXIuc29ja2V0cygpLkVjaG8pe1xuICAgICAgICAgICAgICAgIGlmKG9wdC5zb2NrZXQuc29ja2V0X3JldHJpZXMgPj0gMTApe1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5hY3RpdmVfcHJvZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnNvY2tldC5zb2NrZXRfcmV0cmllcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIEhlYWx0aC51bnJlYWRDaGVjaygpO1xuICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuc29ja2V0X2Vycm9yX21zZy5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5zb2NrZXRfZXJyb3IoKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnRocmVhZF9lcnJvcl9hcmVhJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnRocmVhZF9lcnJvcl9idG4nKS5wb3BvdmVyKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihvcHQudGltZXJzLnNvY2tldF9pbnRlcnZhbCA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgIG9wdC50aW1lcnMuc29ja2V0X2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBIZWFsdGguY2hlY2tDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvcHQuc29ja2V0LnNvY2tldF9yZXRyaWVzKys7XG4gICAgICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmNvbW1vbigpLm1vZHVsZXMuaW5jbHVkZXMoJ05vdGlmeU1hbmFnZXInKSAmJiBOb3RpZnlNYW5hZ2VyLnNvY2tldHMoKS5mb3JjZWRfZGlzY29ubmVjdCkgb3B0LmVsZW1lbnRzLm15X2F2YXRhcl9hcmVhLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X2F2YXRhcl9zdGF0dXMoMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEhlYWx0aC5vbkNvbm5lY3Rpb24oKVxuICAgICAgICB9LFxuICAgICAgICBvbkNvbm5lY3Rpb24gOiBmdW5jdGlvbihmdWxsKXtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5teV9hdmF0YXJfYXJlYS5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5teV9hdmF0YXJfc3RhdHVzKG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nKSk7XG4gICAgICAgICAgICBQYWdlTGlzdGVuZXJzLmxpc3RlbigpLnRvb2x0aXBzKCk7XG4gICAgICAgICAgICBvcHQuc29ja2V0LnNvY2tldF9yZXRyaWVzID0gMDtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5zb2NrZXRfZXJyb3JfbXNnLmh0bWwoJycpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChvcHQudGltZXJzLnNvY2tldF9pbnRlcnZhbCk7XG4gICAgICAgICAgICBvcHQudGltZXJzLnNvY2tldF9pbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmlkICYmIG9wdC50aHJlYWQudHlwZSAhPT0gMyl7XG4gICAgICAgICAgICAgICAgJCgnLnRocmVhZF9lcnJvcl9hcmVhJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIG1vdW50ZWQuc3RhcnRQcmVzZW5jZShmdWxsKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZUNvbm5lY3RlZCA6IGZ1bmN0aW9uKGZ1bGwpe1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm15X2F2YXRhcl9hcmVhLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X2F2YXRhcl9zdGF0dXMob3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcpKTtcbiAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKTtcbiAgICAgICAgICAgIEhlYWx0aC5vbkNvbm5lY3Rpb24oZnVsbCk7XG4gICAgICAgICAgICBpZighQ2FsbE1hbmFnZXIuc3RhdGUoKS5pbml0aWFsaXplZCkgTG9hZEluLnRocmVhZHMoKTtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuaW5pdGlhbGl6ZVJlY2VudE1lc3NhZ2VzKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1bnJlYWRDaGVjayA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZighTWVzc2VuZ2VyLmNvbW1vbigpLm1vZHVsZXMuaW5jbHVkZXMoJ05vdGlmeU1hbmFnZXInKSB8fCBOb3RpZnlNYW5hZ2VyLnNvY2tldHMoKS5mb3JjZWRfZGlzY29ubmVjdCkgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGNoZWNrVG90YWxVbnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYoQ2FsbE1hbmFnZXIuc3RhdGUoKS5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd1bnJlYWQtdGhyZWFkcy1jb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKE5vdGlmeU1hbmFnZXIuY291bnRzKCkudGhyZWFkcyAhPT0gZGF0YS51bnJlYWRfdGhyZWFkc19jb3VudCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90aWZ5TWFuYWdlci51cGRhdGVNZXNzYWdlQ291bnQoe3RvdGFsX3VucmVhZCA6IGRhdGEudW5yZWFkX3RocmVhZHNfY291bnR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4udGhyZWFkcygpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZhaWwgOiBudWxsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmlkKXtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nK29wdC50aHJlYWQuaWQrJy9pcy11bnJlYWQnLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnVucmVhZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9jdW1lbnQuaGFzRm9jdXMoKSAmJiAhb3B0LnNvY2tldC5pc19hd2F5KSBtZXRob2RzLm1hcmtSZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5pbml0aWFsaXplUmVjZW50TWVzc2FnZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWRvY3VtZW50Lmhhc0ZvY3VzKCkgfHwgb3B0LnNvY2tldC5pc19hd2F5KSBOb3RpZnlNYW5hZ2VyLnNvdW5kKCdtZXNzYWdlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVG90YWxVbnJlYWQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmYWlsIDogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrVG90YWxVbnJlYWQoKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBJbXBvcnRzID0ge1xuICAgICAgICBuZXdNZXNzYWdlIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmlkID09PSBkYXRhLnRocmVhZF9pZCl7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5hZGRNZXNzYWdlKGRhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKENhbGxNYW5hZ2VyLnN0YXRlKCkuaW5pdGlhbGl6ZWQgJiYgQ2FsbE1hbmFnZXIuc3RhdGUoKS50aHJlYWRfaWQgIT09IGRhdGEudGhyZWFkX2lkKSByZXR1cm47XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmluaXRpYWxpemluZyAmJiBvcHQudGhyZWFkLl9pZCA9PT0gZGF0YS50aHJlYWRfaWQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBlbmRpbmdfbWVzc2FnZXMucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnVwZGF0ZVRocmVhZChkYXRhLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGhvZHMudXBkYXRlVGhyZWFkKGRhdGEsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZighTWVzc2VuZ2VyLmlzUHJvdmlkZXIoZGF0YS5vd25lcl9pZCwgZGF0YS5vd25lcl90eXBlKSkgTm90aWZ5TWFuYWdlci5zb3VuZCgnbWVzc2FnZScpXG4gICAgICAgIH0sXG4gICAgICAgIGF1ZGlvTWVzc2FnZSA6IGZ1bmN0aW9uKGF1ZGlvKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQpe1xuICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQudHlwZSA9PT0gMyl7XG4gICAgICAgICAgICAgICAgICAgIG5ld19mb3Jtcy5uZXdQcml2YXRlKGZhbHNlLCB0cnVlLCBhdWRpbyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5zZW5kVXBsb2FkRmlsZXMoYXVkaW8sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGxTdGF0dXMgOiBmdW5jdGlvbihkYXRhLCBhY3Rpb24pe1xuICAgICAgICAgICAgbWV0aG9kcy50aHJlYWRDYWxsU3RhdHVzKGRhdGEsIGFjdGlvbilcbiAgICAgICAgfSxcbiAgICAgICAgYWRkZWRUb1RocmVhZCA6IGZ1bmN0aW9uKHRocmVhZF9pZCl7XG4gICAgICAgICAgICBMb2FkSW4udGhyZWFkKHRocmVhZF9pZCk7XG4gICAgICAgICAgICBOb3RpZnlNYW5hZ2VyLnNvdW5kKCdtZXNzYWdlJylcbiAgICAgICAgfSxcbiAgICAgICAgcHJvbW90ZWRBZG1pbiA6IGZ1bmN0aW9uKHRocmVhZF9pZCl7XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmlkID09PSB0aHJlYWRfaWQpe1xuICAgICAgICAgICAgICAgIE5vdGlmeU1hbmFnZXIuc291bmQoJ25vdGlmeScpO1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLkFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnWW91IHdlcmUgcHJvbW90ZWQgdG8gYWRtaW4uIFJlZnJlc2hpbmcgdGhlIGdyb3VwLi4uJyxcbiAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0aGVtZSA6ICdpbmZvJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIExvYWRJbi5pbml0aWF0ZV90aHJlYWQoe3RocmVhZF9pZCA6IG9wdC50aHJlYWQuaWQsIGZvcmNlIDogdHJ1ZX0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlbW90ZWRBZG1pbiA6IGZ1bmN0aW9uKHRocmVhZF9pZCl7XG4gICAgICAgICAgICBpZihvcHQudGhyZWFkLmlkID09PSB0aHJlYWRfaWQpe1xuICAgICAgICAgICAgICAgIE5vdGlmeU1hbmFnZXIuc291bmQoJ25vdGlmeScpO1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLkFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnWW91IHdlcmUgZGVtb3RlZCBmcm9tIGFkbWluLiBSZWZyZXNoaW5nIHRoZSBncm91cC4uLicsXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhlbWUgOiAnaW5mbydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBvcHQudGhyZWFkLmlkLCBmb3JjZSA6IHRydWV9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwZXJtaXNzaW9uc1VwZGF0ZWQgOiBmdW5jdGlvbih0aHJlYWRfaWQpe1xuICAgICAgICAgICAgaWYob3B0LnRocmVhZC5pZCA9PT0gdGhyZWFkX2lkKXtcbiAgICAgICAgICAgICAgICBOb3RpZnlNYW5hZ2VyLnNvdW5kKCdub3RpZnknKTtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlIDogJ1lvdXIgcGVybWlzc2lvbnMgd2VyZSB1cGRhdGVkLiBSZWZyZXNoaW5nIHRoZSBncm91cC4uLicsXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhlbWUgOiAnaW5mbydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBvcHQudGhyZWFkLmlkLCBmb3JjZSA6IHRydWV9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aHJlYWRBcHByb3ZhbCA6IGZ1bmN0aW9uKHRocmVhZF9pZCwgYXBwcm92ZWQpe1xuICAgICAgICAgICAgaWYoYXBwcm92ZWQpe1xuICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQgPT09IHRocmVhZF9pZCl7XG4gICAgICAgICAgICAgICAgICAgIExvYWRJbi5pbml0aWF0ZV90aHJlYWQoe3RocmVhZF9pZCA6IHRocmVhZF9pZCwgZm9yY2UgOiB0cnVlfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgTG9hZEluLnRocmVhZHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQgPT09IHRocmVhZF9pZCkgTG9hZEluLmNsb3NlT3BlbmVkKCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucmVtb3ZlVGhyZWFkKHRocmVhZF9pZClcbiAgICAgICAgICAgICAgICB9LCAyNTAwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aHJlYWRMZWZ0IDogZnVuY3Rpb24odGhyZWFkX2lkKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQgPT09IHRocmVhZF9pZCkgTG9hZEluLmNsb3NlT3BlbmVkKCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnJlbW92ZVRocmVhZCh0aHJlYWRfaWQpXG4gICAgICAgICAgICB9LCAyNTAwKVxuICAgICAgICB9LFxuICAgICAgICBwdXJnZU1lc3NhZ2UgOiBmdW5jdGlvbihtZXNzYWdlKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQgPT09IG1lc3NhZ2UudGhyZWFkX2lkKXtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnB1cmdlTWVzc2FnZShtZXNzYWdlLm1lc3NhZ2VfaWQpO1xuICAgICAgICAgICAgICAgICQoXCIjbWVzc2FnZV9cIittZXNzYWdlLm1lc3NhZ2VfaWQpLnJlbW92ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtZXRob2RzID0ge1xuICAgICAgICBpbml0aWF0ZVByaXZhdGUgOiBmdW5jdGlvbihhcmcsIGRhdGEsIG5vSGlzdG9yeSl7XG4gICAgICAgICAgICBpZihkYXRhLnJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eSgnbWVzc2FnZXMnKSl7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXMgPSBkYXRhLnJlc291cmNlcy5tZXNzYWdlcy5kYXRhO1xuICAgICAgICAgICAgICAgIGlmKCFkYXRhLnJlc291cmNlcy5tZXNzYWdlcy5tZXRhLmZpbmFsX3BhZ2Upe1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLnRocmVhZF9oaXN0b3J5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnRocmVhZC5oaXN0b3J5X2lkID0gZGF0YS5yZXNvdXJjZXMubWVzc2FnZXMubWV0YS5uZXh0X3BhZ2VfaWQ7XG4gICAgICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuaGlzdG9yeV9yb3V0ZSA9IGRhdGEucmVzb3VyY2VzLm1lc3NhZ2VzLm1ldGEubmV4dF9wYWdlX3JvdXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLnRocmVhZF9oaXN0b3J5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuaGlzdG9yeV9pZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuaGlzdG9yeV9yb3V0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzID0gZGF0YS5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoJ3BhcnRpY2lwYW50cycpID8gZGF0YS5yZXNvdXJjZXMucGFydGljaXBhbnRzLmRhdGEgOiBbXTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5yZW5kZXJfcHJpdmF0ZShkYXRhKSk7XG4gICAgICAgICAgICBpZighbm9IaXN0b3J5KSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3R5cGUgOiAxLCB0aHJlYWRfaWQgOiBkYXRhLmlkfSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQiArICcvJytkYXRhLmlkKTtcbiAgICAgICAgICAgIG9wdC50aHJlYWQuY3JlYXRlZF9hdCA9IGRhdGEuY3JlYXRlZF9hdDtcbiAgICAgICAgICAgIG9wdC50aHJlYWQubXV0ZWQgPSBkYXRhLm9wdGlvbnMubXV0ZWQ7XG4gICAgICAgICAgICBvcHQudGhyZWFkLl90aHJlYWQgPSBkYXRhO1xuICAgICAgICAgICAgbW91bnRlZC5Jbml0aWFsaXplKHtcbiAgICAgICAgICAgICAgICB0eXBlIDogZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgIHRocmVhZF9pZCA6IGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgdF9uYW1lIDogZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgIGNhbl9jYWxsIDogZGF0YS5vcHRpb25zLmNhbGwsXG4gICAgICAgICAgICAgICAgYWRtaW4gOiBkYXRhLm9wdGlvbnMuYWRtaW4sXG4gICAgICAgICAgICAgICAgcGVuZGluZyA6IGRhdGEucGVuZGluZyxcbiAgICAgICAgICAgICAgICBhd2FpdGluZ19teV9hcHByb3ZhbCA6IGRhdGEub3B0aW9ucy5hd2FpdGluZ19teV9hcHByb3ZhbCA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdpbmcgOiBkYXRhLm9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBsb2Nrb3V0IDogZGF0YS5sb2NrZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVUaHJlYWQoZGF0YSwgdHJ1ZSwgZmFsc2UsICgnbmV3JyBpbiBhcmcpKVxuICAgICAgICB9LFxuICAgICAgICBpbml0aWF0ZUdyb3VwIDogZnVuY3Rpb24oYXJnLCBkYXRhLCBub0hpc3Rvcnkpe1xuICAgICAgICAgICAgaWYoZGF0YS5yZXNvdXJjZXMuaGFzT3duUHJvcGVydHkoJ21lc3NhZ2VzJykpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLm1lc3NhZ2VzID0gZGF0YS5yZXNvdXJjZXMubWVzc2FnZXMuZGF0YTtcbiAgICAgICAgICAgICAgICBpZighZGF0YS5yZXNvdXJjZXMubWVzc2FnZXMubWV0YS5maW5hbF9wYWdlKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnRocmVhZC50aHJlYWRfaGlzdG9yeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuaGlzdG9yeV9pZCA9IGRhdGEucmVzb3VyY2VzLm1lc3NhZ2VzLm1ldGEubmV4dF9wYWdlX2lkO1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLmhpc3Rvcnlfcm91dGUgPSBkYXRhLnJlc291cmNlcy5tZXNzYWdlcy5tZXRhLm5leHRfcGFnZV9yb3V0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnRocmVhZC50aHJlYWRfaGlzdG9yeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLmhpc3RvcnlfaWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLmhpc3Rvcnlfcm91dGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50cyA9IGRhdGEucmVzb3VyY2VzLmhhc093blByb3BlcnR5KCdwYXJ0aWNpcGFudHMnKSA/IGRhdGEucmVzb3VyY2VzLnBhcnRpY2lwYW50cy5kYXRhIDogW107XG4gICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV9jb250YWluZXIuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkucmVuZGVyX2dyb3VwKGRhdGEpKTtcbiAgICAgICAgICAgIGlmKCFub0hpc3RvcnkpIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7dHlwZSA6IDIsIHRocmVhZF9pZCA6IGRhdGEuaWR9LCBudWxsLCBNZXNzZW5nZXIuY29tbW9uKCkuV0VCICsgJy8nK2RhdGEuaWQpO1xuICAgICAgICAgICAgb3B0LnRocmVhZC5jcmVhdGVkX2F0ID0gZGF0YS5jcmVhdGVkX2F0O1xuICAgICAgICAgICAgb3B0LnRocmVhZC5tdXRlZCA9IGRhdGEub3B0aW9ucy5tdXRlZDtcbiAgICAgICAgICAgIG9wdC50aHJlYWQuX3RocmVhZCA9IGRhdGE7XG4gICAgICAgICAgICBtb3VudGVkLkluaXRpYWxpemUoe1xuICAgICAgICAgICAgICAgIHR5cGUgOiBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgICAgdGhyZWFkX2lkIDogZGF0YS5pZCxcbiAgICAgICAgICAgICAgICB0X25hbWUgOiBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgY2FuX2NhbGwgOiBkYXRhLm9wdGlvbnMuY2FsbCxcbiAgICAgICAgICAgICAgICBhZG1pbiA6IGRhdGEub3B0aW9ucy5hZG1pbixcbiAgICAgICAgICAgICAgICBtZXNzYWdpbmcgOiBkYXRhLm9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBsb2Nrb3V0IDogZGF0YS5sb2NrZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVUaHJlYWQoZGF0YSwgdHJ1ZSwgZmFsc2UsICgnbmV3JyBpbiBhcmcpKVxuICAgICAgICB9LFxuICAgICAgICBtYW5hZ2VNZXNzZW5nZXJTZWFyY2ggOiBmdW5jdGlvbihzZWFyY2gpe1xuICAgICAgICAgICAgaWYob3B0LnRocmVhZC50eXBlICE9PSA3KSByZXR1cm47XG4gICAgICAgICAgICBpZighc2VhcmNoLmRhdGEubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2VuZ2VyX3NlYXJjaF9yZXN1bHRzLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9lbXB0eV9zZWFyY2godHJ1ZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzZW5nZXJfc2VhcmNoX3Jlc3VsdHMuaHRtbCgnJyk7XG4gICAgICAgICAgICBzZWFyY2guZGF0YS5mb3JFYWNoKChwcm9maWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3Nlbmdlcl9zZWFyY2hfcmVzdWx0cy5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm1lc3Nlbmdlcl9zZWFyY2gocHJvZmlsZSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIExhenlJbWFnZXMudXBkYXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbGVEcmFnRHJvcCA6IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgbGV0IGlzRmlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLml0ZW1zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyLml0ZW1zW2ldLmtpbmQgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYoIWlzRmlsZSgpKSByZXR1cm47XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaWYoIVsxLDJdLmluY2x1ZGVzKG9wdC50aHJlYWQudHlwZSkgfHwgIW9wdC50aHJlYWQuaWQgfHwgb3B0LnRocmVhZC5sb2Nrb3V0IHx8ICFvcHQudGhyZWFkLm1lc3NhZ2luZykgcmV0dXJuO1xuICAgICAgICAgICAgaWYoWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5pbmNsdWRlcyhlLnR5cGUpKXtcbiAgICAgICAgICAgICAgICBpZihvcHQudGltZXJzLmRyYWdfZHJvcF9vdmVybGF5X2hpZGUpIGNsZWFyVGltZW91dChvcHQudGltZXJzLmRyYWdfZHJvcF9vdmVybGF5X2hpZGUpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5kcmFnX2Ryb3Bfem9uZS5mYWRlSW4oJ2Zhc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGUudHlwZSA9PT0gJ2RyYWdsZWF2ZScpe1xuICAgICAgICAgICAgICAgIG9wdC50aW1lcnMuZHJhZ19kcm9wX292ZXJsYXlfaGlkZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZHJhZ19kcm9wX3pvbmUuZmFkZU91dCgnZmFzdCcpXG4gICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGUudHlwZSA9PT0gJ2Ryb3AnKXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZHJhZ19kcm9wX3pvbmUuZmFkZU91dCgnZmFzdCcpO1xuICAgICAgICAgICAgICAgIGxldCBmaWxlcyA9IGUuZGF0YVRyYW5zZmVyLmZpbGVzO1xuICAgICAgICAgICAgICAgIChbLi4uZmlsZXNdKS5mb3JFYWNoKG1ldGhvZHMuc2VuZFVwbG9hZEZpbGVzKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV90ZXh0X2lucHV0LmZvY3VzKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWFuYWdlU2VuZE1lc3NhZ2VCdXR0b24gOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgbGV0IGJ0biA9ICQoXCIjaW5saW5lX3NlbmRfbXNnX2J0blwiKSwgbWVzc2FnZV9jb250ZW50cyA9IG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQudmFsKCk7XG4gICAgICAgICAgICBpZihtZXNzYWdlX2NvbnRlbnRzLnRyaW0oKS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIGlmKCFidG4ubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfdGV4dF9pbnB1dC5hZnRlcihUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuc2VuZF9tc2dfYnRuKGZhbHNlKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGJ0bi5yZW1vdmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBncm91cFNldHRpbmdzU3RhdGUgOiBmdW5jdGlvbihzZXR0aW5ncyl7XG4gICAgICAgICAgICBpZighTWVzc2VuZ2VyLmlzUHJvdmlkZXIoc2V0dGluZ3Muc2VuZGVyLnByb3ZpZGVyX2lkLCBudWxsLCBzZXR0aW5ncy5zZW5kZXIucHJvdmlkZXJfYWxpYXMpKXtcbiAgICAgICAgICAgICAgICBOb3RpZnlNYW5hZ2VyLnNvdW5kKCdub3RpZnknKTtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlIDogc2V0dGluZ3Muc2VuZGVyLm5hbWUrJyB1cGRhdGVkIHRoZSBncm91cHMgc2V0dGluZ3MuIFJlZnJlc2hpbmcgdGhlIGdyb3VwLi4uJyxcbiAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0aGVtZSA6ICdpbmZvJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBvcHQudGhyZWFkLmlkLCBmb3JjZSA6IHRydWV9KVxuICAgICAgICB9LFxuICAgICAgICBncm91cEF2YXRhclN0YXRlIDogZnVuY3Rpb24oc2V0dGluZ3Mpe1xuICAgICAgICAgICAgaWYoIU1lc3Nlbmdlci5pc1Byb3ZpZGVyKHNldHRpbmdzLnNlbmRlci5wcm92aWRlcl9pZCwgbnVsbCwgc2V0dGluZ3Muc2VuZGVyLnByb3ZpZGVyX2FsaWFzKSl7XG4gICAgICAgICAgICAgICAgTm90aWZ5TWFuYWdlci5zb3VuZCgnbm90aWZ5Jyk7XG4gICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuQWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IHNldHRpbmdzLnNlbmRlci5uYW1lKycgdXBkYXRlZCB0aGUgZ3JvdXBzIGF2YXRhci4gUmVmcmVzaGluZyB0aGUgZ3JvdXAuLi4nLFxuICAgICAgICAgICAgICAgICAgICB0b2FzdCA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRoZW1lIDogJ2luZm8nXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIExvYWRJbi5pbml0aWF0ZV90aHJlYWQoe3RocmVhZF9pZCA6IG9wdC50aHJlYWQuaWQsIGZvcmNlIDogdHJ1ZX0pXG4gICAgICAgIH0sXG4gICAgICAgIHRocmVhZFNjcm9sbEJvdHRvbSA6IGZ1bmN0aW9uKGZvcmNlLCBjaGVjayl7XG4gICAgICAgICAgICBpZighb3B0LmVsZW1lbnRzLnRoZV90aHJlYWQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0b3AgPSBvcHQuZWxlbWVudHMudGhlX3RocmVhZC5wcm9wKFwic2Nyb2xsVG9wXCIpLCBoZWlnaHQgPSBvcHQuZWxlbWVudHMudGhlX3RocmVhZC5wcm9wKFwic2Nyb2xsSGVpZ2h0XCIpLCBvZmZzZXQgPSBvcHQuZWxlbWVudHMudGhlX3RocmVhZC5wcm9wKFwib2Zmc2V0SGVpZ2h0XCIpO1xuICAgICAgICAgICAgaWYoZm9yY2UgfHwgdG9wID09PSAoaGVpZ2h0IC0gb2Zmc2V0KSB8fCAoKGhlaWdodCAtIG9mZnNldCkgLSB0b3ApIDwgMjAwKXtcbiAgICAgICAgICAgICAgICBpZighY2hlY2spIG9wdC5lbGVtZW50cy50aGVfdGhyZWFkLnNjcm9sbFRvcChoZWlnaHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNPbmxpbmUgOiBmdW5jdGlvbihzdGF0ZSwgaW5hY3Rpdml0eSl7XG4gICAgICAgICAgICBvcHQuc29ja2V0LmlzX2F3YXkgPSAoc3RhdGUgPT09IDIgJiYgaW5hY3Rpdml0eSk7XG4gICAgICAgICAgICBpZihvcHQuSU5JVCAmJiBvcHQuZWxlbWVudHMubXlfYXZhdGFyX2FyZWEubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubXlfYXZhdGFyX2FyZWEuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubXlfYXZhdGFyX3N0YXR1cygoc3RhdGUgPT09IDEgJiYgb3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgPT09IDIgPyAyIDogKHN0YXRlID09PSAxICYmIG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nID09PSAwID8gMCA6IChzdGF0ZSA9PT0gMiAmJiBvcHQuc29ja2V0Lm9ubGluZV9zdGF0dXNfc2V0dGluZyA9PT0gMCA/IDAgOiBzdGF0ZSkpKSkpO1xuICAgICAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGhvZHMuc2VuZE9ubGluZVN0YXR1cygoc3RhdGUgPT09IDEgJiYgb3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgPT09IDIgPyAyIDogc3RhdGUpKVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVPbmxpbmVTdGF0dXNTZXR0aW5nIDogZnVuY3Rpb24oc3RhdGUpe1xuICAgICAgICAgICAgb3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgPSBzdGF0ZTtcbiAgICAgICAgICAgIG1ldGhvZHMuc3RhdHVzT25saW5lKHN0YXRlLCBmYWxzZSlcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tUaHJlYWRTdG9yYWdlVW5yZWFkIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLmlkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBsZXQgdGhyZWFkID0gbWV0aG9kcy5sb2NhdGVTdG9yYWdlSXRlbSh7dHlwZSA6ICd0aHJlYWQnLCBpZCA6IG9wdC50aHJlYWQuaWR9KTtcbiAgICAgICAgICAgIHJldHVybiB0aHJlYWQuZm91bmQgJiYgb3B0LnN0b3JhZ2UudGhyZWFkc1t0aHJlYWQuaW5kZXhdLnVucmVhZDtcbiAgICAgICAgfSxcbiAgICAgICAgbWFya1JlYWQgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQgfHwgb3B0LnRocmVhZC5hd2FpdGluZ19teV9hcHByb3ZhbCB8fCAhbWV0aG9kcy50aHJlYWRTY3JvbGxCb3R0b20oZmFsc2UsIHRydWUpKSByZXR1cm47XG4gICAgICAgICAgICBvcHQudGhyZWFkLm1lc3NhZ2VzX3VucmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtc2ctY3Ruci11bnJlYWQnKTtcbiAgICAgICAgICAgIG9wdC50aHJlYWQuY2xpY2tfdG9fcmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm5ld19tc2dfYWxlcnQuaGlkZSgpO1xuICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVUaHJlYWQoe3RocmVhZF9pZCA6IG9wdC50aHJlYWQuaWR9LCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgaWYob3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoKSBtZXRob2RzLnNlZW5NZXNzYWdlKG9wdC5zdG9yYWdlLm1lc3NhZ2VzWzBdLmlkKTtcbiAgICAgICAgICAgIGxldCBydW5NYXJrUmVhZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nK29wdC50aHJlYWQuaWQrJy9tYXJrLXJlYWQnLFxuICAgICAgICAgICAgICAgICAgICBmYWlsIDogbnVsbFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYob3B0LnRpbWVycy5tYXJrX3JlYWRfdGltZW91dCl7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG9wdC50aW1lcnMubWFya19yZWFkX3RpbWVvdXQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHQudGltZXJzLm1hcmtfcmVhZF90aW1lb3V0ID0gc2V0VGltZW91dChydW5NYXJrUmVhZCwgMTAwMClcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZERhdGFUYWJsZSA6IGZ1bmN0aW9uKGVsbSwgc3BlY2lhbCl7XG4gICAgICAgICAgICBpZihvcHQuZWxlbWVudHMuZGF0YV90YWJsZSkgb3B0LmVsZW1lbnRzLmRhdGFfdGFibGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgaWYoIWVsbSB8fCAhZWxtLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYoc3BlY2lhbCl7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmRhdGFfdGFibGUgPSBlbG0uRGF0YVRhYmxlKHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImluZm9cIjogXCJTaG93aW5nIF9TVEFSVF8gdG8gX0VORF8gb2YgX1RPVEFMXyBmcmllbmRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxlbmd0aE1lbnVcIjogXCJTaG93IF9NRU5VXyBmcmllbmRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImluZm9FbXB0eVwiOiBcIlNob3dpbmcgMCB0byAwIG9mIDAgZnJpZW5kc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbmZvRmlsdGVyZWRcIjogXCIoZmlsdGVyZWQgZnJvbSBfTUFYXyB0b3RhbCBmcmllbmRzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJlbXB0eVRhYmxlXCI6IFwiTm8gZnJpZW5kcyBmb3VuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ6ZXJvUmVjb3Jkc1wiOiBcIk5vIG1hdGNoaW5nIGZyaWVuZHMgZm91bmRcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImRyYXdDYWxsYmFja1wiOiBmdW5jdGlvbihzZXR0aW5ncyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXBpID0gbmV3ICQuZm4uRGF0YVRhYmxlLkFwaShzZXR0aW5ncyksIHBhZ2luYXRpb24gPSAkKHRoaXMpLmNsb3Nlc3QoJy5kYXRhVGFibGVzX3dyYXBwZXInKS5maW5kKCcuZGF0YVRhYmxlc19wYWdpbmF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbi50b2dnbGUoYXBpLnBhZ2UuaW5mbygpLnBhZ2VzID4gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMYXp5SW1hZ2VzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInBhZ2VMZW5ndGhcIjogMTAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmRhdGFfdGFibGUgPSBlbG0uRGF0YVRhYmxlKHtcbiAgICAgICAgICAgICAgICBcImxhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmZvXCI6IFwiU2hvd2luZyBfU1RBUlRfIHRvIF9FTkRfIG9mIF9UT1RBTF8gcGFydGljaXBhbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwibGVuZ3RoTWVudVwiOiBcIlNob3cgX01FTlVfIHBhcnRpY2lwYW50c1wiLFxuICAgICAgICAgICAgICAgICAgICBcImluZm9FbXB0eVwiOiBcIlNob3dpbmcgMCB0byAwIG9mIDAgcGFydGljaXBhbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaW5mb0ZpbHRlcmVkXCI6IFwiKGZpbHRlcmVkIGZyb20gX01BWF8gdG90YWwgcGFydGljaXBhbnRzKVwiLFxuICAgICAgICAgICAgICAgICAgICBcImVtcHR5VGFibGVcIjogXCJObyBwYXJ0aWNpcGFudHMgZm91bmRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ6ZXJvUmVjb3Jkc1wiOiBcIk5vIG1hdGNoaW5nIHBhcnRpY2lwYW50cyBmb3VuZFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImRyYXdDYWxsYmFja1wiOiBmdW5jdGlvbihzZXR0aW5ncyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhcGkgPSBuZXcgJC5mbi5EYXRhVGFibGUuQXBpKHNldHRpbmdzKSwgcGFnaW5hdGlvbiA9ICQodGhpcykuY2xvc2VzdCgnLmRhdGFUYWJsZXNfd3JhcHBlcicpLmZpbmQoJy5kYXRhVGFibGVzX3BhZ2luYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb24udG9nZ2xlKGFwaS5wYWdlLmluZm8oKS5wYWdlcyA+IDEpO1xuICAgICAgICAgICAgICAgICAgICBMYXp5SW1hZ2VzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhZGRUeXBlcnMgOiBmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgICAgIGlmKCFvcHQuc3RvcmFnZS5tZXNzYWdlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIGlmKHVzZXIucHJvdmlkZXJfYWxpYXMgPT09ICdib3QnKXtcbiAgICAgICAgICAgICAgICBtZXRob2RzLmFkZEJvdFR5cGVycyh1c2VyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdGltZSA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgZmluZCA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAndHlwaW5nJywgaWQgOiB1c2VyLnByb3ZpZGVyX2lkfSk7XG4gICAgICAgICAgICBpZighZmluZC5mb3VuZCl7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2Uud2hvX3R5cGluZy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQgOiB1c2VyLnByb3ZpZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBhbGlhcyA6IHVzZXIucHJvdmlkZXJfYWxpYXMsXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhciA6IHVzZXIuYXZhdGFyLFxuICAgICAgICAgICAgICAgICAgICBuYW1lIDogdXNlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB0aW1lIDogdGltZS5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS53aG9fdHlwaW5nLmZvckVhY2goKHVzZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoISQoXCIjdHlwaW5nX1wiK3VzZXIuaWQpLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzLnVwZGF0ZUJvYmJsZUhlYWQodXNlci5pZCwgbnVsbClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbWV0aG9kcy5kcmF3Qm9iYmxlSGVhZHMoKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5zdG9yYWdlLndob190eXBpbmdbZmluZC5pbmRleF0udGltZSA9IHRpbWUuZ2V0VGltZSgpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRCb3RUeXBlcnMgOiBmdW5jdGlvbihib3Qpe1xuICAgICAgICAgICAgbGV0IHRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgbGV0IGZpbmQgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ2JvdC10eXBpbmcnLCBpZCA6IGJvdC5wcm92aWRlcl9pZH0pO1xuICAgICAgICAgICAgaWYoIWZpbmQuZm91bmQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLmJvdF90eXBpbmcucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlkIDogYm90LnByb3ZpZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBhbGlhcyA6IGJvdC5wcm92aWRlcl9hbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyIDogYm90LmF2YXRhcixcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA6IGJvdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB0aW1lIDogdGltZS5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLmRyYXdCb3RUeXBpbmdCb2JibGVIZWFkcygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5zdG9yYWdlLmJvdF90eXBpbmdbZmluZC5pbmRleF0udGltZSA9IHRpbWUuZ2V0VGltZSgpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVUeXBlcnMgOiBmdW5jdGlvbih1c2VyKXtcbiAgICAgICAgICAgIHVzZXIgPSB1c2VyIHx8IG51bGw7XG4gICAgICAgICAgICBsZXQgdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBpZih1c2VyKXtcbiAgICAgICAgICAgICAgICBsZXQgZmluZCA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAndHlwaW5nJywgaWQgOiB1c2VyLnByb3ZpZGVyX2lkfSk7XG4gICAgICAgICAgICAgICAgaWYoZmluZC5mb3VuZCl7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLndob190eXBpbmcuc3BsaWNlKGZpbmQuaW5kZXgsIDEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ldGhvZHMudXBkYXRlQm9iYmxlSGVhZCh1c2VyLnByb3ZpZGVyX2lkLCBvcHQuc3RvcmFnZS5tZXNzYWdlc1sob3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoLTEpXS5tZXNzYWdlX2lkKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLmRyYXdCb2JibGVIZWFkcygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG9wdC5zdG9yYWdlLndob190eXBpbmcubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS53aG9fdHlwaW5nLmZvckVhY2goKHVzZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCgodGltZS5nZXRUaW1lKCkgLSB1c2VyLnRpbWUpIC8gMTAwMCkgPiAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLndob190eXBpbmcuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMudXBkYXRlQm9iYmxlSGVhZCh1c2VyLmlkLCBvcHQuc3RvcmFnZS5tZXNzYWdlc1sob3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoLTEpXS5tZXNzYWdlX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuZHJhd0JvYmJsZUhlYWRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYob3B0LnN0b3JhZ2UuYm90X3R5cGluZy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucmVtb3ZlQm90VHlwZXJzKHRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoJy50eXBpbmctZWxsaXBzaXMnKS5yZW1vdmUoKVxuICAgICAgICB9LFxuICAgICAgICByZW1vdmVCb3RUeXBlcnMgOiBmdW5jdGlvbih0aW1lKXtcbiAgICAgICAgICAgIG9wdC5zdG9yYWdlLmJvdF90eXBpbmcuZm9yRWFjaCgoYm90LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKCgodGltZS5nZXRUaW1lKCkgLSBib3QudGltZSkgLyAxMDAwKSA+IDMpe1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5ib3RfdHlwaW5nLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZXRob2RzLmRyYXdCb3RUeXBpbmdCb2JibGVIZWFkcygpO1xuICAgICAgICB9LFxuICAgICAgICBwdXJnZU1lc3NhZ2UgOiBmdW5jdGlvbihpZCl7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAnbWVzc2FnZScsIGlkIDogaWR9KSwgaSA9IG1lc3NhZ2UuaW5kZXg7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5mb3VuZCl7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0aG9kcy5pbWFnZUxvYWRMaXN0ZW5lcihmYWxzZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHByaXZhdGVNYWluQm9iYmxlRHJhdyA6IGZ1bmN0aW9uKGlkKXtcbiAgICAgICAgICAgIGxldCBib2JibGUgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ2JvYmJsZScsIGlkIDogaWR9KSxcbiAgICAgICAgICAgIHN0YXR1cyA9ICQoXCIjbWFpbl9ib2JibGVfXCIraWQpO1xuICAgICAgICAgICAgaWYoIXN0YXR1cy5sZW5ndGggfHwgIWJvYmJsZS5mb3VuZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3RhdHVzLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9wcml2YXRlX2hlYWRlcl9ib2JibGUob3B0LnN0b3JhZ2UucGFydGljaXBhbnRzW2JvYmJsZS5pbmRleF0ub3duZXIpKTtcbiAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChvcHQudGltZXJzLnByaXZhdGVfYm9iYmxlX3JlZnJlc2hfdGltZW91dCk7XG4gICAgICAgICAgICBpZihvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbYm9iYmxlLmluZGV4XS5vd25lci5vcHRpb25zLm9ubGluZV9zdGF0dXMgPT09IDApe1xuICAgICAgICAgICAgICAgIG9wdC50aW1lcnMucHJpdmF0ZV9ib2JibGVfcmVmcmVzaF90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzLnByaXZhdGVNYWluQm9iYmxlRHJhdyhpZClcbiAgICAgICAgICAgICAgICB9LCAyMDAwMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZHJhd0JvdFR5cGluZ0JvYmJsZUhlYWRzIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQoXCIuYm90LWJvYmJsZS1oZWFkXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgb3B0LnN0b3JhZ2UuYm90X3R5cGluZy5mb3JFYWNoKChib3QpID0+IHtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuc2Vlbl9ieV9maW5hbC5wcmVwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5ib3RfdHlwaW5nX2JvYmJsZV9oZWFkKGJvdCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRyYXdCb2JibGVIZWFkcyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZighb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzLmxlbmd0aCB8fCAhb3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmlzUHJvdmlkZXIodmFsdWUub3duZXJfaWQsIHZhbHVlLm93bmVyX3R5cGUpIHx8ICF2YWx1ZS5sYXN0X3JlYWQubWVzc2FnZV9pZCB8fCAoJ2FkZGVkJyBpbiB2YWx1ZSAmJiB2YWx1ZS5hZGRlZCkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAkKFwiLmJvYmJsZV9oZWFkX1wiK3ZhbHVlLm93bmVyX2lkKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICQoXCIjbWVzc2FnZV9cIit2YWx1ZS5sYXN0X3JlYWQubWVzc2FnZV9pZCk7XG4gICAgICAgICAgICAgICAgaWYoKHZhbHVlLmNhdWdodF91cCAmJiB2YWx1ZS50eXBpbmcpIHx8IChvcHQuc3RvcmFnZS5tZXNzYWdlc1swXS5pZCA9PT0gdmFsdWUubGFzdF9yZWFkLm1lc3NhZ2VfaWQpKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnNlZW5fYnlfZmluYWwucHJlcGVuZChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuYm9iYmxlX2hlYWQodmFsdWUsIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuYWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5jYXVnaHRfdXAgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYobWVzc2FnZS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBpZighbWVzc2FnZS5uZXh0KCkuaGFzQ2xhc3MoJ3NlZW4tYnknKSkgbWVzc2FnZS5hZnRlcihUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuc2Vlbl9ieSh2YWx1ZS5sYXN0X3JlYWQubWVzc2FnZV9pZCkpO1xuICAgICAgICAgICAgICAgICAgICAkKFwiI3NlZW4tYnlfXCIrdmFsdWUubGFzdF9yZWFkLm1lc3NhZ2VfaWQpLnByZXBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmJvYmJsZV9oZWFkKHZhbHVlLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5hZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmNhdWdodF91cCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQudHlwZSA9PT0gMSl7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucHJpdmF0ZU1haW5Cb2JibGVEcmF3KHZhbHVlLm93bmVyX2lkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJChcIi5zZWVuLWJ5XCIpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpZighJCh0aGlzKS5jaGlsZHJlbigpLmxlbmd0aCkgJCh0aGlzKS5yZW1vdmUoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZXRob2RzLnRocmVhZFNjcm9sbEJvdHRvbShmYWxzZSwgZmFsc2UpXG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUJvYmJsZUhlYWQgOiBmdW5jdGlvbihvd25lciwgbWVzc2FnZSl7XG4gICAgICAgICAgICBsZXQgdHlwaW5nID0gbWV0aG9kcy5sb2NhdGVTdG9yYWdlSXRlbSh7dHlwZSA6ICd0eXBpbmcnLCBpZCA6IG93bmVyfSksXG4gICAgICAgICAgICBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYobWVzc2FnZSA9PT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgaWYodHlwaW5nLmZvdW5kICYmIG9wdC5zdG9yYWdlLm1lc3NhZ2VzLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBvcHQuc3RvcmFnZS5tZXNzYWdlc1swXS5pZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IobGV0IHggPSAwOyB4IDwgb3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdC5zdG9yYWdlLmFjdGl2ZV9wcm9maWxlc1t4XS5wcm92aWRlcl9pZCA9PT0gb3duZXIpe1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBib2JibGUgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ2JvYmJsZScsIGlkIDogb3duZXJ9KSwgaSA9IGJvYmJsZS5pbmRleDtcbiAgICAgICAgICAgIGlmIChib2JibGUuZm91bmQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50c1tpXS5sYXN0X3JlYWQubWVzc2FnZV9pZCA9IChtZXNzYWdlID8gbWVzc2FnZSA6IG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50c1tpXS5sYXN0X3JlYWQubWVzc2FnZV9pZCk7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzW2ldLmFkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzW2ldLnR5cGluZyA9IHR5cGluZy5mb3VuZDtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0uY2F1Z2h0X3VwID0gKHR5cGluZy5mb3VuZCA/IHRydWUgOiBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0uY2F1Z2h0X3VwKTtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0uaW5fY2hhdCA9ICh0eXBpbmcuZm91bmQgfHwgZm91bmQpO1xuICAgICAgICAgICAgICAgIGlmKHR5cGluZy5mb3VuZCl7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50c1tpXS5vd25lci5vcHRpb25zLm9ubGluZV9zdGF0dXMgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKFwiLmJvYmJsZV9oZWFkX1wiK293bmVyKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAkKFwiLnNlZW4tYnlcIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZighJCh0aGlzKS5jaGlsZHJlbigpLmxlbmd0aCkgJCh0aGlzKS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjaGVja1JlY2VudEJvYmJsZUhlYWRzIDogZnVuY3Rpb24ocmVsb2FkKXtcbiAgICAgICAgICAgIGlmKHJlbG9hZCl7XG4gICAgICAgICAgICAgICAgTG9hZEluLmJvYmJsZUhlYWRzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0uY2F1Z2h0X3VwICYmICFvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0udHlwaW5nICYmIG9wdC5zdG9yYWdlLm1lc3NhZ2VzWzBdLmlkICE9PSBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0ubGFzdF9yZWFkLm1lc3NhZ2VfaWQpe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzLnVwZGF0ZUJvYmJsZUhlYWQob3B0LnN0b3JhZ2UucGFydGljaXBhbnRzW2ldLm93bmVyX2lkLCBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0ubGFzdF9yZWFkLm1lc3NhZ2VfaWQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0aG9kcy5kcmF3Qm9iYmxlSGVhZHMoKVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVBY3RpdmVQcm9maWxlIDogZnVuY3Rpb24ob3duZXIsIGFjdGlvbil7XG4gICAgICAgICAgICBpZihhY3Rpb24gPT09IDMpe1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBvcHQuc3RvcmFnZS5hY3RpdmVfcHJvZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5zdG9yYWdlLmFjdGl2ZV9wcm9maWxlc1tpXS5wcm92aWRlcl9pZCA9PT0gb3duZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGJvYmJsZSA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAnYm9iYmxlJywgaWQgOiBvd25lcn0pLCB6ID0gYm9iYmxlLmluZGV4O1xuICAgICAgICAgICAgICAgIGlmKGJvYmJsZS5mb3VuZCl7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50c1t6XS5vd25lci5vcHRpb25zLm9ubGluZV9zdGF0dXMgPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZXRob2RzLnVwZGF0ZUJvYmJsZUhlYWQob3duZXIsIG51bGwpO1xuICAgICAgICAgICAgbWV0aG9kcy5kcmF3Qm9iYmxlSGVhZHMoKTtcbiAgICAgICAgICAgIGlmKGFjdGlvbiA9PT0gMyAmJiBvcHQudGhyZWFkLnR5cGUgPT09IDEpIHNldFRpbWVvdXQoTG9hZEluLmJvYmJsZUhlYWRzLCA2MDAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2VMb2FkTGlzdGVuZXIgOiBmdW5jdGlvbihzY3JvbGwpe1xuICAgICAgICAgICAgbGV0IGltYWdlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21zZ19pbWFnZScpLFxuICAgICAgICAgICAgZW1vamlzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnam95cGl4ZWxzJyksXG4gICAgICAgICAgICBsb2FkSW1hZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICQoZS50YXJnZXQpLnNpYmxpbmdzKCcuc3Bpbm5lci1ncm93JykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgJChlLnRhcmdldCkucmVtb3ZlQ2xhc3MoJ21zZ19pbWFnZSBOUycpO1xuICAgICAgICAgICAgICAgIGlmKHNjcm9sbCkgbWV0aG9kcy50aHJlYWRTY3JvbGxCb3R0b20odHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmKGUudHlwZSA9PT0gJ2Vycm9yJyl7XG4gICAgICAgICAgICAgICAgICAgICQoZS50YXJnZXQpLnJlcGxhY2VXaXRoKCc8c3BhbiBjbGFzcz1cImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2UtZGFuZ2VyXCI+SW1hZ2UgZmFpbGVkIHRvIGxvYWQuPC9zcGFuPicpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvYWRFbW9qaSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYoc2Nyb2xsKSBtZXRob2RzLnRocmVhZFNjcm9sbEJvdHRvbSh0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYoZS50eXBlID09PSAnZXJyb3InKSAkKGUudGFyZ2V0KS5yZW1vdmUoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbCggaW1hZ2VzLCBmdW5jdGlvbiggaW1nICkge1xuICAgICAgICAgICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGxvYWRJbWFnZSwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgbG9hZEltYWdlLCBmYWxzZSApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoIGVtb2ppcywgZnVuY3Rpb24oIGltZyApIHtcbiAgICAgICAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBsb2FkRW1vamksIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoICdlcnJvcicsIGxvYWRFbW9qaSwgZmFsc2UgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtYW5hZ2VSZWNlbnRNZXNzYWdlcyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZXNfaHRtbCA9ICcnO1xuICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXMucmV2ZXJzZSgpLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSl7XG4gICAgICAgICAgICAgICAgaWYodmFsdWUuc3lzdGVtX21lc3NhZ2Upe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc19odG1sICs9IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5zeXN0ZW1fbWVzc2FnZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmlzUHJvdmlkZXIodmFsdWUub3duZXJfaWQsIHZhbHVlLm93bmVyX3R5cGUpKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoa2V5ICE9PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBvcHQuc3RvcmFnZS5tZXNzYWdlc1trZXktMV0ub3duZXJfaWQgPT09IHZhbHVlLm93bmVyX2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBvcHQuc3RvcmFnZS5tZXNzYWdlc1trZXktMV0ub3duZXJfdHlwZSA9PT0gdmFsdWUub3duZXJfdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgISBvcHQuc3RvcmFnZS5tZXNzYWdlc1trZXktMV0uc3lzdGVtX21lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICEgdmFsdWUuaGFzT3duUHJvcGVydHkoJ3JlcGx5X3RvJylcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIE1lc3Nlbmdlci5mb3JtYXQoKS50aW1lRGlmZkluVW5pdCh2YWx1ZS5jcmVhdGVkX2F0LCBvcHQuc3RvcmFnZS5tZXNzYWdlc1trZXktMV0uY3JlYXRlZF9hdCwgJ20nKSA8IDMwXG4gICAgICAgICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc19odG1sICs9IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5teV9tZXNzYWdlX2dyb3VwZWQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlLmhhc093blByb3BlcnR5KCdyZXBseV90bycpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzX2h0bWwgKz0gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X21lc3NhZ2VfcmVwbHkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzX2h0bWwgKz0gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X21lc3NhZ2UodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGtleSAhPT0gMFxuICAgICAgICAgICAgICAgICAgICAmJiBvcHQuc3RvcmFnZS5tZXNzYWdlc1trZXktMV0ub3duZXJfaWQgPT09IHZhbHVlLm93bmVyX2lkXG4gICAgICAgICAgICAgICAgICAgICYmIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2tleS0xXS5vd25lcl90eXBlID09PSB2YWx1ZS5vd25lcl90eXBlXG4gICAgICAgICAgICAgICAgICAgICYmICEgb3B0LnN0b3JhZ2UubWVzc2FnZXNba2V5LTFdLnN5c3RlbV9tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICYmICEgdmFsdWUuaGFzT3duUHJvcGVydHkoJ3JlcGx5X3RvJylcbiAgICAgICAgICAgICAgICAgICAgJiYgTWVzc2VuZ2VyLmZvcm1hdCgpLnRpbWVEaWZmSW5Vbml0KHZhbHVlLmNyZWF0ZWRfYXQsIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2tleS0xXS5jcmVhdGVkX2F0LCAnbScpIDwgMzBcbiAgICAgICAgICAgICAgICApe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc19odG1sICs9IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5tZXNzYWdlX2dyb3VwZWQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHZhbHVlLmhhc093blByb3BlcnR5KCdyZXBseV90bycpKXtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNfaHRtbCArPSBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZV9yZXBseSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWVzc2FnZXNfaHRtbCArPSBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZSh2YWx1ZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19zdGFjay5hcHBlbmQobWVzc2FnZXNfaHRtbCk7XG4gICAgICAgICAgICBvcHQuc3RvcmFnZS5tZXNzYWdlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICBtZXRob2RzLmltYWdlTG9hZExpc3RlbmVyKHRydWUpO1xuICAgICAgICAgICAgbWV0aG9kcy5kcmF3Qm9iYmxlSGVhZHMoKTtcbiAgICAgICAgICAgIG1ldGhvZHMudGhyZWFkU2Nyb2xsQm90dG9tKHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLnRocmVhZF9oaXN0b3J5KXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubXNnX3N0YWNrLnByZXBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmVuZF9vZl9oaXN0b3J5KG9wdC50aHJlYWQuY3JlYXRlZF9hdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtYW5hZ2VIaXN0b3J5TWVzc2FnZXMgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICQoXCIjbG9hZGluZ19oaXN0b3J5X21hcmtlclwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlcyA9IGRhdGEuZGF0YS5maWx0ZXIoZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgICAgICAgIHJldHVybiAhIG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAnbWVzc2FnZScsIGlkIDp2YWx1ZS5pZCB9KS5mb3VuZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGxhc3RfbWVzc2FnZSA9IG9wdC5zdG9yYWdlLm1lc3NhZ2VzLmxlbmd0aCA/IG9wdC5zdG9yYWdlLm1lc3NhZ2VzW29wdC5zdG9yYWdlLm1lc3NhZ2VzLmxlbmd0aC0xXSA6IG51bGw7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZXNfaHRtbCA9ICcnO1xuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5tZXNzYWdlcy5wdXNoKHZhbHVlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZXNzYWdlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpe1xuICAgICAgICAgICAgICAgIGlmKHZhbHVlLnN5c3RlbV9tZXNzYWdlKXtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNfaHRtbCArPSBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuc3lzdGVtX21lc3NhZ2UodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKE1lc3Nlbmdlci5pc1Byb3ZpZGVyKHZhbHVlLm93bmVyX2lkLCB2YWx1ZS5vd25lcl90eXBlKSl7XG4gICAgICAgICAgICAgICAgICAgIGlmKGtleSAhPT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWVzc2FnZXNba2V5LTFdLm93bmVyX2lkID09PSB2YWx1ZS5vd25lcl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWVzc2FnZXNba2V5LTFdLm93bmVyX3R5cGUgPT09IHZhbHVlLm93bmVyX3R5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICEgbWVzc2FnZXNba2V5LTFdLnN5c3RlbV9tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiAhIHZhbHVlLmhhc093blByb3BlcnR5KCdyZXBseV90bycpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBNZXNzZW5nZXIuZm9ybWF0KCkudGltZURpZmZJblVuaXQodmFsdWUuY3JlYXRlZF9hdCwgbWVzc2FnZXNba2V5LTFdLmNyZWF0ZWRfYXQsICdtJykgPCAzMFxuICAgICAgICAgICAgICAgICAgICApe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNfaHRtbCArPSBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubXlfbWVzc2FnZV9ncm91cGVkKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgncmVwbHlfdG8nKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc19odG1sICs9IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5teV9tZXNzYWdlX3JlcGx5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc19odG1sICs9IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5teV9tZXNzYWdlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihrZXkgIT09IDBcbiAgICAgICAgICAgICAgICAgICAgJiYgbWVzc2FnZXNba2V5LTFdLm93bmVyX2lkID09PSB2YWx1ZS5vd25lcl9pZFxuICAgICAgICAgICAgICAgICAgICAmJiBtZXNzYWdlc1trZXktMV0ub3duZXJfdHlwZSA9PT0gdmFsdWUub3duZXJfdHlwZVxuICAgICAgICAgICAgICAgICAgICAmJiAhIG1lc3NhZ2VzW2tleS0xXS5zeXN0ZW1fbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAmJiAhIHZhbHVlLmhhc093blByb3BlcnR5KCdyZXBseV90bycpXG4gICAgICAgICAgICAgICAgICAgICYmIE1lc3Nlbmdlci5mb3JtYXQoKS50aW1lRGlmZkluVW5pdCh2YWx1ZS5jcmVhdGVkX2F0LCBtZXNzYWdlc1trZXktMV0uY3JlYXRlZF9hdCwgJ20nKSA8IDMwXG4gICAgICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNfaHRtbCArPSBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZV9ncm91cGVkKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgncmVwbHlfdG8nKSl7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzX2h0bWwgKz0gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm1lc3NhZ2VfcmVwbHkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzX2h0bWwgKz0gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm1lc3NhZ2UodmFsdWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfc3RhY2sucHJlcGVuZChtZXNzYWdlc19odG1sKTtcbiAgICAgICAgICAgIGlmKG1lc3NhZ2VzLmxlbmd0aFxuICAgICAgICAgICAgICAgICYmIGxhc3RfbWVzc2FnZSAhPT0gbnVsbFxuICAgICAgICAgICAgICAgICYmICEgbGFzdF9tZXNzYWdlLnN5c3RlbV9tZXNzYWdlXG4gICAgICAgICAgICAgICAgJiYgISBtZXNzYWdlc1ttZXNzYWdlcy5sZW5ndGgtMV0uc3lzdGVtX21lc3NhZ2VcbiAgICAgICAgICAgICAgICAmJiAhIGxhc3RfbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eSgncmVwbHlfdG8nKVxuICAgICAgICAgICAgICAgICYmICEgbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoLTFdLmhhc093blByb3BlcnR5KCdyZXBseV90bycpXG4gICAgICAgICAgICAgICAgJiYgbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoLTFdLm93bmVyX2lkID09PSBsYXN0X21lc3NhZ2Uub3duZXJfaWRcbiAgICAgICAgICAgICAgICAmJiBtZXNzYWdlc1ttZXNzYWdlcy5sZW5ndGgtMV0ub3duZXJfdHlwZSA9PT0gbGFzdF9tZXNzYWdlLm93bmVyX3R5cGUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VfaHRtbCA9IE1lc3Nlbmdlci5pc1Byb3ZpZGVyKGxhc3RfbWVzc2FnZS5vd25lcl9pZCwgbGFzdF9tZXNzYWdlLm93bmVyX3R5cGUpXG4gICAgICAgICAgICAgICAgICAgID8gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X21lc3NhZ2VfZ3JvdXBlZChsYXN0X21lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgIDogVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm1lc3NhZ2VfZ3JvdXBlZChsYXN0X21lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfc3RhY2suZmluZChcIiNtZXNzYWdlX1wiK2xhc3RfbWVzc2FnZS5pZCkucmVwbGFjZVdpdGgocmVwbGFjZV9odG1sKVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihvcHQuZWxlbWVudHMudGhlX3RocmVhZC5wcm9wKFwic2Nyb2xsVG9wXCIpID09PSAwKXtcbiAgICAgICAgICAgICAgICBpZihvcHQuc3RvcmFnZS5tZXNzYWdlcy5sZW5ndGggJiYgb3B0LnN0b3JhZ2UubWVzc2FnZXNbb3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoLTFdLmlkICE9PSBkYXRhLm1ldGEucGFnZV9pZCl7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlXycrZGF0YS5tZXRhLnBhZ2VfaWQpLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtc2dfdGhyZWFkXycrb3B0LnRocmVhZC5pZCkuc2Nyb2xsVG9wIC09IDQwO1xuICAgICAgICAgICAgICAgICAgICBpZihNZXNzZW5nZXIuY29tbW9uKCkubW9iaWxlKSB3aW5kb3cuc2Nyb2xsVG8oMCwgMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBvcHQuZWxlbWVudHMudGhlX3RocmVhZC5zY3JvbGxUb3AoNDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0aG9kcy5pbWFnZUxvYWRMaXN0ZW5lcihmYWxzZSk7XG4gICAgICAgICAgICBtZXRob2RzLmRyYXdCb2JibGVIZWFkcygpO1xuICAgICAgICAgICAgaWYoIW1lc3NhZ2VzLmxlbmd0aCB8fCBkYXRhLm1ldGEuZmluYWxfcGFnZSl7XG4gICAgICAgICAgICAgICAgb3B0LnRocmVhZC50aHJlYWRfaGlzdG9yeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuaGlzdG9yeV9yb3V0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgb3B0LnRocmVhZC5oaXN0b3J5X2lkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubXNnX3N0YWNrLnByZXBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmVuZF9vZl9oaXN0b3J5KG9wdC50aHJlYWQuY3JlYXRlZF9hdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBvcHQudGhyZWFkLmhpc3Rvcnlfcm91dGUgPSBkYXRhLm1ldGEubmV4dF9wYWdlX3JvdXRlO1xuICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuaGlzdG9yeV9pZCA9IGRhdGEubWV0YS5uZXh0X3BhZ2VfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHQudGhyZWFkLmhpc3RvcnlfbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgUGFnZUxpc3RlbmVycy5saXN0ZW4oKS50b29sdGlwcygpXG4gICAgICAgIH0sXG4gICAgICAgIGluaXRpYWxpemVSZWNlbnRNZXNzYWdlcyA6IGZ1bmN0aW9uKHJlc2V0KSB7XG4gICAgICAgICAgICBsZXQgb25Mb2FkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXMgPSBkYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGEubWV0YS5maW5hbF9wYWdlKSBvcHQudGhyZWFkLnRocmVhZF9oaXN0b3J5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tc2dfc3RhY2suaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5tYW5hZ2VSZWNlbnRNZXNzYWdlcygpO1xuICAgICAgICAgICAgICAgIGlmKG9wdC5zdG9yYWdlLnBlbmRpbmdfbWVzc2FnZXMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UucGVuZGluZ19tZXNzYWdlcy5mb3JFYWNoKG1ldGhvZHMuYWRkTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBlbmRpbmdfbWVzc2FnZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5tYXJrUmVhZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZighb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzLmxlbmd0aCkgTG9hZEluLmJvYmJsZUhlYWRzKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZighcmVzZXQgJiYgb3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBvbkxvYWQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBvcHQuc3RhdGVzLmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd0aHJlYWRzLycrb3B0LnRocmVhZC5pZCsnL21lc3NhZ2VzJyxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IG9uTG9hZCxcbiAgICAgICAgICAgICAgICAgICAgZmFpbCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuc3RhdGVzLmxvYWRfaW5fcmV0cmllcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYob3B0LnN0YXRlcy5sb2FkX2luX3JldHJpZXMgPiA0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubXNnX3N0YWNrLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLkFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZSA6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnV2UgY291bGQgbm90IGxvYWQgaW4geW91ciBtZXNzYWdlcyBhdCB0aGlzIHRpbWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5pbml0aWFsaXplUmVjZW50TWVzc2FnZXMoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRIaXN0b3J5IDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jayB8fCBvcHQudGhyZWFkLmhpc3RvcnlfbG9hZGluZyB8fCAhb3B0LnRocmVhZC50aHJlYWRfaGlzdG9yeSB8fCAhb3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICBvcHQuc3RhdGVzLmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgb3B0LnRocmVhZC5oaXN0b3J5X2xvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19zdGFjay5wcmVwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5sb2FkaW5nX2hpc3RvcnkoKSk7XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBvcHQudGhyZWFkLmhpc3Rvcnlfcm91dGUsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IG1ldGhvZHMubWFuYWdlSGlzdG9yeU1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgIGZhaWwgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKFwiI2xvYWRpbmdfaGlzdG9yeV9tYXJrZXJcIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBieXBhc3MgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBpc1R5cGluZyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgaWYob3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgPT09IDEgJiYgb3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLmxlbmd0aCAmJiBvcHQuc29ja2V0LmNoYXQgJiYgKCh0aW1lLmdldFRpbWUoKSAtIG9wdC5zb2NrZXQuc2VuZF90eXBpbmcpIC8gMTAwMCkgPiAxLjUpe1xuICAgICAgICAgICAgICAgIG9wdC5zb2NrZXQuc2VuZF90eXBpbmcgPSB0aW1lLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICBvcHQuc29ja2V0LmNoYXQud2hpc3BlcigndHlwaW5nJywge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcl9pZDogTWVzc2VuZ2VyLmNvbW1vbigpLnByb3ZpZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcl9hbGlhcyA6IE1lc3Nlbmdlci5jb21tb24oKS5wcm92aWRlcl9hbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogTWVzc2VuZ2VyLmNvbW1vbigpLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhciA6IE1lc3Nlbmdlci5jb21tb24oKS5hdmF0YXJfc20sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0b3BUeXBpbmcgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYob3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgPT09IDEgJiYgb3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLmxlbmd0aCAmJiBvcHQuc29ja2V0LmNoYXQgJiYgb3B0LnNvY2tldC5zZW5kX3R5cGluZyA+IDApe1xuICAgICAgICAgICAgICAgIG9wdC5zb2NrZXQuc2VuZF90eXBpbmcgPSAwO1xuICAgICAgICAgICAgICAgIG9wdC5zb2NrZXQuY2hhdC53aGlzcGVyKCdzdG9wLXR5cGluZycsIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJfaWQ6IE1lc3Nlbmdlci5jb21tb24oKS5wcm92aWRlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJfYWxpYXMgOiBNZXNzZW5nZXIuY29tbW9uKCkucHJvdmlkZXJfYWxpYXMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IE1lc3Nlbmdlci5jb21tb24oKS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBhdmF0YXIgOiBNZXNzZW5nZXIuY29tbW9uKCkuYXZhdGFyX3NtLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZWVuTWVzc2FnZSA6IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgaWYob3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLmxlbmd0aCAmJiBvcHQuc29ja2V0LmNoYXQpe1xuICAgICAgICAgICAgICAgIG9wdC5zb2NrZXQuY2hhdC53aGlzcGVyKCdyZWFkJywge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcl9pZDogTWVzc2VuZ2VyLmNvbW1vbigpLnByb3ZpZGVyX2lkLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcl9hbGlhcyA6IE1lc3Nlbmdlci5jb21tb24oKS5wcm92aWRlcl9hbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyIDogTWVzc2VuZ2VyLmNvbW1vbigpLmF2YXRhcl9zbSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV9pZCA6IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2VuZE9ubGluZVN0YXR1cyA6IGZ1bmN0aW9uKHN0YXR1cyl7XG4gICAgICAgICAgICBpZighb3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLmxlbmd0aCB8fCAhb3B0LnNvY2tldC5jaGF0KSByZXR1cm47XG4gICAgICAgICAgICBvcHQuc29ja2V0LmNoYXQud2hpc3Blcignb25saW5lJywge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyX2lkOiBNZXNzZW5nZXIuY29tbW9uKCkucHJvdmlkZXJfaWQsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJfYWxpYXMgOiBNZXNzZW5nZXIuY29tbW9uKCkucHJvdmlkZXJfYWxpYXMsXG4gICAgICAgICAgICAgICAgbmFtZTogTWVzc2VuZ2VyLmNvbW1vbigpLm5hbWUsXG4gICAgICAgICAgICAgICAgYXZhdGFyIDogTWVzc2VuZ2VyLmNvbW1vbigpLmF2YXRhcl9zbSxcbiAgICAgICAgICAgICAgICBvbmxpbmVfc3RhdHVzOiAob3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcgIT09IDAgPyBzdGF0dXMgOiAwKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgcGFzdGVJbWFnZSA6IGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQudHlwZSA9PT0gMykgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGl0ZW1zID0gKGV2ZW50LmNsaXBib2FyZERhdGEgIHx8IGV2ZW50Lm9yaWdpbmFsRXZlbnQuY2xpcGJvYXJkRGF0YSkuaXRlbXMsXG4gICAgICAgICAgICBibG9iID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbXNbaV0udHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvYiA9IGl0ZW1zW2ldLmdldEFzRmlsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChibG9iICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA6ICdsZycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVtZSA6ICdkYXJrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb24gOiAnaW1hZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3BfY3RybCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnU2VuZCBTY3JlZW5zaG90PycsXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5IDogJzxpbWcgY2xhc3M9XCJpbWctZmx1aWRcIiBzcmM9XCInK2ZpbGUrJ1wiPjxjYW52YXMgY2xhc3M9XCJOU1wiIGlkPVwicGFzdGVfY2FudmFzXCI+PC9jYW52YXM+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiX2J0bl90eHQgOiAnU2VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYl9idG5faWNvbiA6ICdjbG91ZC11cGxvYWQtYWx0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiX2J0bl90aGVtZSA6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVhZHkgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhc3RlX2NhbnZhc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXN0ZV9jYW52YXNcIikudG9CbG9iKGZ1bmN0aW9uKGJsb2Ipe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzLnNlbmRVcGxvYWRGaWxlcyhibG9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5tb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV90ZXh0X2lucHV0LmZvY3VzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnaW1hZ2UvcG5nJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZW5kTWVzc2FnZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZighb3B0LnRocmVhZC5pZCB8fCBvcHQudGhyZWFkLmxvY2tvdXQgfHwgIW9wdC50aHJlYWQubWVzc2FnaW5nKSByZXR1cm47XG4gICAgICAgICAgICBsZXQgbWVzc2FnZV9jb250ZW50cyA9IG9wdC5lbGVtZW50cy5tZXNzYWdlX3RleHRfaW5wdXQudmFsKCk7XG4gICAgICAgICAgICBpZihtZXNzYWdlX2NvbnRlbnRzLnRyaW0oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV90ZXh0X2lucHV0LnZhbCgnJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBsZXQgcGVuZGluZyA9IG1ldGhvZHMubWFrZVBlbmRpbmdNZXNzYWdlKDAsIG1lc3NhZ2VfY29udGVudHMpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMubWFuYWdlUGVuZGluZ01lc3NhZ2UoJ2FkZCcsIHBlbmRpbmcpO1xuICAgICAgICAgICAgICAgIGxldCBmb3JtRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA6IG1lc3NhZ2VfY29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBvcmFyeV9pZCA6IHBlbmRpbmcuaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQucmVwbHlpbmcpe1xuICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5yZXBseV90b19pZCA9IG9wdC50aHJlYWQucmVwbHlfdG9faWQ7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucmVzZXRSZXBseWluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgJy9tZXNzYWdlcycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5tYW5hZ2VQZW5kaW5nTWVzc2FnZSgnY29tcGxldGVkJywgcGVuZGluZywgeCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZhaWwgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5tYW5hZ2VQZW5kaW5nTWVzc2FnZSgncHVyZ2UnLCBwZW5kaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGJ5cGFzcyA6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLm1hbmFnZVNlbmRNZXNzYWdlQnV0dG9uKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2VuZFVwbG9hZEZpbGVzIDogZnVuY3Rpb24oZmlsZSwgZ2V0VHlwZSwgYXVkaW9NZXNzYWdlKXtcbiAgICAgICAgICAgIGxldCB0eXBlID0ge307XG4gICAgICAgICAgICBpZihmaWxlLnR5cGUubWF0Y2goJ2ltYWdlLionKSl7XG4gICAgICAgICAgICAgICAgdHlwZS5udW1iZXIgPSAxO1xuICAgICAgICAgICAgICAgIHR5cGUuaW5wdXQgPSAnaW1hZ2UnO1xuICAgICAgICAgICAgICAgIHR5cGUucGF0aCA9ICcvaW1hZ2VzJztcbiAgICAgICAgICAgIH0gZWxzZSBpZihmaWxlLnR5cGUubWF0Y2goJ2F1ZGlvLionKSl7XG4gICAgICAgICAgICAgICAgdHlwZS5udW1iZXIgPSAzO1xuICAgICAgICAgICAgICAgIHR5cGUuaW5wdXQgPSAnYXVkaW8nO1xuICAgICAgICAgICAgICAgIHR5cGUucGF0aCA9ICcvYXVkaW8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGZpbGUudHlwZS5tYXRjaCgndmlkZW8uKicpKXtcbiAgICAgICAgICAgICAgICB0eXBlLm51bWJlciA9IDQ7XG4gICAgICAgICAgICAgICAgdHlwZS5pbnB1dCA9ICd2aWRlbyc7XG4gICAgICAgICAgICAgICAgdHlwZS5wYXRoID0gJy92aWRlb3MnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eXBlLm51bWJlciA9IDI7XG4gICAgICAgICAgICAgICAgdHlwZS5pbnB1dCA9ICdkb2N1bWVudCc7XG4gICAgICAgICAgICAgICAgdHlwZS5wYXRoID0gJy9kb2N1bWVudHMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZ2V0VHlwZSA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUuaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcGVuZGluZyA9IG1ldGhvZHMubWFrZVBlbmRpbmdNZXNzYWdlKHR5cGUubnVtYmVyLCBudWxsKTtcbiAgICAgICAgICAgIG1ldGhvZHMubWFuYWdlUGVuZGluZ01lc3NhZ2UoJ2FkZCcsIHBlbmRpbmcpO1xuICAgICAgICAgICAgbGV0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIGlmKGF1ZGlvTWVzc2FnZSA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQodHlwZS5pbnB1dCwgZmlsZSwgJ2F1ZGlvX21lc3NhZ2Uud2VibScpO1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdleHRyYScsIEpTT04uc3RyaW5naWZ5KHthdWRpb19tZXNzYWdlIDogdHJ1ZX0pKTtcbiAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZCh0eXBlLmlucHV0LCBmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm0uYXBwZW5kKCd0ZW1wb3JhcnlfaWQnLCBwZW5kaW5nLmlkKTtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQucmVwbHlpbmcpe1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdyZXBseV90b19pZCcsIG9wdC50aHJlYWQucmVwbHlfdG9faWQpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucmVzZXRSZXBseWluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgdHlwZS5wYXRoLFxuICAgICAgICAgICAgICAgIGRhdGEgOiBmb3JtLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbih4KXtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5tYW5hZ2VQZW5kaW5nTWVzc2FnZSgnY29tcGxldGVkJywgcGVuZGluZywgeClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWwgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzLm1hbmFnZVBlbmRpbmdNZXNzYWdlKCdwdXJnZScsIHBlbmRpbmcpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBieXBhc3MgOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBtYWtlUGVuZGluZ01lc3NhZ2UgOiBmdW5jdGlvbih0eXBlLCBib2R5KXtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYm9keSA6IGJvZHkgPyBNZXNzZW5nZXIuZm9ybWF0KCkuZXNjYXBlSHRtbChib2R5KSA6IG51bGwsXG4gICAgICAgICAgICAgICAgaWQgOiB1dWlkLnY0KCksXG4gICAgICAgICAgICAgICAgdHlwZSA6IHR5cGUsXG4gICAgICAgICAgICAgICAgb3duZXJfaWQgOiBNZXNzZW5nZXIuY29tbW9uKCkucHJvdmlkZXJfaWQsXG4gICAgICAgICAgICAgICAgb3duZXJfdHlwZSA6IE1lc3Nlbmdlci5jb21tb24oKS5wcm92aWRlcl9tb2RlbCxcbiAgICAgICAgICAgICAgICB0aHJlYWRfaWQgOiBvcHQudGhyZWFkLmlkLFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGRQZW5kaW5nTWVzc2FnZSA6IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgaWYob3B0LnN0b3JhZ2UucGVuZGluZ19tZXNzYWdlcy5sZW5ndGggPiAxIHx8XG4gICAgICAgICAgICAgICAgKG9wdC5zdG9yYWdlLm1lc3NhZ2VzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAmJiBNZXNzZW5nZXIuaXNQcm92aWRlcihvcHQuc3RvcmFnZS5tZXNzYWdlc1swXS5vd25lcl9pZCwgb3B0LnN0b3JhZ2UubWVzc2FnZXNbMF0ub3duZXJfdHlwZSlcbiAgICAgICAgICAgICAgICAmJiAhIG9wdC5zdG9yYWdlLm1lc3NhZ2VzWzBdLnN5c3RlbV9tZXNzYWdlKVxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMucGVuZGluZ19tc2dfc3RhY2suYXBwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5wZW5kaW5nX21lc3NhZ2VfZ3JvdXBlZChtZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5wZW5kaW5nX21zZ19zdGFjay5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnBlbmRpbmdfbWVzc2FnZShtZXNzYWdlKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWFuYWdlUGVuZGluZ01lc3NhZ2UgOiBmdW5jdGlvbihhY3Rpb24sIHBlbmRpbmcsIGZpbmFsKXtcbiAgICAgICAgICAgIGxldCBtc2dfZWxtID0gJChcIiNwZW5kaW5nX21lc3NhZ2VfXCIrcGVuZGluZy5pZCksXG4gICAgICAgICAgICAgICAgc3RvcmFnZSA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAncGVuZGluZ19tZXNzYWdlJywgaWQgOiBwZW5kaW5nLmlkfSk7XG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZCc6XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnBlbmRpbmdfbWVzc2FnZXMucHVzaChwZW5kaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5hZGRQZW5kaW5nTWVzc2FnZShwZW5kaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5tZXNzYWdlU3RhdHVzU3RhdGUocGVuZGluZywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjcGVuZGluZ19tZXNzYWdlX2xvYWRpbmdfXCIrcGVuZGluZy5pZCkuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIH0sIDE1MDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICAgICAgICAgICAgICAgIG1zZ19lbG0ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHN0b3JhZ2UuZm91bmQpIG9wdC5zdG9yYWdlLnBlbmRpbmdfbWVzc2FnZXMuc3BsaWNlKHN0b3JhZ2UuaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzLmFkZE1lc3NhZ2UoZmluYWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3B1cmdlJzpcbiAgICAgICAgICAgICAgICAgICAgJChcIiNwZW5kaW5nX21lc3NhZ2VfbG9hZGluZ19cIitwZW5kaW5nLmlkKS5yZW1vdmVDbGFzcygndGV4dC1wcmltYXJ5JykuYWRkQ2xhc3MoJ3RleHQtZGFuZ2VyJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZ19lbG0ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMDApO1xuICAgICAgICAgICAgICAgICAgICBpZihzdG9yYWdlLmZvdW5kKSBvcHQuc3RvcmFnZS5wZW5kaW5nX21lc3NhZ2VzLnNwbGljZShzdG9yYWdlLmluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9jYXRlU3RvcmFnZUl0ZW0gOiBmdW5jdGlvbihhcmcpe1xuICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb24sIHRlcm0sXG4gICAgICAgICAgICBpdGVtID0ge1xuICAgICAgICAgICAgICAgIGZvdW5kIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5kZXggOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3dpdGNoKGFyZy50eXBlKXtcbiAgICAgICAgICAgICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IG9wdC5zdG9yYWdlLm1lc3NhZ2VzO1xuICAgICAgICAgICAgICAgICAgICB0ZXJtID0gJ2lkJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwZW5kaW5nX21lc3NhZ2UnOlxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gb3B0LnN0b3JhZ2UucGVuZGluZ19tZXNzYWdlcztcbiAgICAgICAgICAgICAgICAgICAgdGVybSA9ICdpZCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndGhyZWFkJzpcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IG9wdC5zdG9yYWdlLnRocmVhZHM7XG4gICAgICAgICAgICAgICAgICAgIHRlcm0gPSAnaWQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JvYmJsZSc6XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHM7XG4gICAgICAgICAgICAgICAgICAgIHRlcm0gPSAnb3duZXJfaWQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3R5cGluZyc6XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBvcHQuc3RvcmFnZS53aG9fdHlwaW5nO1xuICAgICAgICAgICAgICAgICAgICB0ZXJtID0gJ2lkJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdib3QtdHlwaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IG9wdC5zdG9yYWdlLmJvdF90eXBpbmc7XG4gICAgICAgICAgICAgICAgICAgIHRlcm0gPSAnaWQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbltpXVt0ZXJtXSA9PT0gYXJnLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICAgICAgfSxcbiAgICAgICAgYWRkTWVzc2FnZSA6IGZ1bmN0aW9uKG1zZyl7XG4gICAgICAgICAgICBpZihtc2cudGhyZWFkX2lkICE9PSBvcHQudGhyZWFkLmlkKSByZXR1cm47XG4gICAgICAgICAgICBpZihtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ21lc3NhZ2UnLCBpZCA6IG1zZy5pZH0pLmZvdW5kKSByZXR1cm47XG4gICAgICAgICAgICBpZihtc2cudGVtcG9yYXJ5X2lkKXtcbiAgICAgICAgICAgICAgICBsZXQgcGVuZGluZyA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAncGVuZGluZ19tZXNzYWdlJywgaWQgOiBtc2cudGVtcG9yYXJ5X2lkfSk7XG4gICAgICAgICAgICAgICAgaWYocGVuZGluZy5mb3VuZCl7XG4gICAgICAgICAgICAgICAgICAgIG1zZy50ZW1wb3JhcnlfaWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzLm1hbmFnZVBlbmRpbmdNZXNzYWdlKCdjb21wbGV0ZWQnLCBvcHQuc3RvcmFnZS5wZW5kaW5nX21lc3NhZ2VzW3BlbmRpbmcuaW5kZXhdLCBtc2cpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVUaHJlYWQobXNnLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXMudW5zaGlmdChtc2cpO1xuICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVCb2JibGVIZWFkKG1zZy5vd25lcl9pZCwgbXNnLmlkKTtcbiAgICAgICAgICAgIGlmKG1zZy5zeXN0ZW1fbWVzc2FnZSl7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1zZ19zdGFjay5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnN5c3RlbV9tZXNzYWdlKG1zZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZihtc2cuaGFzT3duUHJvcGVydHkoJ3JlcGx5X3RvJykpe1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5pc1Byb3ZpZGVyKG1zZy5vd25lcl9pZCwgbXNnLm93bmVyX3R5cGUpID8gb3B0LmVsZW1lbnRzLm1zZ19zdGFjay5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X21lc3NhZ2VfcmVwbHkobXNnKSkgOiBvcHQuZWxlbWVudHMubXNnX3N0YWNrLmFwcGVuZChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZV9yZXBseShtc2cpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYob3B0LnN0b3JhZ2UubWVzc2FnZXMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICYmIG9wdC5zdG9yYWdlLm1lc3NhZ2VzWzFdLm93bmVyX2lkID09PSBtc2cub3duZXJfaWRcbiAgICAgICAgICAgICAgICAmJiBvcHQuc3RvcmFnZS5tZXNzYWdlc1sxXS5vd25lcl90eXBlID09PSBtc2cub3duZXJfdHlwZVxuICAgICAgICAgICAgICAgICYmICEgb3B0LnN0b3JhZ2UubWVzc2FnZXNbMV0uc3lzdGVtX21lc3NhZ2VcbiAgICAgICAgICAgICAgICAmJiBNZXNzZW5nZXIuZm9ybWF0KCkudGltZURpZmZJblVuaXQobXNnLmNyZWF0ZWRfYXQsIG9wdC5zdG9yYWdlLm1lc3NhZ2VzWzFdLmNyZWF0ZWRfYXQsICdtJykgPCAzMFxuICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuaXNQcm92aWRlcihtc2cub3duZXJfaWQsIG1zZy5vd25lcl90eXBlKSA/IG9wdC5lbGVtZW50cy5tc2dfc3RhY2suYXBwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5teV9tZXNzYWdlX2dyb3VwZWQobXNnKSkgOiBvcHQuZWxlbWVudHMubXNnX3N0YWNrLmFwcGVuZChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZV9ncm91cGVkKG1zZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuaXNQcm92aWRlcihtc2cub3duZXJfaWQsIG1zZy5vd25lcl90eXBlKSA/IG9wdC5lbGVtZW50cy5tc2dfc3RhY2suYXBwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5teV9tZXNzYWdlKG1zZykpIDogb3B0LmVsZW1lbnRzLm1zZ19zdGFjay5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm1lc3NhZ2UobXNnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRob2RzLm1lc3NhZ2VTdGF0dXNTdGF0ZShtc2csIHRydWUpO1xuICAgICAgICAgICAgbWV0aG9kcy5kcmF3Qm9iYmxlSGVhZHMoKTtcbiAgICAgICAgICAgIGlmKG9wdC50aW1lcnMucmVjZW50X2JvYmJsZV90aW1lb3V0KSBjbGVhclRpbWVvdXQob3B0LnRpbWVycy5yZWNlbnRfYm9iYmxlX3RpbWVvdXQpO1xuICAgICAgICAgICAgb3B0LnRpbWVycy5yZWNlbnRfYm9iYmxlX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5jaGVja1JlY2VudEJvYmJsZUhlYWRzKFs4OCw5Nyw5OCw5OV0uaW5jbHVkZXMobXNnLnR5cGUpKVxuICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lc3NhZ2VTdGF0dXNTdGF0ZSA6IGZ1bmN0aW9uKG1lc3NhZ2UsIHNvdW5kKXtcbiAgICAgICAgICAgIG9wdC50aHJlYWQuY2xpY2tfdG9fcmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGZvcmNlU2Nyb2xsID0gKE1lc3Nlbmdlci5pc1Byb3ZpZGVyKG1lc3NhZ2Uub3duZXJfaWQsIG1lc3NhZ2Uub3duZXJfdHlwZSkgfHwgVGhyZWFkVGVtcGxhdGVzLnlvdXR1YmVSZWdleCgpLnRlc3QobWVzc2FnZS5ib2R5KSB8fCBtZXNzYWdlLnR5cGUgPT09IDQpLFxuICAgICAgICAgICAgICAgIGRpZFNjcm9sbCA9IG1ldGhvZHMudGhyZWFkU2Nyb2xsQm90dG9tKGZvcmNlU2Nyb2xsLCBmYWxzZSksXG4gICAgICAgICAgICAgICAgaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm5ld19tc2dfYWxlcnQuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLm1lc3NhZ2VzX3VucmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV9jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21zZy1jdG5yLXVucmVhZCcpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRob2RzLmltYWdlTG9hZExpc3RlbmVyKGRpZFNjcm9sbCk7XG4gICAgICAgICAgICBpZihkaWRTY3JvbGwgJiYgZG9jdW1lbnQuaGFzRm9jdXMoKSAmJiAoIW9wdC5zb2NrZXQuaXNfYXdheSB8fCAob3B0LnNvY2tldC5pc19hd2F5ICYmIG9wdC5zb2NrZXQub25saW5lX3N0YXR1c19zZXR0aW5nID09PSAyKSkpe1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICBpZighTWVzc2VuZ2VyLmlzUHJvdmlkZXIobWVzc2FnZS5vd25lcl9pZCwgbWVzc2FnZS5vd25lcl90eXBlKSB8fCAhWzAsMSwyXS5pbmNsdWRlcyhtZXNzYWdlLnR5cGUpKSBtZXRob2RzLm1hcmtSZWFkKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoTWVzc2VuZ2VyLmlzUHJvdmlkZXIobWVzc2FnZS5vd25lcl9pZCwgbWVzc2FnZS5vd25lcl90eXBlKSl7XG4gICAgICAgICAgICAgICAgaWYoIVswLDEsMl0uaW5jbHVkZXMobWVzc2FnZS50eXBlKSkgbWV0aG9kcy5tYXJrUmVhZCgpO1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgb3B0LnRocmVhZC5tZXNzYWdlc191bnJlYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5hZGRDbGFzcygnbXNnLWN0bnItdW5yZWFkJyk7XG4gICAgICAgICAgICAgICAgaWYoIWRpZFNjcm9sbCl7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5uZXdfbXNnX2FsZXJ0LnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm5ld19tc2dfYWxlcnQuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkudGhyZWFkX25ld19tZXNzYWdlX2FsZXJ0KCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuY2xpY2tfdG9fcmVhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHNvdW5kKSBOb3RpZnlNYW5hZ2VyLnNvdW5kKCdtZXNzYWdlJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGhyZWFkQ2FsbFN0YXR1cyA6IGZ1bmN0aW9uKGNhbGwsIGFjdGlvbil7XG4gICAgICAgICAgICBQYWdlTGlzdGVuZXJzLmxpc3RlbigpLmRpc3Bvc2VUb29sdGlwcygpO1xuICAgICAgICAgICAgLy9pbmNvbWluZyBqb2luZWQgZW5kZWQgbGVmdFxuICAgICAgICAgICAgbGV0IHRocmVhZCA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAndGhyZWFkJywgaWQgOiBjYWxsLnRocmVhZF9pZH0pLCBjYWxsX2FyZWEgPSAkKFwiI3RocmVhZF9vcHRpb25fY2FsbFwiKTtcbiAgICAgICAgICAgIGlmKCF0aHJlYWQuZm91bmQpe1xuICAgICAgICAgICAgICAgIExvYWRJbi50aHJlYWQoY2FsbC50aHJlYWRfaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCFvcHQuc3RvcmFnZS50aHJlYWRzW3RocmVhZC5pbmRleF0uaGFzX2NhbGwgJiYgWydqb2luZWQnLCAnbGVmdCcsICdpbmNvbWluZyddLmluY2x1ZGVzKGFjdGlvbikpe1xuICAgICAgICAgICAgICAgIExvYWRJbi50aHJlYWQoY2FsbC50aHJlYWRfaWQsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICBpZihvcHQudGhyZWFkLmlkID09PSBjYWxsLnRocmVhZF9pZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsX2FyZWEuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkudGhyZWFkX2NhbGxfc3RhdGUoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKG9wdC5zdG9yYWdlLnRocmVhZHNbdGhyZWFkLmluZGV4XS5oYXNfY2FsbCl7XG4gICAgICAgICAgICAgICAgaWYoYWN0aW9uID09PSAnZW5kZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdC5zdG9yYWdlLnRocmVhZHNbdGhyZWFkLmluZGV4XS5yZXNvdXJjZXMuYWN0aXZlX2NhbGw7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHNbdGhyZWFkLmluZGV4XS5oYXNfY2FsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGFjdGlvbiA9PT0gJ2pvaW5lZCcpe1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzW3RocmVhZC5pbmRleF0ucmVzb3VyY2VzLmFjdGl2ZV9jYWxsLm9wdGlvbnMuaW5fY2FsbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHNbdGhyZWFkLmluZGV4XS5yZXNvdXJjZXMuYWN0aXZlX2NhbGwub3B0aW9ucy5qb2luZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzW3RocmVhZC5pbmRleF0ucmVzb3VyY2VzLmFjdGl2ZV9jYWxsLm9wdGlvbnMubGVmdF9jYWxsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoYWN0aW9uID09PSAnbGVmdCcpe1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzW3RocmVhZC5pbmRleF0ucmVzb3VyY2VzLmFjdGl2ZV9jYWxsLm9wdGlvbnMuaW5fY2FsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzW3RocmVhZC5pbmRleF0ucmVzb3VyY2VzLmFjdGl2ZV9jYWxsLm9wdGlvbnMuam9pbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UudGhyZWFkc1t0aHJlYWQuaW5kZXhdLnJlc291cmNlcy5hY3RpdmVfY2FsbC5vcHRpb25zLmxlZnRfY2FsbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gb3B0LnN0b3JhZ2UudGhyZWFkc1t0aHJlYWQuaW5kZXhdO1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHMuc3BsaWNlKHRocmVhZC5pbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UudGhyZWFkcy51bnNoaWZ0KHRlbXApO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuYWRkVGhyZWFkKHRlbXAsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmKG9wdC50aHJlYWQuaWQgPT09IGNhbGwudGhyZWFkX2lkKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoYWN0aW9uID09PSAnZW5kZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC50aHJlYWQuY2FuX2NhbGwgPyBjYWxsX2FyZWEuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkudGhyZWFkX2NhbGxfc3RhdGUodGVtcCkpIDogY2FsbF9hcmVhLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsX2FyZWEuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkudGhyZWFkX2NhbGxfc3RhdGUodGVtcCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBMb2FkSW4udGhyZWFkKGNhbGwudGhyZWFkX2lkLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgaWYob3B0LnRocmVhZC5pZCA9PT0gY2FsbC50aHJlYWRfaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnRocmVhZC5jYW5fY2FsbCA/IGNhbGxfYXJlYS5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfY2FsbF9zdGF0ZShkYXRhKSkgOiBjYWxsX2FyZWEuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgUGFnZUxpc3RlbmVycy5saXN0ZW4oKS50b29sdGlwcygpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRocmVhZE9ubGluZVN0YXR1cyA6IGZ1bmN0aW9uKHN0YXRlKXtcbiAgICAgICAgICAgIGlmKG9wdC50aHJlYWQudHlwZSAhPT0gMSkgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHRocmVhZCA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAndGhyZWFkJywgaWQgOiBvcHQudGhyZWFkLmlkfSk7XG4gICAgICAgICAgICBpZih0aHJlYWQuZm91bmQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHNbdGhyZWFkLmluZGV4XS5yZXNvdXJjZXMucmVjaXBpZW50Lm9wdGlvbnMub25saW5lX3N0YXR1cyA9IHN0YXRlO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuYWRkVGhyZWFkKG9wdC5zdG9yYWdlLnRocmVhZHNbdGhyZWFkLmluZGV4XSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZW1vdmVUaHJlYWQgOiBmdW5jdGlvbih0aHJlYWRfaWQpe1xuICAgICAgICAgICAgbGV0IHRoZV90aHJlYWQgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ3RocmVhZCcsIGlkIDogdGhyZWFkX2lkfSksIGVsbSA9ICQoXCIjdGhyZWFkX2xpc3RfXCIrdGhyZWFkX2lkKTtcbiAgICAgICAgICAgIGlmKHRoZV90aHJlYWQuZm91bmQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHMuc3BsaWNlKHRoZV90aHJlYWQuaW5kZXgsIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbG0ucmVtb3ZlKCk7XG4gICAgICAgICAgICBtZXRob2RzLmNhbGNVbnJlYWRUaHJlYWRzKClcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlVGhyZWFkIDogZnVuY3Rpb24oZGF0YSwgdGhyZWFkLCByZWFkLCB0b3Ape1xuICAgICAgICAgICAgbGV0IHRoZV90aHJlYWQgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ3RocmVhZCcsIGlkIDogKHRocmVhZCA/IGRhdGEuaWQgOiBkYXRhLnRocmVhZF9pZCl9KTtcbiAgICAgICAgICAgIGlmKCF0aGVfdGhyZWFkLmZvdW5kKXtcbiAgICAgICAgICAgICAgICBpZih0aHJlYWQpe1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzLnVuc2hpZnQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMuYWRkVGhyZWFkKGRhdGEsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKFwidGhyZWFkX2lkXCIgaW4gZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgIExvYWRJbi50aHJlYWQoZGF0YS50aHJlYWRfaWQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIExvYWRJbi50aHJlYWRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHJlYWQpe1xuICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHNbdGhlX3RocmVhZC5pbmRleF0udW5yZWFkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UudGhyZWFkc1t0aGVfdGhyZWFkLmluZGV4XS51bnJlYWRfY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMuYWRkVGhyZWFkKG9wdC5zdG9yYWdlLnRocmVhZHNbdGhlX3RocmVhZC5pbmRleF0sIHRvcCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhyZWFkKXtcbiAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzW3RoZV90aHJlYWQuaW5kZXhdID0gZGF0YTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLmFkZFRocmVhZChkYXRhLCB0b3ApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0ZW1wID0gb3B0LnN0b3JhZ2UudGhyZWFkc1t0aGVfdGhyZWFkLmluZGV4XTtcbiAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHMuc3BsaWNlKHRoZV90aHJlYWQuaW5kZXgsIDEpO1xuICAgICAgICAgICAgdGVtcC5yZXNvdXJjZXMubGF0ZXN0X21lc3NhZ2UgPSBkYXRhO1xuICAgICAgICAgICAgdGVtcC51cGRhdGVkX2F0ID0gZGF0YS5jcmVhdGVkX2F0O1xuICAgICAgICAgICAgaWYodGVtcC50eXBlID09PSAxICYmIGRhdGEudGhyZWFkX2lkICE9PSBvcHQudGhyZWFkLmlkICYmICFNZXNzZW5nZXIuaXNQcm92aWRlcihkYXRhLm93bmVyX2lkLCBkYXRhLm93bmVyX3R5cGUpKSB0ZW1wLnJlc291cmNlcy5yZWNpcGllbnQub3B0aW9ucy5vbmxpbmVfc3RhdHVzID0gMTtcbiAgICAgICAgICAgIGlmKHRlbXAudHlwZSA9PT0gMSAmJiBkYXRhLnRocmVhZF9pZCA9PT0gb3B0LnRocmVhZC5pZCAmJiAhTWVzc2VuZ2VyLmlzUHJvdmlkZXIoZGF0YS5vd25lcl9pZCwgZGF0YS5vd25lcl90eXBlKSl7XG4gICAgICAgICAgICAgICAgbGV0IGJvYmJsZSA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAnYm9iYmxlJywgaWQgOiBkYXRhLm93bmVyX2lkfSksIGkgPSBib2JibGUuaW5kZXg7XG4gICAgICAgICAgICAgICAgaWYoYm9iYmxlLmZvdW5kKXtcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5yZXNvdXJjZXMucmVjaXBpZW50Lm9wdGlvbnMub25saW5lX3N0YXR1cyA9IG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50c1tpXS5vd25lci5vcHRpb25zLm9ubGluZV9zdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmlzUHJvdmlkZXIoZGF0YS5vd25lcl9pZCwgZGF0YS5vd25lcl90eXBlKSl7XG4gICAgICAgICAgICAgICAgdGVtcC51bnJlYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0ZW1wLnVucmVhZF9jb3VudCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKG9wdC50aHJlYWQuaWQgIT09IGRhdGEudGhyZWFkX2lkIHx8ICFkb2N1bWVudC5oYXNGb2N1cygpIHx8IG9wdC5zb2NrZXQuaXNfYXdheSB8fCAhbWV0aG9kcy50aHJlYWRTY3JvbGxCb3R0b20oZmFsc2UsIHRydWUpKXtcbiAgICAgICAgICAgICAgICB0ZW1wLnVucmVhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGVtcC51bnJlYWRfY291bnQgPSB0ZW1wLnVucmVhZF9jb3VudCsxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICB0ZW1wLnVucmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRlbXAudW5yZWFkX2NvdW50ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHMudW5zaGlmdCh0ZW1wKTtcbiAgICAgICAgICAgIG1ldGhvZHMuYWRkVGhyZWFkKHRlbXAsIHRvcClcbiAgICAgICAgfSxcbiAgICAgICAgYWRkVGhyZWFkIDogZnVuY3Rpb24oZGF0YSwgdG9wKXtcbiAgICAgICAgICAgIG1ldGhvZHMuY2FsY1VucmVhZFRocmVhZHMoKTtcbiAgICAgICAgICAgIGlmKCFvcHQuZWxlbWVudHMudGhyZWFkX2FyZWEubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICBpZihvcHQuc3RhdGVzLnRocmVhZF9maWx0ZXJlZCl7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5kcmF3VGhyZWFkcygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGhvZHMuY2hlY2tTaG93VGhyZWFkU2VhcmNoKCk7XG4gICAgICAgICAgICAkKFwiI25vX21lc3NhZ2Vfd2FybmluZ1wiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGxldCB0aHJlYWRfZWxtID0gb3B0LmVsZW1lbnRzLnRocmVhZF9hcmVhLmZpbmQoJyN0aHJlYWRfbGlzdF8nK2RhdGEuaWQpLFxuICAgICAgICAgICAgc2VsZWN0ZWQgPSBkYXRhLmlkID09PSBvcHQudGhyZWFkLmlkO1xuICAgICAgICAgICAgaWYoc2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy50aHJlYWRfYXJlYS5maW5kKCcudGhyZWFkX2xpc3RfaXRlbScpLnJlbW92ZUNsYXNzKCdhbGVydC13YXJuaW5nIHNoYWRvdy1zbSByb3VuZGVkJyk7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnRocmVhZF9hcmVhLmZpbmQoJy50aHJlYWQtZ3JvdXAtYXZhdGFyJykucmVtb3ZlQ2xhc3MoJ2F2YXRhci1pcy1vbmxpbmUnKS5hZGRDbGFzcygnYXZhdGFyLWlzLW9mZmxpbmUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodG9wIHx8ICF0aHJlYWRfZWxtLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgdGhyZWFkX2VsbS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMudGhyZWFkX2FyZWEucHJlcGVuZCgoZGF0YS50eXBlID09PSAyID8gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmdyb3VwX3RocmVhZChkYXRhLCBzZWxlY3RlZCkgOiBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkucHJpdmF0ZV90aHJlYWQoZGF0YSwgc2VsZWN0ZWQpKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGhyZWFkX2VsbS5yZXBsYWNlV2l0aCgoZGF0YS50eXBlID09PSAyID8gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmdyb3VwX3RocmVhZChkYXRhLCBzZWxlY3RlZCkgOiBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkucHJpdmF0ZV90aHJlYWQoZGF0YSwgc2VsZWN0ZWQpKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZHJhd1RocmVhZHMgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgbWV0aG9kcy5jaGVja1Nob3dUaHJlYWRTZWFyY2goKTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy50aHJlYWRfYXJlYS5odG1sKCcnKTtcbiAgICAgICAgICAgIGlmKCFvcHQuc3RhdGVzLnRocmVhZF9maWx0ZXJlZCl7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UudGhyZWFkcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnRocmVhZF9hcmVhLmFwcGVuZCgodmFsdWUuZ3JvdXAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmdyb3VwX3RocmVhZCh2YWx1ZSwgdmFsdWUuaWQgPT09IG9wdC50aHJlYWQuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5wcml2YXRlX3RocmVhZCh2YWx1ZSwgdmFsdWUuaWQgPT09IG9wdC50aHJlYWQuaWQpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gb3B0LnN0b3JhZ2UudGhyZWFkcy5maWx0ZXIoZnVuY3Rpb24gKHRocmVhZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aHJlYWQubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG9wdC5zdGF0ZXMudGhyZWFkX2ZpbHRlcl9zZWFyY2gudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYoZmlsdGVyZWQubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnRocmVhZF9hcmVhLmFwcGVuZCgodmFsdWUuZ3JvdXAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmdyb3VwX3RocmVhZCh2YWx1ZSwgdmFsdWUuaWQgPT09IG9wdC50aHJlYWQuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5wcml2YXRlX3RocmVhZCh2YWx1ZSwgdmFsdWUuaWQgPT09IG9wdC50aHJlYWQuaWQpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLnRocmVhZF9hcmVhLmh0bWwoJzxoNCBpZD1cIm5vX21lc3NhZ2Vfd2FybmluZ1wiIGNsYXNzPVwidGV4dC1jZW50ZXIgbXQtNFwiPjxzcGFuIGNsYXNzPVwiYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS1zZWNvbmRhcnlcIj48aSBjbGFzcz1cImZhcyBmYS1jb21tZW50LXNsYXNoXCI+PC9pPiBObyBtYXRjaGVzPC9zcGFuPjwvaDQ+Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoZWNrVGhyZWFkRmlsdGVycyA6IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgaWYoZSAmJiBlLnR5cGUgPT09ICdtb3VzZXVwJyl7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChtZXRob2RzLmNoZWNrVGhyZWFkRmlsdGVycywgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZpbHRlcmVkID0gb3B0LnN0YXRlcy50aHJlYWRfZmlsdGVyZWQsIHNlYXJjaCA9IG9wdC5zdGF0ZXMudGhyZWFkX2ZpbHRlcl9zZWFyY2g7XG4gICAgICAgICAgICBpZihvcHQuZWxlbWVudHMudGhyZWFkX3NlYXJjaF9pbnB1dC52YWwoKS50cmltKCkubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBvcHQuc3RhdGVzLnRocmVhZF9maWx0ZXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXRlcy50aHJlYWRfZmlsdGVyX3NlYXJjaCA9IG9wdC5lbGVtZW50cy50aHJlYWRfc2VhcmNoX2lucHV0LnZhbCgpO1xuICAgICAgICAgICAgICAgIGlmKHNlYXJjaCAhPT0gb3B0LnN0YXRlcy50aHJlYWRfZmlsdGVyX3NlYXJjaCkgbWV0aG9kcy5kcmF3VGhyZWFkcygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIG9wdC5zdGF0ZXMudGhyZWFkX2ZpbHRlcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgb3B0LnN0YXRlcy50aHJlYWRfZmlsdGVyX3NlYXJjaCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYoZmlsdGVyZWQpIG1ldGhvZHMuZHJhd1RocmVhZHMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjaGVja1Nob3dUaHJlYWRTZWFyY2ggOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoIW9wdC5zdG9yYWdlLnRocmVhZHMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMudGhyZWFkX3NlYXJjaF9iYXIuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy50aHJlYWRfc2VhcmNoX2Jhci5zaG93KClcbiAgICAgICAgfSxcbiAgICAgICAgY2FsY1VucmVhZFRocmVhZHMgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgbGV0IHVucmVhZCA9IDA7XG4gICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzLmZvckVhY2goZnVuY3Rpb24odGhyZWFkKXtcbiAgICAgICAgICAgICAgICBpZih0aHJlYWQudW5yZWFkICYmIHRocmVhZC51bnJlYWRfY291bnQgPiAwKSB1bnJlYWQrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgTm90aWZ5TWFuYWdlci51cGRhdGVNZXNzYWdlQ291bnQoe3RvdGFsX3VucmVhZCA6IHVucmVhZH0pXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRNZXNzYWdlIDogZnVuY3Rpb24oYXJnKXtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLmlkKSByZXR1cm47XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0b3JhZ2UgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ21lc3NhZ2UnLCBpZCA6IGFyZy5pZH0pLCBpID0gbWVzc2FnZVN0b3JhZ2UuaW5kZXgsIG1zZyA9ICQoXCIjbWVzc2FnZV9cIithcmcuaWQpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VTdG9yYWdlLmZvdW5kICYmIE1lc3Nlbmdlci5pc1Byb3ZpZGVyKG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLm93bmVyX2lkLCBvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5vd25lcl90eXBlKSl7XG4gICAgICAgICAgICAgICAgbXNnLmZpbmQoJy5tZXNzYWdlLWJvZHknKS5hZGRDbGFzcygnc2hhZG93LXN1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIGljb24gOiAnZWRpdCcsXG4gICAgICAgICAgICAgICAgICAgIHRoZW1lIDogJ2RhcmsnLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VkaXRpbmcgTWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgIGg0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3BfY3RybCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB1bmxvY2tfYnV0dG9ucyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBib2R5IDogVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmVkaXRfbWVzc2FnZShNZXNzZW5nZXIuZm9ybWF0KCkuc2hvcnRjb2RlVG9Vbmljb2RlKG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLmJvZHkpKSxcbiAgICAgICAgICAgICAgICAgICAgY2JfYnRuX3R4dCA6ICdVcGRhdGUnLFxuICAgICAgICAgICAgICAgICAgICBjYl9idG5faWNvbiA6ICdlZGl0JyxcbiAgICAgICAgICAgICAgICAgICAgY2JfYnRuX3RoZW1lIDogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICBvblJlYWR5IDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5mb3JtYXQoKS5mb2N1c0VuZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdF9tZXNzYWdlX3RleHRhcmVhJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy51cGRhdGVNZXNzYWdlKGFyZylcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25DbG9zZWQgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmZpbmQoJy5tZXNzYWdlLWJvZHknKS5yZW1vdmVDbGFzcygnc2hhZG93LXN1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXBseVRvTWVzc2FnZSA6IGZ1bmN0aW9uKGFyZyl7XG4gICAgICAgICAgICBpZighb3B0LnRocmVhZC5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYob3B0LnRocmVhZC5yZXBseWluZyl7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5yZXNldFJlcGx5aW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0b3JhZ2UgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ21lc3NhZ2UnLCBpZCA6IGFyZy5pZH0pLFxuICAgICAgICAgICAgICAgIGkgPSBtZXNzYWdlU3RvcmFnZS5pbmRleCxcbiAgICAgICAgICAgICAgICBtc2cgPSAkKFwiI21lc3NhZ2VfXCIrYXJnLmlkKSxcbiAgICAgICAgICAgICAgICBmb2N1c19pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlX3RleHRfaW5wdXQnKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlU3RvcmFnZS5mb3VuZCAmJiAhIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnN5c3RlbV9tZXNzYWdlKXtcbiAgICAgICAgICAgICAgICBtc2cuZmluZCgnLm1lc3NhZ2UtYm9keScpLmFkZENsYXNzKCdzaGFkb3ctcHJpbWFyeScpO1xuICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZXBseV9tZXNzYWdlX2FsZXJ0LnNob3coKTtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMucmVwbHlfbWVzc2FnZV9hbGVydC5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfcmVwbHlpbmdfbWVzc2FnZV9hbGVydChvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXSkpO1xuICAgICAgICAgICAgICAgIG9wdC50aHJlYWQucmVwbHlpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9wdC50aHJlYWQucmVwbHlfdG9faWQgPSBhcmcuaWQ7XG4gICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmZvcm1hdCgpLmZvY3VzRW5kKGZvY3VzX2lucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXRSZXBseWluZyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZighb3B0LnRocmVhZC5pZCB8fCAhb3B0LnRocmVhZC5yZXBseWluZykgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IG1zZyA9ICQoXCIjbWVzc2FnZV9cIitvcHQudGhyZWFkLnJlcGx5X3RvX2lkKTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZXBseV9tZXNzYWdlX2FsZXJ0LmhpZGUoKTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5yZXBseV9tZXNzYWdlX2FsZXJ0Lmh0bWwoJycpO1xuICAgICAgICAgICAgb3B0LnRocmVhZC5yZXBseWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0LnRocmVhZC5yZXBseV90b19pZCA9IG51bGw7XG4gICAgICAgICAgICBtc2cuZmluZCgnLm1lc3NhZ2UtYm9keScpLnJlbW92ZUNsYXNzKCdzaGFkb3ctcHJpbWFyeScpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVNZXNzYWdlIDogZnVuY3Rpb24oYXJnKXtcbiAgICAgICAgICAgIGxldCB0ZXh0YXJlYSA9ICQoXCIjZWRpdF9tZXNzYWdlX3RleHRhcmVhXCIpO1xuICAgICAgICAgICAgdGV4dGFyZWEucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvbWVzc2FnZXMvJyArIGFyZy5pZCxcbiAgICAgICAgICAgICAgICBkYXRhIDoge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlIDogdGV4dGFyZWEudmFsKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihtZXNzYWdlKXtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5yZW5kZXJVcGRhdGVkTWVzc2FnZShtZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgfSwgJ3B1dCcpO1xuICAgICAgICB9LFxuICAgICAgICByZW5kZXJVcGRhdGVkTWVzc2FnZSA6IGZ1bmN0aW9uKG1lc3NhZ2UsIGZvcmNlKXtcbiAgICAgICAgICAgIGlmKGZvcmNlID09PSB0cnVlICYmIE1lc3Nlbmdlci5pc1Byb3ZpZGVyKG1lc3NhZ2Uub3duZXJfaWQsIG1lc3NhZ2Uub3duZXJfdHlwZSkpe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBtc2cgPSAkKFwiI21lc3NhZ2VfXCIrbWVzc2FnZS5pZCksIG1lc3NhZ2VTdG9yYWdlID0gbWV0aG9kcy5sb2NhdGVTdG9yYWdlSXRlbSh7dHlwZSA6ICdtZXNzYWdlJywgaWQgOiBtZXNzYWdlLmlkfSksIGkgPSBtZXNzYWdlU3RvcmFnZS5pbmRleDtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlU3RvcmFnZS5mb3VuZCl7XG4gICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0gPSBtZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYobXNnLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgaWYobWVzc2FnZS5oYXNPd25Qcm9wZXJ0eSgncmVwbHlfdG8nKSl7XG4gICAgICAgICAgICAgICAgICAgIG1zZy5yZXBsYWNlV2l0aChNZXNzZW5nZXIuaXNQcm92aWRlcihtZXNzYWdlLm93bmVyX2lkLCBtZXNzYWdlLm93bmVyX3R5cGUpID8gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm15X21lc3NhZ2VfcmVwbHkobWVzc2FnZSkgOiBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZV9yZXBseShtZXNzYWdlKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgbXNnLmZpbmQoJy5tZXNzYWdlLXRleHQnKS5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5tZXNzYWdlX2JvZHkobWVzc2FnZSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZGROZXdSZWFjdGlvbiA6IGZ1bmN0aW9uKGFyZyl7XG4gICAgICAgICAgICBpZighb3B0LnRocmVhZC5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgJy9tZXNzYWdlcy8nICsgYXJnLm1lc3NhZ2VfaWQgKyAnL3JlYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgZGF0YSA6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVhY3Rpb24gOiBhcmcuZW1vamlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlUmVhY3Rpb24gOiBmdW5jdGlvbihhcmcsIHJlbW92ZUxpKXtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLmlkKSByZXR1cm47XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIG9wdC50aHJlYWQuaWQgKyAnL21lc3NhZ2VzLycgKyBhcmcubWVzc2FnZV9pZCArICcvcmVhY3Rpb25zLycrYXJnLmlkLFxuICAgICAgICAgICAgICAgIGRhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYocmVtb3ZlTGkgPT09IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlYWN0TGkgPSAkKFwiI3JlYWN0X2xpX2l0ZW1fXCIrYXJnLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlYWN0TGkubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdExpLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICB9LCAnZGVsZXRlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZU5ld1JlYWN0aW9uIDogZnVuY3Rpb24ocmVhY3Rpb24pe1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2VTdG9yYWdlID0gbWV0aG9kcy5sb2NhdGVTdG9yYWdlSXRlbSh7dHlwZSA6ICdtZXNzYWdlJywgaWQgOiByZWFjdGlvbi5tZXNzYWdlX2lkfSksXG4gICAgICAgICAgICAgICAgaSA9IG1lc3NhZ2VTdG9yYWdlLmluZGV4O1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VTdG9yYWdlLmZvdW5kKXtcbiAgICAgICAgICAgICAgICBpZihvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5oYXNPd25Qcm9wZXJ0eSgncmVhY3Rpb25zJykpe1xuICAgICAgICAgICAgICAgICAgICBpZihvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5yZWFjdGlvbnMuZGF0YS5oYXNPd25Qcm9wZXJ0eShyZWFjdGlvbi5yZWFjdGlvbikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLmRhdGFbcmVhY3Rpb24ucmVhY3Rpb25dLnB1c2gocmVhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLmRhdGFbcmVhY3Rpb24ucmVhY3Rpb25dID0gW3JlYWN0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0aW9ucy5tZXRhLnRvdGFsX3VuaXF1ZSA9IE9iamVjdC5rZXlzKG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0aW9ucy5kYXRhKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLm1ldGEudG90YWwgPSBvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5yZWFjdGlvbnMubWV0YS50b3RhbCsxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5yZWFjdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhIDoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsIDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbF91bmlxdWUgOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0aW9ucy5kYXRhW3JlYWN0aW9uLnJlYWN0aW9uXSA9IFtyZWFjdGlvbl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ldGhvZHMuZHJhd1JlYWN0aW9ucyhvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlUmVtb3ZlUmVhY3Rpb24gOiBmdW5jdGlvbihyZWFjdGlvbil7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0b3JhZ2UgPSBtZXRob2RzLmxvY2F0ZVN0b3JhZ2VJdGVtKHt0eXBlIDogJ21lc3NhZ2UnLCBpZCA6IHJlYWN0aW9uLm1lc3NhZ2VfaWR9KSxcbiAgICAgICAgICAgICAgICBpID0gbWVzc2FnZVN0b3JhZ2UuaW5kZXg7XG4gICAgICAgICAgICBpZiAobWVzc2FnZVN0b3JhZ2UuZm91bmQgJiYgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0uaGFzT3duUHJvcGVydHkoJ3JlYWN0aW9ucycpKXtcbiAgICAgICAgICAgICAgICBpZihvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5yZWFjdGlvbnMuZGF0YS5oYXNPd25Qcm9wZXJ0eShyZWFjdGlvbi5yZWFjdGlvbikpe1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHkgPSAwOyB5IDwgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLmRhdGFbcmVhY3Rpb24ucmVhY3Rpb25dLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLmRhdGFbcmVhY3Rpb24ucmVhY3Rpb25dW3ldLmlkID09PSByZWFjdGlvbi5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0aW9ucy5kYXRhW3JlYWN0aW9uLnJlYWN0aW9uXS5zcGxpY2UoeSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIW9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0aW9ucy5kYXRhW3JlYWN0aW9uLnJlYWN0aW9uXS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdC5zdG9yYWdlLm1lc3NhZ2VzW2ldLnJlYWN0aW9ucy5kYXRhW3JlYWN0aW9uLnJlYWN0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5pcXVlID0gT2JqZWN0LmtleXMob3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLmRhdGEpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXVuaXF1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLm1ldGEudG90YWxfdW5pcXVlID0gdW5pcXVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UubWVzc2FnZXNbaV0ucmVhY3Rpb25zLm1ldGEudG90YWwgPSBvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXS5yZWFjdGlvbnMubWV0YS50b3RhbC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1ldGhvZHMuZHJhd1JlYWN0aW9ucyhvcHQuc3RvcmFnZS5tZXNzYWdlc1tpXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZHJhd1JlYWN0aW9ucyA6IGZ1bmN0aW9uKG1lc3NhZ2Upe1xuICAgICAgICAgICAgbGV0IG1zZyA9ICQoXCIjbWVzc2FnZV9cIittZXNzYWdlLmlkKTtcbiAgICAgICAgICAgIGlmKG1zZy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIG1zZy5maW5kKCcucmVhY3Rpb25zJykuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubWVzc2FnZV9yZWFjdGlvbnMobWVzc2FnZSwgbXNnLmhhc0NsYXNzKCdteS1tZXNzYWdlJyksIG1zZy5oYXNDbGFzcygnZ3JvdXBlZC1tZXNzYWdlJykpKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnRocmVhZFNjcm9sbEJvdHRvbShmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhcmNoaXZlID0ge1xuICAgICAgICBNZXNzYWdlIDogZnVuY3Rpb24oYXJnKXtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLmlkKSByZXR1cm47XG4gICAgICAgICAgICBsZXQgbXNnID0gJChcIiNtZXNzYWdlX1wiK2FyZy5pZCk7XG4gICAgICAgICAgICBtc2cuZmluZCgnLm1lc3NhZ2UtYm9keScpLmFkZENsYXNzKCdzaGFkb3ctd2FybmluZycpO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuTW9kYWwoe1xuICAgICAgICAgICAgICAgIHNpemUgOiAnc20nLFxuICAgICAgICAgICAgICAgIGJvZHkgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZW50ZXJlZCA6IHRydWUsXG4gICAgICAgICAgICAgICAgdW5sb2NrX2J1dHRvbnMgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0RlbGV0ZSBtZXNzYWdlPycsXG4gICAgICAgICAgICAgICAgdGhlbWU6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgIGNiX2J0bl90eHQ6ICdEZWxldGUnLFxuICAgICAgICAgICAgICAgIGNiX2J0bl90aGVtZSA6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgIGNiX2J0bl9pY29uOid0cmFzaCcsXG4gICAgICAgICAgICAgICAgaWNvbjogJ3RyYXNoJyxcbiAgICAgICAgICAgICAgICBjYl9jbG9zZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvbWVzc2FnZXMvJyArIGFyZy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLkFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnTWVzc2FnZSBSZW1vdmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZSA6ICd3YXJuaW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMucHVyZ2VNZXNzYWdlKGFyZy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2RlbGV0ZScpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbG9zZWQgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBtc2cuZmluZCgnLm1lc3NhZ2UtYm9keScpLnJlbW92ZUNsYXNzKCdzaGFkb3ctd2FybmluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBUaHJlYWQgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQpIHJldHVybjtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICB0aGVtZSA6ICdkYW5nZXInLFxuICAgICAgICAgICAgICAgIGljb24gOiAndHJhc2gnLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wX2N0cmwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcmVfbG9hZGVyIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0aXRsZSA6ICdDaGVja2luZyBkZWxldGUuLi4nLFxuICAgICAgICAgICAgICAgIGNiX2J0bl90eHQgOiAnRGVsZXRlJyxcbiAgICAgICAgICAgICAgICBjYl9idG5faWNvbiA6ICd0cmFzaCcsXG4gICAgICAgICAgICAgICAgY2JfYnRuX3RoZW1lIDogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgb25SZWFkeSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgJy9jaGVjay1hcmNoaXZlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe2JvZHkgOiBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuYXJjaGl2ZV90aHJlYWRfd2FybmluZyhkYXRhKSwgdGl0bGUgOiAnIERlbGV0ZSBDb252ZXJzYXRpb24/J30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwgOiBNZXNzZW5nZXIuYWxlcnQoKS5kZXN0cm95TW9kYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBieXBhc3MgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrIDogYXJjaGl2ZS5wb3N0QXJjaGl2ZVRocmVhZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdEFyY2hpdmVUaHJlYWQgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYob3B0LnN0YXRlcy5sb2NrKSByZXR1cm47XG4gICAgICAgICAgICBvcHQuc3RhdGVzLmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkLFxuICAgICAgICAgICAgICAgIHNoYXJlZCA6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhyZWFkX2lkIDogb3B0LnRocmVhZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA6IG9wdC50aHJlYWQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6IG9wdC50aHJlYWQudHlwZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgTG9hZEluLmNsb3NlT3BlbmVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbXNnID0gXCJZb3UgcmVtb3ZlZCB0aGUgY29udmVyc2F0aW9uIGJldHdlZW4geW91IGFuZCBcIiArIGRhdGEubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS50eXBlID09PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiWW91IHJlbW92ZWQgdGhlIGdyb3VwIGNvbnZlcnNhdGlvbiBcIiArIGRhdGEubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG1zZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lIDogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbCA6IHRydWVcbiAgICAgICAgICAgIH0sICdkZWxldGUnKTtcblxuICAgICAgICB9XG4gICAgfSxcbiAgICBncm91cHMgPSB7XG4gICAgICAgIHZpZXdQYXJ0aWNpcGFudHMgOiBmdW5jdGlvbihyZWxvYWQpe1xuICAgICAgICAgICAgbGV0IGdhdGhlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgJy9wYXJ0aWNpcGFudHMnLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgOiBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuZ3JvdXBfcGFydGljaXBhbnRzKGRhdGEuZGF0YSwgb3B0LnRocmVhZC5hZG1pbiwgb3B0LnRocmVhZC5sb2Nrb3V0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG9wdC50aHJlYWQubmFtZSsnIFBhcnRpY2lwYW50cydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5sb2FkRGF0YVRhYmxlKCQoXCIjdmlld19ncm91cF9wYXJ0aWNpcGFudHNcIikpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZihyZWxvYWQpIHJldHVybiBnYXRoZXIoKTtcbiAgICAgICAgICAgIGxldCBtb2RhbCA9IHtcbiAgICAgICAgICAgICAgICBpY29uIDogJ3VzZXJzJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGhlbWUgOiAnZGFyaycsXG4gICAgICAgICAgICAgICAgdGl0bGUgOiAnTG9hZGluZyBQYXJ0aWNpcGFudHMuLi4nLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXIgOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1bmxvY2tfYnV0dG9ucyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGg0IDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2l6ZSA6ICdsZycsXG4gICAgICAgICAgICAgICAgb25SZWFkeSA6IGdhdGhlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLmxvY2tvdXQgJiYgb3B0LnRocmVhZC5fdGhyZWFkLm9wdGlvbnMuYWRkX3BhcnRpY2lwYW50cyl7XG4gICAgICAgICAgICAgICAgbW9kYWwuY2JfYnRuX3R4dCA9ICdBZGQgUGFydGljaXBhbnRzJztcbiAgICAgICAgICAgICAgICBtb2RhbC5jYl9idG5faWNvbiA9ICd1c2VyLXBsdXMnO1xuICAgICAgICAgICAgICAgIG1vZGFsLmNiX2J0bl90aGVtZSA9ICdzdWNjZXNzJztcbiAgICAgICAgICAgICAgICBtb2RhbC5jYWxsYmFjayA9IGdyb3Vwcy5hZGRQYXJ0aWNpcGFudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5Nb2RhbChtb2RhbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHZpZXdJbnZpdGVHZW5lcmF0b3IgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuTW9kYWwoe1xuICAgICAgICAgICAgICAgIGJhY2tkcm9wX2N0cmwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpY29uIDogJ2xpbmsnLFxuICAgICAgICAgICAgICAgIHRoZW1lIDogJ2RhcmsnLFxuICAgICAgICAgICAgICAgIHRpdGxlIDogJ0xvYWRpbmcgSW52aXRlLi4uJyxcbiAgICAgICAgICAgICAgICBwcmVfbG9hZGVyIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA6IHRydWUsXG4gICAgICAgICAgICAgICAgdW5sb2NrX2J1dHRvbnMgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBoNCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9uUmVhZHkgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkrJ3RocmVhZHMvJytvcHQudGhyZWFkLmlkKycvaW52aXRlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZ3JvdXBzLm1hbmFnZUludml0ZUdlblBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtYW5hZ2VJbnZpdGVHZW5QYWdlIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICBsZXQgZ2VuZXJhdGVfY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJChcIiNncnBfaW52X2dlbmVyYXRlX2J0blwiKS5jbGljayhncm91cHMuZ2VuZXJhdGVJbnZpdGVMaW5rKVxuICAgICAgICAgICAgfSwgbmFtZSA9IChDYWxsTWFuYWdlci5zdGF0ZSgpLmluaXRpYWxpemVkID8gQ2FsbE1hbmFnZXIuc3RhdGUoKS50aHJlYWRfbmFtZSA6IG9wdC50aHJlYWQubmFtZSk7XG4gICAgICAgICAgICBpZihkYXRhLmRhdGEubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICBib2R5IDogVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9zaG93X2ludml0ZShkYXRhLmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG5hbWUrJyBJbnZpdGUgR2VuZXJhdG9yJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxldCBidG5fc3dpdGNoID0gJChcIiNncnBfaW52X3N3aXRjaF9nZW5lcmF0ZV9idG5cIik7XG4gICAgICAgICAgICAgICAgYnRuX3N3aXRjaC5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLmZpbGxNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5IDogVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9nZW5lcmF0ZV9pbnZpdGUodHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlX2NsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjZ3JwX2ludl9iYWNrX2J0blwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cHMubWFuYWdlSW52aXRlR2VuUGFnZShkYXRhKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICBib2R5IDogVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9nZW5lcmF0ZV9pbnZpdGUoZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG5hbWUrJyBJbnZpdGUgR2VuZXJhdG9yJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlX2NsaWNrKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2VuZXJhdGVJbnZpdGVMaW5rIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGxldCBleHBpcmUgPSBwYXJzZUludCgkKFwiI2dycF9pbnZfZXhwaXJlc1wiKS52YWwoKSksIHVzZXMgPSBwYXJzZUludCgkKFwiI2dycF9pbnZfdXNlc1wiKS52YWwoKSksXG4gICAgICAgICAgICAgICAgdGhyZWFkID0gKENhbGxNYW5hZ2VyLnN0YXRlKCkuaW5pdGlhbGl6ZWQgPyBDYWxsTWFuYWdlci5zdGF0ZSgpLnRocmVhZF9pZCA6IG9wdC50aHJlYWQuaWQpLFxuICAgICAgICAgICAgICAgIGV4cGlyZXNfYXQgPSBudWxsO1xuICAgICAgICAgICAgc3dpdGNoIChleHBpcmUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNfYXQgPSBkYXlqcygpLnV0YygpLmFkZCgzMCwgJ21pbnV0ZScpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlc19hdCA9IGRheWpzKCkudXRjKCkuYWRkKDEsICdob3VyJykuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzX2F0ID0gZGF5anMoKS51dGMoKS5hZGQoNiwgJ2hvdXInKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNfYXQgPSBkYXlqcygpLnV0YygpLmFkZCgxMiwgJ2hvdXInKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNfYXQgPSBkYXlqcygpLnV0YygpLmFkZCgxLCAnZGF5JykuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzX2F0ID0gZGF5anMoKS51dGMoKS5hZGQoMSwgJ3dlZWsnKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNfYXQgPSBkYXlqcygpLnV0YygpLmFkZCgyLCAnd2VlaycpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJlc19hdCA9IGRheWpzKCkudXRjKCkuYWRkKDEsICdtb250aCcpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuZmlsbE1vZGFsKHtcbiAgICAgICAgICAgICAgICBsb2FkZXIgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJvZHkgOiBudWxsLFxuICAgICAgICAgICAgICAgIHRpdGxlIDogJ0dlbmVyYXRpbmcuLi4nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgdGhyZWFkICsgJy9pbnZpdGVzJyxcbiAgICAgICAgICAgICAgICBkYXRhIDoge1xuICAgICAgICAgICAgICAgICAgICBleHBpcmVzIDogZXhwaXJlc19hdCxcbiAgICAgICAgICAgICAgICAgICAgdXNlcyA6IHVzZXNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBncm91cHMudmlld0ludml0ZUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICBmYWlsIDogZ3JvdXBzLnZpZXdJbnZpdGVHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgYnlwYXNzIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlSW52aXRlTGluayA6IGZ1bmN0aW9uKGlkKXtcbiAgICAgICAgICAgIGxldCB0aHJlYWQgPSAoQ2FsbE1hbmFnZXIuc3RhdGUoKS5pbml0aWFsaXplZCA/IENhbGxNYW5hZ2VyLnN0YXRlKCkudGhyZWFkX2lkIDogb3B0LnRocmVhZC5pZCk7XG4gICAgICAgICAgICBNZXNzZW5nZXIuYnV0dG9uKCkuYWRkTG9hZGVyKHtpZCA6ICcjaW52X3JlbW92ZV9idG5fJyArIGlkfSk7XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIHRocmVhZCArICcvaW52aXRlcy8nICsgaWQsXG4gICAgICAgICAgICAgICAgZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBncm91cHMudmlld0ludml0ZUdlbmVyYXRvcixcbiAgICAgICAgICAgICAgICBmYWlsIDogZ3JvdXBzLnZpZXdJbnZpdGVHZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgYnlwYXNzIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgfSwgJ2RlbGV0ZScpXG4gICAgICAgIH0sXG4gICAgICAgIGFkZFBhcnRpY2lwYW50cyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQgdGhyZWFkID0gKENhbGxNYW5hZ2VyLnN0YXRlKCkuaW5pdGlhbGl6ZWQgPyBDYWxsTWFuYWdlci5zdGF0ZSgpLnRocmVhZF9pZCA6IG9wdC50aHJlYWQuaWQpLFxuICAgICAgICAgICAgICAgIG5hbWUgPSAoQ2FsbE1hbmFnZXIuc3RhdGUoKS5pbml0aWFsaXplZCA/IENhbGxNYW5hZ2VyLnN0YXRlKCkudGhyZWFkX25hbWUgOiBvcHQudGhyZWFkLm5hbWUpO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuTW9kYWwoe1xuICAgICAgICAgICAgICAgIGljb24gOiAndXNlci1wbHVzJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGhlbWUgOiAnZGFyaycsXG4gICAgICAgICAgICAgICAgdGl0bGUgOiAnTG9hZGluZyBmcmllbmRzLi4uJyxcbiAgICAgICAgICAgICAgICBwcmVfbG9hZGVyIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjYl9idG5fdHh0IDogJ0FkZCBwYXJ0aWNpcGFudHMnLFxuICAgICAgICAgICAgICAgIGNiX2J0bl9pY29uIDogJ3BsdXMtc3F1YXJlJyxcbiAgICAgICAgICAgICAgICBjYl9idG5fdGhlbWUgOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGg0IDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2l6ZSA6ICdsZycsXG4gICAgICAgICAgICAgICAgdW5sb2NrX2J1dHRvbnMgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvblJlYWR5IDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyt0aHJlYWQrJy9hZGQtcGFydGljaXBhbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5IDogVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLmdyb3VwX2FkZF9wYXJ0aWNpcGFudHMoZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogJ0FkZCBmcmllbmRzIHRvICcrbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMubG9hZERhdGFUYWJsZSgkKFwiI2FkZF9ncm91cF9wYXJ0aWNpcGFudHNcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm92aWRlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYob3B0LmVsZW1lbnRzLmRhdGFfdGFibGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmRhdGFfdGFibGUuJCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWQnKS5tYXAoKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaCh7YWxpYXMgOiB2YWx1ZS5kYXRhc2V0LnByb3ZpZGVyQWxpYXMsIGlkIDogdmFsdWUuZGF0YXNldC5wcm92aWRlcklkfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIHRocmVhZCArICcvcGFydGljaXBhbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzIDogcHJvdmlkZXJzLmxlbmd0aCA/IHByb3ZpZGVycyA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGEubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuQWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnUGFydGljaXBhbnRzIGFkZGVkIScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdCA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuQWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnTm8gdmFsaWQgcGFydGljaXBhbnRzIGZvdW5kIHRvIGFkZC4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWUgOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB2aWV3U2V0dGluZ3MgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYob3B0LnN0YXRlcy5sb2NrKSByZXR1cm47XG4gICAgICAgICAgICBvcHQuc3RhdGVzLmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuTW9kYWwoe1xuICAgICAgICAgICAgICAgIGljb24gOiAnY29nJyxcbiAgICAgICAgICAgICAgICB0aGVtZSA6ICdkYXJrJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0xvYWRpbmcgU2V0dGluZ3MuLi4nLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaDQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wX2N0cmwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmxvY2tfYnV0dG9ucyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNiX2J0bl90eHQgOiAnU2F2ZSBTZXR0aW5ncycsXG4gICAgICAgICAgICAgICAgY2JfYnRuX2ljb24gOiAnc2F2ZScsXG4gICAgICAgICAgICAgICAgY2JfYnRuX3RoZW1lIDogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIG9wdC50aHJlYWQuaWQgKyAnL3NldHRpbmdzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG9wdC50aHJlYWQubmFtZSsnIFNldHRpbmdzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA6IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5ncm91cF9zZXR0aW5ncyhkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhZ2VMaXN0ZW5lcnMubGlzdGVuKCkudG9vbHRpcHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiLm1fc2V0dGluZ190b2dnbGVcIikuY2hhbmdlKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuaXMoJzpjaGVja2VkJykgPyAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykuYWRkQ2xhc3MoJ2FsZXJ0LXN1Y2Nlc3MnKSA6ICQodGhpcykuY2xvc2VzdCgndHInKS5yZW1vdmVDbGFzcygnYWxlcnQtc3VjY2VzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBncm91cHMuc2F2ZVNldHRpbmdzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2F2ZVNldHRpbmdzIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvc2V0dGluZ3MnLFxuICAgICAgICAgICAgICAgIGRhdGEgOiB7XG4gICAgICAgICAgICAgICAgICAgIHN1YmplY3QgOiAkKCcjZ19zX2dyb3VwX3N1YmplY3QnKS52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3BhcnRpY2lwYW50cyA6ICQoXCIjZ19zX2FkZF9wYXJ0aWNpcGFudHNcIikuaXMoXCI6Y2hlY2tlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgaW52aXRhdGlvbnMgOiAkKFwiI2dfc19pbnZpdGF0aW9uc1wiKS5pcyhcIjpjaGVja2VkXCIpLFxuICAgICAgICAgICAgICAgICAgICBjYWxsaW5nIDogJChcIiNnX3NfYWRtaW5fY2FsbFwiKS5pcyhcIjpjaGVja2VkXCIpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdpbmcgOiAkKFwiI2dfc19zZW5kX21lc3NhZ2VcIikuaXMoXCI6Y2hlY2tlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAga25vY2tzIDogJChcIiNnX3Nfa25vY2tzXCIpLmlzKFwiOmNoZWNrZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIGNoYXRfYm90cyA6ICQoXCIjZ19zX2JvdHNcIikuaXMoXCI6Y2hlY2tlZFwiKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuQWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiAnWW91IHVwZGF0ZWQgJytkYXRhLm5hbWUrJ1xcJ3MgU2V0dGluZ3MuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsIDogdHJ1ZVxuICAgICAgICAgICAgfSwgJ3B1dCcpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmVHcm91cEF2YXRhciA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe2xvYWRlciA6IHRydWUsIG5vX2Nsb3NlIDogdHJ1ZSwgYm9keSA6IG51bGwsIHRpdGxlIDogJ1VwbG9hZGluZy4uLid9KTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvYXZhdGFyJyxcbiAgICAgICAgICAgICAgICBkYXRhIDoge30sXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6ICdZb3UgcmVtb3ZlZCAnK2RhdGEubmFtZSsnXFwncyBhdmF0YXIuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZSxcbiAgICAgICAgICAgIH0sICdkZWxldGUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlUGFydGljaXBhbnQgOiBmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jaykgcmV0dXJuO1xuICAgICAgICAgICAgb3B0LnN0YXRlcy5sb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvcGFydGljaXBhbnRzLycgKyB4LFxuICAgICAgICAgICAgICAgIGRhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLkFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogXCJQYXJ0aWNpcGFudCByZW1vdmVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdCA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVtZSA6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLmRhdGFfdGFibGUucm93KCQoJyNyb3dfJyt4KSkucmVtb3ZlKCkuZHJhdyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgfSwgJ2RlbGV0ZScpO1xuICAgICAgICB9LFxuICAgICAgICBwcm9tb3RlQWRtaW4gOiBmdW5jdGlvbihwYXJ0aWNpcGFudCl7XG4gICAgICAgICAgICBpZihvcHQuc3RhdGVzLmxvY2spIHJldHVybjtcbiAgICAgICAgICAgIG9wdC5zdGF0ZXMubG9jayA9IHRydWU7XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe2xvYWRlciA6IHRydWV9KTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvcGFydGljaXBhbnRzLycgKyBwYXJ0aWNpcGFudCArICcvcHJvbW90ZScsXG4gICAgICAgICAgICAgICAgZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBncm91cHMudmlld1BhcnRpY2lwYW50cyh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVtb3RlQWRtaW4gOiBmdW5jdGlvbihwYXJ0aWNpcGFudCl7XG4gICAgICAgICAgICBpZihvcHQuc3RhdGVzLmxvY2spIHJldHVybjtcbiAgICAgICAgICAgIG9wdC5zdGF0ZXMubG9jayA9IHRydWU7XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe2xvYWRlciA6IHRydWV9KTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvcGFydGljaXBhbnRzLycgKyBwYXJ0aWNpcGFudCArICcvZGVtb3RlJyxcbiAgICAgICAgICAgICAgICBkYXRhIDoge30sXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3Vwcy52aWV3UGFydGljaXBhbnRzKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwYXJ0aWNpcGFudFBlcm1pc3Npb25zVmlldyA6IGZ1bmN0aW9uKHBhcnRpY2lwYW50X2lkKXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jaykgcmV0dXJuO1xuICAgICAgICAgICAgb3B0LnN0YXRlcy5sb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICBpY29uIDogJ3VzZXItY29nJyxcbiAgICAgICAgICAgICAgICB0aGVtZSA6ICdkYXJrJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0xvYWRpbmcgUGVybWlzc2lvbnMuLi4nLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaDQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wX2N0cmwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bmxvY2tfYnV0dG9ucyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNiX2J0bl90eHQgOiAnU2F2ZSBQZXJtaXNzaW9ucycsXG4gICAgICAgICAgICAgICAgY2JfYnRuX2ljb24gOiAnc2F2ZScsXG4gICAgICAgICAgICAgICAgY2JfYnRuX3RoZW1lIDogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIG9wdC50aHJlYWQuaWQgKyAnL3BhcnRpY2lwYW50cy8nICsgcGFydGljaXBhbnRfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24ocGFydGljaXBhbnQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLmZpbGxNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogcGFydGljaXBhbnQub3duZXIubmFtZSsnIFBlcm1pc3Npb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA6IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5wYXJ0aWNpcGFudF9wZXJtaXNzaW9ucyhwYXJ0aWNpcGFudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYWdlTGlzdGVuZXJzLmxpc3RlbigpLnRvb2x0aXBzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5tX3NldHRpbmdfdG9nZ2xlXCIpLmNoYW5nZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpID8gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmFkZENsYXNzKCdiZy1saWdodCcpIDogJCh0aGlzKS5jbG9zZXN0KCd0cicpLnJlbW92ZUNsYXNzKCdiZy1saWdodCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBncm91cHMucGFydGljaXBhbnRQZXJtaXNzaW9uU2F2ZShwYXJ0aWNpcGFudF9pZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFydGljaXBhbnRQZXJtaXNzaW9uU2F2ZSA6IGZ1bmN0aW9uKHBhcnRpY2lwYW50X2lkKXtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5wYXlsb2FkKHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvcGFydGljaXBhbnRzLycgKyBwYXJ0aWNpcGFudF9pZCxcbiAgICAgICAgICAgICAgICBkYXRhIDoge1xuICAgICAgICAgICAgICAgICAgICBhZGRfcGFydGljaXBhbnRzIDogJChcIiNwX2FkZF9wYXJ0aWNpcGFudHNcIikuaXMoXCI6Y2hlY2tlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlX2ludml0ZXMgOiAkKFwiI3BfbWFuYWdlX2ludml0ZXNcIikuaXMoXCI6Y2hlY2tlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgc2VuZF9tZXNzYWdlcyA6ICQoXCIjcF9zZW5kX21lc3NhZ2VzXCIpLmlzKFwiOmNoZWNrZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIHNlbmRfa25vY2tzIDogJChcIiNwX3NlbmRfa25vY2tzXCIpLmlzKFwiOmNoZWNrZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X2NhbGxzIDogJChcIiNwX3N0YXJ0X2NhbGxzXCIpLmlzKFwiOmNoZWNrZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZV9ib3RzIDogJChcIiNwX21hbmFnZV9ib3RzXCIpLmlzKFwiOmNoZWNrZWRcIiksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24ocGFydGljaXBhbnQpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6ICdZb3UgdXBkYXRlZCAnK3BhcnRpY2lwYW50Lm93bmVyLm5hbWUrJ1xcJ3MgcGVybWlzc2lvbnMuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsIDogdHJ1ZVxuICAgICAgICAgICAgfSwgJ3B1dCcpO1xuICAgICAgICB9LFxuICAgICAgICBsZWF2ZUdyb3VwIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICBpY29uIDogJ3NpZ24tb3V0LWFsdCcsXG4gICAgICAgICAgICAgICAgYmFja2Ryb3BfY3RybCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlcmVkIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaXplIDogJ3NtJyxcbiAgICAgICAgICAgICAgICBoNCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRoZW1lIDogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgdGl0bGUgOiAnTGVhdmUgR3JvdXA/JyxcbiAgICAgICAgICAgICAgICBib2R5IDogJzxzcGFuIGNsYXNzPVwiaDUgZm9udC13ZWlnaHQtYm9sZFwiPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZSAnK29wdC50aHJlYWQubmFtZSsnPzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgIGNiX2J0bl90eHQgOiAnTGVhdmUnLFxuICAgICAgICAgICAgICAgIGNiX2J0bl9pY29uIDogJ3NpZ24tb3V0LWFsdCcsXG4gICAgICAgICAgICAgICAgY2JfYnRuX3RoZW1lIDogJ2RhbmdlcicsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvbGVhdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZF9pZCA6IG9wdC50aHJlYWQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA6IG9wdC50aHJlYWQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4uY2xvc2VPcGVuZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzLnJlbW92ZVRocmVhZChkYXRhLnRocmVhZF9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuQWxlcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IFwiWW91IGxlZnQgXCIrZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdCA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lIDogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlX21vZGFsIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuICAgIG5ld19mb3JtcyA9IHtcbiAgICAgICAgbmV3R3JvdXAgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgbGV0IHN1YmplY3QgPSAkKFwiI3N1YmplY3RcIikudmFsKCksIHByb3ZpZGVycyA9IFtdO1xuICAgICAgICAgICAgaWYob3B0LnN0YXRlcy5sb2NrIHx8ICFzdWJqZWN0LnRyaW0oKS5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIG9wdC5zdGF0ZXMubG9jayA9IHRydWU7XG4gICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV9jb250YWluZXIuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubG9hZGluZ190aHJlYWRfYmFzZSgpKTtcbiAgICAgICAgICAgIGlmKG9wdC5lbGVtZW50cy5kYXRhX3RhYmxlKXtcbiAgICAgICAgICAgICAgICBvcHQuZWxlbWVudHMuZGF0YV90YWJsZS4kKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl06Y2hlY2tlZCcpLm1hcCgoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnMucHVzaCh7YWxpYXMgOiB2YWx1ZS5kYXRhc2V0LnByb3ZpZGVyQWxpYXMsIGlkIDogdmFsdWUuZGF0YXNldC5wcm92aWRlcklkfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICdncm91cHMnLFxuICAgICAgICAgICAgICAgIGRhdGEgOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVycyA6IHByb3ZpZGVycy5sZW5ndGggPyBwcm92aWRlcnMgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IDogIHN1YmplY3RcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbih4KXtcbiAgICAgICAgICAgICAgICAgICAgbW91bnRlZC5yZXNldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5pbml0aWF0ZUdyb3VwKHtuZXcgOiB0cnVlfSwgeCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFpbCA6IExvYWRJbi5jbG9zZU9wZW5lZCxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBieXBhc3MgOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBuZXdQcml2YXRlIDogZnVuY3Rpb24oaXNGaWxlLCB2b2ljZU1lc3NhZ2UsIGF1ZGlvKXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jaykgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGZvcm0gPSBuZXcgRm9ybURhdGEoKSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2NvbnRlbnRzID0gb3B0LmVsZW1lbnRzLm1lc3NhZ2VfdGV4dF9pbnB1dC52YWwoKTtcbiAgICAgICAgICAgIGlmKGlzRmlsZSA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBvcHQuZWxlbWVudHMuZG9jX2ZpbGVbMF0uZmlsZXNbMF07XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBtZXRob2RzLnNlbmRVcGxvYWRGaWxlcyhmaWxlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZCh0eXBlLCBmaWxlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZih2b2ljZU1lc3NhZ2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZCgnYXVkaW8nLCBhdWRpbywgJ2F1ZGlvX21lc3NhZ2Uud2VibScpO1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdleHRyYScsIEpTT04uc3RyaW5naWZ5KHthdWRpb19tZXNzYWdlIDogdHJ1ZX0pKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYoIW1lc3NhZ2VfY29udGVudHMudHJpbSgpLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdtZXNzYWdlJywgbWVzc2FnZV9jb250ZW50cyk7XG4gICAgICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfdGV4dF9pbnB1dC52YWwoJycpLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtLmFwcGVuZCgncmVjaXBpZW50X2lkJywgb3B0LnN0b3JhZ2UudGVtcF9kYXRhLnByb3ZpZGVyX2lkKTtcbiAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdyZWNpcGllbnRfYWxpYXMnLCBvcHQuc3RvcmFnZS50ZW1wX2RhdGEucHJvdmlkZXJfYWxpYXMpO1xuICAgICAgICAgICAgb3B0LnN0YXRlcy5sb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5sb2FkaW5nX3RocmVhZF9iYXNlKCkpO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICdwcml2YXRlcycsXG4gICAgICAgICAgICAgICAgZGF0YSA6IGZvcm0sXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgICAgICAgICBtb3VudGVkLnJlc2V0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzLmluaXRpYXRlUHJpdmF0ZSh7bmV3IDogdHJ1ZX0sIHgsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWwgOiBMb2FkSW4uY2xvc2VPcGVuZWQsXG4gICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWUsXG4gICAgICAgICAgICAgICAgYnlwYXNzIDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgdGhyZWFkQXBwcm92YWwgOiBmdW5jdGlvbihhcHByb3ZlKXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jayB8fCAhb3B0LnRocmVhZC5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgb3B0LnN0YXRlcy5sb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5idXR0b24oKS5hZGRMb2FkZXIoe2lkIDogYXBwcm92ZSA/ICcjdGhyZWFkX2FwcHJvdmFsX2FjY2VwdF9idG4nIDogJyN0aHJlYWRfYXBwcm92YWxfZGVueV9idG4nfSk7XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIG9wdC50aHJlYWQuaWQgKyAnL2FwcHJvdmFsJyxcbiAgICAgICAgICAgICAgICBkYXRhIDoge1xuICAgICAgICAgICAgICAgICAgICBhcHByb3ZlIDogYXBwcm92ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IFwiWW91IFwiICsgKGFwcHJvdmUgPyAnYXBwcm92ZWQnIDogJ2RlbmllZCcpICsgJyB0aGUgbWVzc2FnZSByZXF1ZXN0IGZyb20gJyArIG9wdC50aHJlYWQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lIDogYXBwcm92ZSA/ICdzdWNjZXNzJyA6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGlmKGFwcHJvdmUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9hZEluLmluaXRpYXRlX3RocmVhZCh7dGhyZWFkX2lkIDogb3B0LnRocmVhZC5pZCwgZm9yY2UgOiB0cnVlfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5yZW1vdmVUaHJlYWQob3B0LnRocmVhZC5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4uY2xvc2VPcGVuZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWUsXG4gICAgICAgICAgICAgICAgYnlwYXNzIDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgQ2FsbHMgPSB7XG4gICAgICAgIHNob3dDcmVhdGVNb2RhbCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgc2l6ZSA6ICdzbScsXG4gICAgICAgICAgICAgICAgaWNvbiA6ICd1c2VyLXBsdXMnLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXIgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNlbnRlcmVkIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1bmxvY2tfYnV0dG9ucyA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93X2Nsb3NlIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgYmFja2Ryb3BfY3RybCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnQ3JlYXRpbmcgQ2FsbCcsXG4gICAgICAgICAgICAgICAgdGhlbWU6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGluaXRDYWxsIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jaykgcmV0dXJuO1xuICAgICAgICAgICAgb3B0LnN0YXRlcy5sb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5idXR0b24oKS5hZGRMb2FkZXIoe2lkIDogJy52aWRlb19idG4nfSk7XG4gICAgICAgICAgICBDYWxscy5zaG93Q3JlYXRlTW9kYWwoZmFsc2UpO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgJy9jYWxscycsXG4gICAgICAgICAgICAgICAgZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgQ2FsbE1hbmFnZXIuam9pbihkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZ5TWFuYWdlci5oZWFydGJlYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmJ1dHRvbigpLnJlbW92ZUxvYWRlcigpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbCA6IHRydWUsXG4gICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHNlbmRLbm9jayA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZihvcHQuc3RhdGVzLmxvY2sgfHwgIU5vdGlmeU1hbmFnZXIuc29ja2V0cygpLnN0YXR1cykgcmV0dXJuO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLmJ1dHRvbigpLmFkZExvYWRlcih7aWQgOiAnI2tub2tfYnRuJ30pO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzLycgKyBvcHQudGhyZWFkLmlkICsgJy9rbm9jay1rbm9jaycsXG4gICAgICAgICAgICAgICAgZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgTm90aWZ5TWFuYWdlci5zb3VuZCgna25vaycpO1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6ICdLbm9jayBLbm9jayEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA6IFwiWW91IHNlbnQgYSBrbm9jayB0byBcIiArIG9wdC50aHJlYWQubmFtZSArIFwiIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgTXV0ZSA9IHtcbiAgICAgICAgbXV0ZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBsZXQgcGF5bG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnBheWxvYWQoe1xuICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAndGhyZWFkcy8nICsgb3B0LnRocmVhZC5pZCArICcvbXV0ZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogXCJZb3UgbXV0ZWQgXCIgKyBvcHQudGhyZWFkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvYWRJbi5pbml0aWF0ZV90aHJlYWQoe3RocmVhZF9pZCA6IG9wdC50aHJlYWQuaWQsIGZvcmNlIDogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbCA6IHRydWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICBpY29uIDogJ3ZvbHVtZS1tdXRlJyxcbiAgICAgICAgICAgICAgICBzaXplIDogJ21kJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaDQgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aGVtZSA6ICdwcmltYXJ5JyxcbiAgICAgICAgICAgICAgICB0aXRsZSA6ICdNdXRlPycsXG4gICAgICAgICAgICAgICAgYm9keSA6ICc8c3BhbiBjbGFzcz1cImg1IGZvbnQtd2VpZ2h0LWJvbGRcIj5SZWFsbHkgbXV0ZSAnK29wdC50aHJlYWQubmFtZSsnPyBZb3Ugd2lsbCBubyBsb25nZXIgcmVjZWl2ZSBhbnkgYWxlcnRzIG9yIG5vdGlmaWNhdGlvbnMgZnJvbSB0aGF0IGNvbnZlcnNhdGlvbi48L3NwYW4+JyxcbiAgICAgICAgICAgICAgICBjYl9idG5fdHh0IDogJ011dGUnLFxuICAgICAgICAgICAgICAgIGNiX2J0bl9pY29uIDogJ3ZvbHVtZS1tdXRlJyxcbiAgICAgICAgICAgICAgICBjYl9idG5fdGhlbWUgOiAncHJpbWFyeScsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgOiBwYXlsb2FkXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH0sXG4gICAgICAgIHVubXV0ZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucGF5bG9hZCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIG9wdC50aHJlYWQuaWQgKyAnL3VubXV0ZScsXG4gICAgICAgICAgICAgICAgZGF0YSA6IHt9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IFwiWW91IHVuLW11dGVkIFwiICsgb3B0LnRocmVhZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBvcHQudGhyZWFkLmlkLCBmb3JjZSA6IHRydWV9KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuICAgIExvYWRJbiA9IHtcbiAgICAgICAgY2xvc2VPcGVuZWQgOiBmdW5jdGlvbihmb3JjZSl7XG4gICAgICAgICAgICBpZihvcHQuc3RhdGVzLmxvY2sgJiYgIWZvcmNlKSByZXR1cm47XG4gICAgICAgICAgICBpZihNZXNzZW5nZXIuY29tbW9uKCkubW9iaWxlKSBUaHJlYWRUZW1wbGF0ZXMubW9iaWxlKGZhbHNlKTtcbiAgICAgICAgICAgIG1vdW50ZWQucmVzZXQoZmFsc2UpO1xuICAgICAgICAgICAgbW91bnRlZC5Jbml0aWFsaXplKHtcbiAgICAgICAgICAgICAgICB0eXBlIDogNVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3R5cGUgOiA1fSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQilcbiAgICAgICAgfSxcbiAgICAgICAgbWVzc2FnZUVkaXRzIDogZnVuY3Rpb24ocm91dGUpe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQpIHJldHVybjtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICBzaXplIDogJ21kJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRoZW1lIDogJ2RhcmsnLFxuICAgICAgICAgICAgICAgIGljb24gOiAnZWRpdCcsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdMb2FkaW5nIEVkaXQgSGlzdG9yeS4uLicsXG4gICAgICAgICAgICAgICAgcHJlX2xvYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoNDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IHJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLmZpbGxNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogJ01lc3NhZ2UgRWRpdCBIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA6IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5tZXNzYWdlX2VkaXRfaGlzdG9yeShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHRocmVhZHMgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICd0aHJlYWRzJyxcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHMgPSBkYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdC5lbGVtZW50cy50aHJlYWRfYXJlYS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIW9wdC5zdG9yYWdlLnRocmVhZHMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzLmNoZWNrU2hvd1RocmVhZFNlYXJjaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy50aHJlYWRfYXJlYS5odG1sKCc8aDQgaWQ9XCJub19tZXNzYWdlX3dhcm5pbmdcIiBjbGFzcz1cInRleHQtY2VudGVyIG10LTRcIj48c3BhbiBjbGFzcz1cImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utc2Vjb25kYXJ5XCI+PGkgY2xhc3M9XCJmYXMgZmEtY29tbWVudHNcIj48L2k+IE5vIGNvbnZlcnNhdGlvbnM8L3NwYW4+PC9oND4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzLmRyYXdUaHJlYWRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5jYWxjVW5yZWFkVGhyZWFkcygpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWlsIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYob3B0LnN0YXRlcy5sb2FkX2luX3JldHJpZXMgPj0gNil7XG4gICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5BbGVydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWUgOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogJ1dlIGNvdWxkIG5vdCBsb2FkIGluIHlvdXIgdGhyZWFkcy4gUGxlYXNlIHRyeSByZWZyZXNoaW5nIHlvdXIgYnJvd3NlciBwYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdCA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdC5zdGF0ZXMubG9hZF9pbl9yZXRyaWVzKys7XG4gICAgICAgICAgICAgICAgICAgIExvYWRJbi50aHJlYWRzKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICB0aHJlYWRMb2dzIDogZnVuY3Rpb24ocGFnaW5hdGUsIHBhZ2Upe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQpIHJldHVybjtcbiAgICAgICAgICAgIGlmKHBhZ2luYXRlKXtcbiAgICAgICAgICAgICAgICAkKFwiI2xvZ19wYWdpbmF0ZV9idG5cIikuaHRtbChNZXNzZW5nZXIuYWxlcnQoKS5sb2FkZXIodHJ1ZSkpO1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd0aHJlYWRzLycrb3B0LnRocmVhZC5pZCsnL2xvZ3MvcGFnZS8nICsgcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNsb2dfcGFnaW5hdGVfYnRuXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNib2R5X21vZGFsXCIpLmFwcGVuZChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkudGhyZWFkX2xvZ3MoZGF0YSkpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICBzaXplIDogJ2xnJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRoZW1lIDogJ2RhcmsnLFxuICAgICAgICAgICAgICAgIGljb24gOiAnZGF0YWJhc2UnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnTG9hZGluZyBMb2dzLi4uJyxcbiAgICAgICAgICAgICAgICBwcmVfbG9hZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGg0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvblJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nK29wdC50aHJlYWQuaWQrJy9sb2dzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG9wdC50aHJlYWQubmFtZSsnIExvZ3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5IDogZGF0YS5kYXRhLmxlbmd0aCA/IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfbG9ncyhkYXRhKSA6ICc8aDMgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtdC0yXCI+PHNwYW4gY2xhc3M9XCJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXNlY29uZGFyeVwiPjxpIGNsYXNzPVwiZmFzIGZhLWRhdGFiYXNlXCI+PC9pPiBObyBsb2dzPC9zcGFuPjwvaDM+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHRocmVhZEltYWdlcyA6IGZ1bmN0aW9uKHBhZ2luYXRlLCBwYWdlKXtcbiAgICAgICAgICAgIGlmKCFvcHQudGhyZWFkLmlkKSByZXR1cm47XG4gICAgICAgICAgICBpZihwYWdpbmF0ZSl7XG4gICAgICAgICAgICAgICAgJChcIiNpbWFnZV9wYWdpbmF0ZV9idG5cIikuaHRtbChNZXNzZW5nZXIuYWxlcnQoKS5sb2FkZXIodHJ1ZSkpO1xuICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd0aHJlYWRzLycrb3B0LnRocmVhZC5pZCsnL2ltYWdlcy9wYWdlLycgKyBwYWdlLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltYWdlX3BhZ2luYXRlX2J0blwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjYm9keV9tb2RhbFwiKS5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9pbWFnZXMoZGF0YSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBMYXp5SW1hZ2VzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgc2l6ZSA6ICdmdWxsc2NyZWVuJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdGhlbWUgOiAnZGFyaycsXG4gICAgICAgICAgICAgICAgaWNvbiA6ICdpbWFnZXMnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnTG9hZGluZyBJbWFnZXMuLi4nLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaDQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd0aHJlYWRzLycrb3B0LnRocmVhZC5pZCsnL2ltYWdlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuZmlsbE1vZGFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgOiBvcHQudGhyZWFkLm5hbWUrJyBTaGFyZWQgSW1hZ2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA6IGRhdGEuZGF0YS5sZW5ndGggPyBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkudGhyZWFkX2ltYWdlcyhkYXRhKSA6ICc8aDMgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtdC0yXCI+PHNwYW4gY2xhc3M9XCJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXNlY29uZGFyeVwiPjxpIGNsYXNzPVwiZmFzIGZhLWltYWdlc1wiPjwvaT4gTm8gSW1hZ2VzPC9zcGFuPjwvaDM+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExhenlJbWFnZXMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgdGhyZWFkRG9jdW1lbnRzIDogZnVuY3Rpb24ocGFnaW5hdGUsIHBhZ2Upe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQpIHJldHVybjtcbiAgICAgICAgICAgIGlmKHBhZ2luYXRlKXtcbiAgICAgICAgICAgICAgICAkKFwiI2RvY3VtZW50X3BhZ2luYXRlX2J0blwiKS5odG1sKE1lc3Nlbmdlci5hbGVydCgpLmxvYWRlcih0cnVlKSk7XG4gICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkrJ3RocmVhZHMvJytvcHQudGhyZWFkLmlkKycvZG9jdW1lbnRzL3BhZ2UvJyArIHBhZ2UsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjZG9jdW1lbnRfcGFnaW5hdGVfYnRuXCIpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNkb2N1bWVudHNfaGlzdG9yeVwiKS5hcHBlbmQoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9kb2N1bWVudHMoZmFsc2UsIGRhdGEpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgc2l6ZSA6ICdsZycsXG4gICAgICAgICAgICAgICAgYmFja2Ryb3BfY3RybCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0aGVtZSA6ICdkYXJrJyxcbiAgICAgICAgICAgICAgICBpY29uIDogJ2ZpbGUtYWx0JyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0xvYWRpbmcgRG9jdW1lbnRzLi4uJyxcbiAgICAgICAgICAgICAgICBwcmVfbG9hZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGg0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvblJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nK29wdC50aHJlYWQuaWQrJy9kb2N1bWVudHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLmZpbGxNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlIDogb3B0LnRocmVhZC5uYW1lKycgU2hhcmVkIERvY3VtZW50cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgOiBkYXRhLmRhdGEubGVuZ3RoID8gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9kb2N1bWVudHModHJ1ZSwgZGF0YSkgOiAnPGgzIGNsYXNzPVwidGV4dC1jZW50ZXIgbXQtMlwiPjxzcGFuIGNsYXNzPVwiYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS1zZWNvbmRhcnlcIj48aSBjbGFzcz1cImZhcyBmYS1maWxlLWFsdFwiPjwvaT4gTm8gRG9jdW1lbnRzPC9zcGFuPjwvaDM+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG1lc3NhZ2VSZWFjdGlvbnMgOiBmdW5jdGlvbihtZXNzYWdlSWQpe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQpIHJldHVybjtcbiAgICAgICAgICAgIE1lc3Nlbmdlci5hbGVydCgpLk1vZGFsKHtcbiAgICAgICAgICAgICAgICBzaXplIDogJ21kJyxcbiAgICAgICAgICAgICAgICBiYWNrZHJvcF9jdHJsIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRoZW1lIDogJ2RhcmsnLFxuICAgICAgICAgICAgICAgIGljb24gOiAnZ3Jpbi10b25ndWUnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnTG9hZGluZyBSZWFjdGlvbnMuLi4nLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaDQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd0aHJlYWRzLycrb3B0LnRocmVhZC5pZCsnL21lc3NhZ2VzLycrbWVzc2FnZUlkKycvcmVhY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6ICdNZXNzYWdlIFJlYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgOiBUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuc2hvd19tZXNzYWdlX3JlYWN0aW9ucyhkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHRocmVhZEF1ZGlvIDogZnVuY3Rpb24ocGFnaW5hdGUsIHBhZ2Upe1xuICAgICAgICAgICAgaWYoIW9wdC50aHJlYWQuaWQpIHJldHVybjtcbiAgICAgICAgICAgIGlmKHBhZ2luYXRlKXtcbiAgICAgICAgICAgICAgICAkKFwiI2F1ZGlvX3BhZ2luYXRlX2J0blwiKS5odG1sKE1lc3Nlbmdlci5hbGVydCgpLmxvYWRlcih0cnVlKSk7XG4gICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkrJ3RocmVhZHMvJytvcHQudGhyZWFkLmlkKycvYXVkaW8vcGFnZS8nICsgcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNhdWRpb19wYWdpbmF0ZV9idG5cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2F1ZGlvX2hpc3RvcnlcIikuYXBwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfYXVkaW8oZmFsc2UsIGRhdGEpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5Nb2RhbCh7XG4gICAgICAgICAgICAgICAgc2l6ZSA6ICdsZycsXG4gICAgICAgICAgICAgICAgYmFja2Ryb3BfY3RybCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93IDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0aGVtZSA6ICdkYXJrJyxcbiAgICAgICAgICAgICAgICBpY29uIDogJ211c2ljJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0xvYWRpbmcgQXVkaW8uLi4nLFxuICAgICAgICAgICAgICAgIHByZV9sb2FkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaDQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJKyd0aHJlYWRzLycrb3B0LnRocmVhZC5pZCsnL2F1ZGlvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG9wdC50aHJlYWQubmFtZSsnIFNoYXJlZCBBdWRpbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgOiBkYXRhLmRhdGEubGVuZ3RoID8gVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnRocmVhZF9hdWRpbyh0cnVlLCBkYXRhKSA6ICc8aDMgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtdC0yXCI+PHNwYW4gY2xhc3M9XCJiYWRnZSBiYWRnZS1waWxsIGJhZGdlLXNlY29uZGFyeVwiPjxpIGNsYXNzPVwiZmFzIGZhLW11c2ljXCI+PC9pPiBObyBBdWRpbzwvc3Bhbj48L2gzPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICB0aHJlYWRWaWRlb3MgOiBmdW5jdGlvbihwYWdpbmF0ZSwgcGFnZSl7XG4gICAgICAgICAgICBpZighb3B0LnRocmVhZC5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYocGFnaW5hdGUpe1xuICAgICAgICAgICAgICAgICQoXCIjdmlkZW9fcGFnaW5hdGVfYnRuXCIpLmh0bWwoTWVzc2VuZ2VyLmFsZXJ0KCkubG9hZGVyKHRydWUpKTtcbiAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nK29wdC50aHJlYWQuaWQrJy92aWRlb3MvcGFnZS8nICsgcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiN2aWRlb19wYWdpbmF0ZV9idG5cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI3ZpZGVvX2hpc3RvcnlcIikuYXBwZW5kKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfdmlkZW9zKGZhbHNlLCBkYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWVzc2VuZ2VyLmFsZXJ0KCkuTW9kYWwoe1xuICAgICAgICAgICAgICAgIHNpemUgOiAnbGcnLFxuICAgICAgICAgICAgICAgIGJhY2tkcm9wX2N0cmwgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA6IHRydWUsXG4gICAgICAgICAgICAgICAgdGhlbWUgOiAnZGFyaycsXG4gICAgICAgICAgICAgICAgaWNvbiA6ICd2aWRlbycsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdMb2FkaW5nIFZpZGVvcy4uLicsXG4gICAgICAgICAgICAgICAgcHJlX2xvYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoNDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkrJ3RocmVhZHMvJytvcHQudGhyZWFkLmlkKycvdmlkZW9zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5nZXIuYWxlcnQoKS5maWxsTW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA6IG9wdC50aHJlYWQubmFtZSsnIFNoYXJlZCBWaWRlb3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5IDogZGF0YS5kYXRhLmxlbmd0aCA/IFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS50aHJlYWRfdmlkZW9zKHRydWUsIGRhdGEpIDogJzxoMyBjbGFzcz1cInRleHQtY2VudGVyIG10LTJcIj48c3BhbiBjbGFzcz1cImJhZGdlIGJhZGdlLXBpbGwgYmFkZ2Utc2Vjb25kYXJ5XCI+PGkgY2xhc3M9XCJmYXMgZmEtdmlkZW9cIj48L2k+IE5vIFZpZGVvczwvc3Bhbj48L2gzPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICB0aHJlYWQgOiBmdW5jdGlvbih0aHJlYWRfaWQsIHN1Y2Nlc3Mpe1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nICsgdGhyZWFkX2lkLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRocmVhZCA9IG1ldGhvZHMubG9jYXRlU3RvcmFnZUl0ZW0oe3R5cGUgOiAndGhyZWFkJywgaWQgOiB0aHJlYWRfaWR9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIXRocmVhZC5mb3VuZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzLnVuc2hpZnQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5zdG9yYWdlLnRocmVhZHMuc3BsaWNlKHRocmVhZC5pbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQuc3RvcmFnZS50aHJlYWRzLnVuc2hpZnQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5hZGRUaHJlYWQoZGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHN1Y2Nlc3MpIHN1Y2Nlc3MoZGF0YSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBib2JibGVIZWFkcyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZighb3B0LnRocmVhZC5pZCkgcmV0dXJuO1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSsndGhyZWFkcy8nK29wdC50aHJlYWQuaWQrJy9wYXJ0aWNpcGFudHMnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UucGFydGljaXBhbnRzID0gZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAkKFwiLmJvYmJsZS1oZWFkLWl0ZW1cIikucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdC5zdG9yYWdlLmFjdGl2ZV9wcm9maWxlcy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0LnN0b3JhZ2UuYWN0aXZlX3Byb2ZpbGVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMudXBkYXRlQm9iYmxlSGVhZCh2YWx1ZS5wcm92aWRlcl9pZCwgbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYob3B0LnRocmVhZC50eXBlID09PSAxICYmIG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG9wdC5zdG9yYWdlLnBhcnRpY2lwYW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTWVzc2VuZ2VyLmlzUHJvdmlkZXIob3B0LnN0b3JhZ2UucGFydGljaXBhbnRzW2ldLm93bmVyX2lkLCBvcHQuc3RvcmFnZS5wYXJ0aWNpcGFudHNbaV0ub3duZXJfdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy50aHJlYWRPbmxpbmVTdGF0dXMob3B0LnN0b3JhZ2UucGFydGljaXBhbnRzW2ldLm93bmVyLm9wdGlvbnMub25saW5lX3N0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZHMuZHJhd0JvYmJsZUhlYWRzKClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWwgOiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBzZWFyY2ggOiBmdW5jdGlvbihub0hpc3Rvcnkpe1xuICAgICAgICAgICAgaWYoIW9wdC5JTklUKSByZXR1cm47XG4gICAgICAgICAgICBpZihNZXNzZW5nZXIuY29tbW9uKCkubW9iaWxlKSBUaHJlYWRUZW1wbGF0ZXMubW9iaWxlKHRydWUpO1xuICAgICAgICAgICAgb3B0LmVsZW1lbnRzLm1lc3NhZ2VfY29udGFpbmVyLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLnNlYXJjaF9iYXNlKCkpO1xuICAgICAgICAgICAgbW91bnRlZC5yZXNldChmYWxzZSk7XG4gICAgICAgICAgICBtb3VudGVkLkluaXRpYWxpemUoe1xuICAgICAgICAgICAgICAgIHR5cGUgOiA3LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZighbm9IaXN0b3J5KSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3R5cGUgOiA3fSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQiArICc/c2VhcmNoJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRhY3RzIDogZnVuY3Rpb24obm9IaXN0b3J5KXtcbiAgICAgICAgICAgIGlmKCFvcHQuSU5JVCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmNvbW1vbigpLm1vYmlsZSkgVGhyZWFkVGVtcGxhdGVzLm1vYmlsZSh0cnVlKTtcbiAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5jb250YWN0c19iYXNlKCkpO1xuICAgICAgICAgICAgbW91bnRlZC5yZXNldChmYWxzZSk7XG4gICAgICAgICAgICBvcHQudGhyZWFkLnR5cGUgPSA2O1xuICAgICAgICAgICAgTWVzc2VuZ2VyLnhocigpLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHJvdXRlIDogTWVzc2VuZ2VyLmNvbW1vbigpLkFQSSArICdmcmllbmRzJyxcbiAgICAgICAgICAgICAgICBzdWNjZXNzIDogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjbWVzc2VuZ2VyX2NvbnRhY3RzX2N0bnJcIikuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkuY29udGFjdHMoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICBpZighbm9IaXN0b3J5KSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3R5cGUgOiA2fSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQiArICc/Y29udGFjdHMnKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5sb2FkRGF0YVRhYmxlKCAkKFwiI2NvbnRhY3RfbGlzdF90YWJsZVwiKSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWwgOiBMb2FkSW4uY2xvc2VPcGVuZWQsXG4gICAgICAgICAgICAgICAgZmFpbF9hbGVydCA6IHRydWUsXG4gICAgICAgICAgICAgICAgYnlwYXNzIDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlUHJpdmF0ZSA6IGZ1bmN0aW9uKGFyZywgbm9IaXN0b3J5KXtcbiAgICAgICAgICAgIGlmKENhbGxNYW5hZ2VyLnN0YXRlKCkuaW5pdGlhbGl6ZWQpe1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKE1lc3Nlbmdlci5jb21tb24oKS5XRUIgKyAnL3JlY2lwaWVudC8nK2FyZy5hbGlhcysnLycrYXJnLmlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV9jb250YWluZXIuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubG9hZGluZ190aHJlYWRfYmFzZSgpKTtcbiAgICAgICAgICAgIG1vdW50ZWQucmVzZXQoZmFsc2UpO1xuICAgICAgICAgICAgaWYoTWVzc2VuZ2VyLmNvbW1vbigpLm1vYmlsZSkgVGhyZWFkVGVtcGxhdGVzLm1vYmlsZSh0cnVlKTtcbiAgICAgICAgICAgICQoXCIubW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAncHJpdmF0ZXMvcmVjaXBpZW50LycrYXJnLmFsaWFzKycvJythcmcuaWQsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICBpZihkYXRhLnRocmVhZF9pZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2FkSW4uaW5pdGlhdGVfdGhyZWFkKHt0aHJlYWRfaWQgOiBkYXRhLnRocmVhZF9pZH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9wdC5lbGVtZW50cy5tZXNzYWdlX2NvbnRhaW5lci5odG1sKFRocmVhZFRlbXBsYXRlcy5yZW5kZXIoKS5yZW5kZXJfbmV3X3ByaXZhdGUoZGF0YS5yZWNpcGllbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIW5vSGlzdG9yeSkgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt0eXBlIDogMywgaWQgOiBhcmcuaWQsIGFsaWFzIDogYXJnLmFsaWFzfSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQiArICcvcmVjaXBpZW50LycrYXJnLmFsaWFzKycvJythcmcuaWQpO1xuICAgICAgICAgICAgICAgICAgICBvcHQudGhyZWFkLm1lc3NhZ2luZyA9IGRhdGEucmVjaXBpZW50Lm9wdGlvbnMuY2FuX21lc3NhZ2VfZmlyc3Q7XG4gICAgICAgICAgICAgICAgICAgIG1vdW50ZWQuSW5pdGlhbGl6ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZF9pZCA6ICduZXcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdF9uYW1lIDogZGF0YS5yZWNpcGllbnQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfZGF0YSA6IGRhdGEucmVjaXBpZW50XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmYWlsIDogTG9hZEluLmNsb3NlT3BlbmVkLFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJ5cGFzcyA6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUdyb3VwIDogZnVuY3Rpb24obm9IaXN0b3J5KXtcbiAgICAgICAgICAgIGlmKG9wdC5zdGF0ZXMubG9jaykgcmV0dXJuO1xuICAgICAgICAgICAgbW91bnRlZC5yZXNldChmYWxzZSk7XG4gICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV9jb250YWluZXIuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubmV3X2dyb3VwX2Jhc2UoKSk7XG4gICAgICAgICAgICBpZighbm9IaXN0b3J5KSB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe3R5cGUgOiA0fSwgbnVsbCwgTWVzc2VuZ2VyLmNvbW1vbigpLldFQiArICc/bmV3R3JvdXAnKTtcbiAgICAgICAgICAgIGlmKE1lc3Nlbmdlci5jb21tb24oKS5tb2JpbGUpIFRocmVhZFRlbXBsYXRlcy5tb2JpbGUodHJ1ZSk7XG4gICAgICAgICAgICBtb3VudGVkLkluaXRpYWxpemUoe1xuICAgICAgICAgICAgICAgIHR5cGUgOiA0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE1lc3Nlbmdlci54aHIoKS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICByb3V0ZSA6IE1lc3Nlbmdlci5jb21tb24oKS5BUEkgKyAnZnJpZW5kcycsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICAgICAgICAgICAgICBpZihvcHQudGhyZWFkLnR5cGUgPT09IDQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNtZXNzYWdlc19jb250YWluZXJfbmV3X2dyb3VwXCIpLmh0bWwoVGhyZWFkVGVtcGxhdGVzLnJlbmRlcigpLm5ld19ncm91cF9mcmllbmRzKGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMubG9hZERhdGFUYWJsZSgkKFwiI2FkZF9ncm91cF9wYXJ0aWNpcGFudHNcIiksIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWxfYWxlcnQgOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBpbml0aWF0ZV90aHJlYWQgOiBmdW5jdGlvbihhcmcsIG5vSGlzdG9yeSl7XG4gICAgICAgICAgICBpZihvcHQuc3RhdGVzLmxvY2sgfHwgKGFyZy50aHJlYWRfaWQgPT09IG9wdC50aHJlYWQuaWQgJiYgIShcImZvcmNlXCIgaW4gYXJnKSkpIHJldHVybjtcbiAgICAgICAgICAgIGlmKE1lc3Nlbmdlci5jb21tb24oKS5tb2JpbGUpIFRocmVhZFRlbXBsYXRlcy5tb2JpbGUodHJ1ZSk7XG4gICAgICAgICAgICBvcHQuZWxlbWVudHMubWVzc2FnZV9jb250YWluZXIuaHRtbChUaHJlYWRUZW1wbGF0ZXMucmVuZGVyKCkubG9hZGluZ190aHJlYWRfYmFzZSgpKTtcbiAgICAgICAgICAgIG1vdW50ZWQucmVzZXQodHJ1ZSk7XG4gICAgICAgICAgICBvcHQudGhyZWFkLmluaXRpYWxpemluZyA9IHRydWU7XG4gICAgICAgICAgICBvcHQudGhyZWFkLl9pZCA9IGFyZy50aHJlYWRfaWQ7XG4gICAgICAgICAgICBNZXNzZW5nZXIueGhyKCkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgcm91dGUgOiBNZXNzZW5nZXIuY29tbW9uKCkuQVBJICsgJ3RocmVhZHMvJyArIGFyZy50aHJlYWRfaWQgKyAnL2xvYWQnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3MgOiBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5ncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBtZXRob2RzLmluaXRpYXRlR3JvdXAoYXJnLCBkYXRhLCBub0hpc3RvcnkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG1ldGhvZHMuaW5pdGlhdGVQcml2YXRlKGFyZywgZGF0YSwgbm9IaXN0b3J5KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZhaWwgOiBMb2FkSW4uY2xvc2VPcGVuZWQsXG4gICAgICAgICAgICAgICAgYnlwYXNzIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmYWlsX2FsZXJ0IDogdHJ1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdCA6IG1vdW50ZWQuSW5pdGlhbGl6ZSxcbiAgICAgICAgSW1wb3J0IDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBJbXBvcnRzXG4gICAgICAgIH0sXG4gICAgICAgIG5ld0Zvcm1zIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBuZXdfZm9ybXNcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbHMgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIENhbGxzXG4gICAgICAgIH0sXG4gICAgICAgIHNlbmQgOiBtZXRob2RzLnNlbmRNZXNzYWdlLFxuICAgICAgICBhcmNoaXZlIDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBhcmNoaXZlXG4gICAgICAgIH0sXG4gICAgICAgIGVkaXRNZXNzYWdlIDogbWV0aG9kcy5lZGl0TWVzc2FnZSxcbiAgICAgICAgcmVwbHkgOiBtZXRob2RzLnJlcGx5VG9NZXNzYWdlLFxuICAgICAgICBhZGROZXdSZWFjdGlvbiA6IG1ldGhvZHMuYWRkTmV3UmVhY3Rpb24sXG4gICAgICAgIHJlbW92ZVJlYWN0aW9uIDogbWV0aG9kcy5yZW1vdmVSZWFjdGlvbixcbiAgICAgICAgbXV0ZSA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gTXV0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ3JvdXAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cHNcbiAgICAgICAgfSxcbiAgICAgICAgbG9hZCA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gTG9hZEluXG4gICAgICAgIH0sXG4gICAgICAgIHN3aXRjaFRvZ2dsZSA6IG1vdW50ZWQuc3dpdGNoVG9nZ2xlTGlzdGVuZXIsXG4gICAgICAgIGxvY2sgOiBmdW5jdGlvbihhcmcpe1xuICAgICAgICAgICAgaWYodHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSBvcHQuc3RhdGVzLmxvY2sgPSBhcmdcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdGUgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aHJlYWRfaWQgOiBvcHQudGhyZWFkLmlkLFxuICAgICAgICAgICAgICAgIHRocmVhZF9sb2Nrb3V0IDogb3B0LnRocmVhZC5sb2Nrb3V0LFxuICAgICAgICAgICAgICAgIHR5cGUgOiBvcHQudGhyZWFkLnR5cGUsXG4gICAgICAgICAgICAgICAgdGhyZWFkX2FkbWluIDogb3B0LnRocmVhZC5hZG1pbixcbiAgICAgICAgICAgICAgICB0X25hbWUgOiBvcHQudGhyZWFkLm5hbWUsXG4gICAgICAgICAgICAgICAgX3RocmVhZCA6IG9wdC50aHJlYWQuX3RocmVhZCxcbiAgICAgICAgICAgICAgICBvbmxpbmVfc3RhdHVzIDogb3B0LnNvY2tldC5vbmxpbmVfc3RhdHVzX3NldHRpbmcsXG4gICAgICAgICAgICAgICAgc29ja2V0U3RhdHVzQ2hlY2sgOiBIZWFsdGguY2hlY2tDb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgIHJlQ29ubmVjdGVkIDogSGVhbHRoLnJlQ29ubmVjdGVkLFxuICAgICAgICAgICAgICAgIG9ubGluZSA6IGZ1bmN0aW9uKHN0YXRlKXtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kcy5zdGF0dXNPbmxpbmUoc3RhdGUsIHRydWUpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGF0dXNTZXR0aW5nIDogbWV0aG9kcy51cGRhdGVPbmxpbmVTdGF0dXNTZXR0aW5nXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbn0oKSk7Il0sIm5hbWVzIjpbIndpbmRvdyIsIlRocmVhZE1hbmFnZXIiLCJvcHQiLCJJTklUIiwiT1JJR0lOQUxfQVJHIiwiU0VUVVAiLCJBUEkiLCJNZXNzZW5nZXIiLCJjb21tb24iLCJ0aHJlYWQiLCJpZCIsInR5cGUiLCJuYW1lIiwiYWRtaW4iLCJwZW5kaW5nIiwibXV0ZWQiLCJyZXBseWluZyIsInJlcGx5X3RvX2lkIiwiYXdhaXRpbmdfbXlfYXBwcm92YWwiLCJjcmVhdGVkX2F0IiwibWVzc2FnZXNfdW5yZWFkIiwiY2xpY2tfdG9fcmVhZCIsIm1lc3NhZ2luZyIsImNhbl9jYWxsIiwibG9ja291dCIsInRocmVhZF9oaXN0b3J5IiwiaGlzdG9yeV9pZCIsImhpc3Rvcnlfcm91dGUiLCJoaXN0b3J5X2xvYWRpbmciLCJpbml0aWFsaXppbmciLCJfaWQiLCJfdGhyZWFkIiwic3RhdGVzIiwibG9jayIsImxvYWRfaW5fcmV0cmllcyIsInN0YXRlX2xvY2tvdXRfcmV0cmllcyIsInRocmVhZF9maWx0ZXJlZCIsInRocmVhZF9maWx0ZXJfc2VhcmNoIiwibWVzc2VuZ2VyX3NlYXJjaF90ZXJtIiwic29ja2V0Iiwib25saW5lX3N0YXR1c19zZXR0aW5nIiwiY2hhdCIsInNvY2tldF9yZXRyaWVzIiwic2VuZF90eXBpbmciLCJpc19hd2F5Iiwic3RvcmFnZSIsImFjdGl2ZV9wcm9maWxlcyIsIndob190eXBpbmciLCJib3RfdHlwaW5nIiwidGhyZWFkcyIsIm1lc3NhZ2VzIiwicGFydGljaXBhbnRzIiwicGVuZGluZ19tZXNzYWdlcyIsInRlbXBfZGF0YSIsInRpbWVycyIsIm1hcmtfcmVhZF90aW1lb3V0IiwicmVjZW50X2JvYmJsZV90aW1lb3V0Iiwic29ja2V0X2ludGVydmFsIiwicmVtb3ZlX3R5cGluZ19pbnRlcnZhbCIsInByaXZhdGVfYm9iYmxlX3JlZnJlc2hfdGltZW91dCIsImJvYmJsZV9yZWZyZXNoX2ludGVydmFsIiwiZHJhZ19kcm9wX292ZXJsYXlfaGlkZSIsImVsZW1lbnRzIiwibmF2X3NlYXJjaF9saW5rIiwiJCIsIm15X2F2YXRhcl9hcmVhIiwidGhyZWFkX2FyZWEiLCJtZXNzYWdlX2NvbnRhaW5lciIsIm1lc3NhZ2Vfc2lkZWJhcl9jb250YWluZXIiLCJzb2NrZXRfZXJyb3JfbXNnIiwidGhyZWFkX3NlYXJjaF9pbnB1dCIsInRocmVhZF9zZWFyY2hfYmFyIiwiZHJhZ19kcm9wX3pvbmUiLCJtZXNzZW5nZXJfc2VhcmNoX2lucHV0IiwibWVzc2VuZ2VyX3NlYXJjaF9yZXN1bHRzIiwibXNnX3BhbmVsIiwiZG9jX2ZpbGUiLCJncm91cF9hdmF0YXJfZmlsZSIsInJlY29yZF9hdWRpb19tZXNzYWdlX2J0biIsImFkZF9lbW9qaV9idG4iLCJkYXRhX3RhYmxlIiwibWVzc2FnZV90ZXh0X2lucHV0IiwiZm9ybSIsInRoZV90aHJlYWQiLCJtc2dfc3RhY2siLCJwZW5kaW5nX21zZ19zdGFjayIsIm5ld19tc2dfYWxlcnQiLCJyZXBseV9tZXNzYWdlX2FsZXJ0Iiwic2Vlbl9ieV9maW5hbCIsIm1vdW50ZWQiLCJJbml0aWFsaXplIiwiYXJnIiwibW9kdWxlcyIsImluY2x1ZGVzIiwic2V0VGltZW91dCIsInNldHVwT25jZSIsIkxvYWRJbiIsImluaXRpYXRlX3RocmVhZCIsInRocmVhZF9pZCIsImNyZWF0ZVByaXZhdGUiLCJhbGlhcyIsIlBhZ2VMaXN0ZW5lcnMiLCJsaXN0ZW4iLCJkaXNwb3NlVG9vbHRpcHMiLCJzdGFydFdhdGNoZG9nIiwibW9iaWxlIiwiaHRtbCIsIlRocmVhZFRlbXBsYXRlcyIsInJlbmRlciIsImVtcHR5X2Jhc2UiLCJ0X25hbWUiLCJtZXRob2RzIiwiaW5pdGlhbGl6ZVJlY2VudE1lc3NhZ2VzIiwiSGVhbHRoIiwiY2hlY2tDb25uZWN0aW9uIiwidG9vbHRpcHMiLCJlbG0iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic2V0SW50ZXJ2YWwiLCJOb3RpZnlNYW5hZ2VyIiwic29ja2V0cyIsImZvcmNlZF9kaXNjb25uZWN0IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsIldFQiIsIm9ucG9wc3RhdGUiLCJldmVudCIsInN0YXRlIiwiY3JlYXRlR3JvdXAiLCJjbG9zZU9wZW5lZCIsImNvbnRhY3RzIiwic2VhcmNoIiwib24iLCJjaGVja1RocmVhZEZpbHRlcnMiLCJmb3JFYWNoIiwiZXZlbnROYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZpbGVEcmFnRHJvcCIsImxlbmd0aCIsImNsaWNrIiwic2VhcmNoTGlua0NsaWNrZWQiLCJ0aW1lQWdvIiwicmVzZXQiLCJzdG9wV2F0Y2hkb2ciLCJ1bnN1YnNjcmliZSIsImNsZWFySW50ZXJ2YWwiLCJjbGVhclRpbWVvdXQiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiZmluZCIsIk9iamVjdCIsImFzc2lnbiIsImVhY2giLCJmb3JtYXQiLCJtYWtlVGltZUFnbyIsImF0dHIiLCJwcm9wIiwicmVtb3ZlVHlwZXJzIiwiYm9iYmxlSGVhZHMiLCJtc2dQYW5lbENsaWNrIiwic2Nyb2xsIiwibXNnUGFuZWxTY3JvbGwiLCJjaGFuZ2UiLCJkb2N1bWVudENoYW5nZSIsInVwbG9hZEdyb3VwQXZhdGFyIiwiYXVkaW9NZXNzYWdlIiwic2hvd0Vtb2ppUGlja2VyIiwicGFzdGVJbWFnZSIsImtleWRvd24iLCJmb3JtS2V5ZG93biIsIm1hbmFnZVNlbmRNZXNzYWdlQnV0dG9uIiwic3RvcERlZmF1bHQiLCJuZXdNc2dBbGVydENsaWNrIiwicmVzZXRSZXBseWluZyIsImNsaWNrTWFya1JlYWQiLCJpbnB1dENsaWNrU2Nyb2xsIiwiZm9jdXMiLCJzdWJqZWN0IiwidmFsaWRhdGVGb3JtcyIsInJ1bk1lc3NlbmdlclNlYXJjaCIsIm9mZiIsImUiLCJjb25zb2xlIiwibG9nIiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50X3Rlcm0iLCJ0aW1lIiwiRGF0ZSIsInZhbCIsInRyaW0iLCJsb2FkZXIiLCJ4aHIiLCJyZXF1ZXN0Iiwicm91dGUiLCJzdWNjZXNzIiwibWFuYWdlTWVzc2VuZ2VyU2VhcmNoIiwiZmFpbF9hbGVydCIsInRocmVhZF9lbXB0eV9zZWFyY2giLCJ0aHJlYWRTY3JvbGxCb3R0b20iLCJrZXlDb2RlIiwic2VuZE1lc3NhZ2UiLCJzdG9wVHlwaW5nIiwiaXNUeXBpbmciLCJuZXdfZm9ybXMiLCJuZXdQcml2YXRlIiwiY2hlY2tUaHJlYWRTdG9yYWdlVW5yZWFkIiwibWFya1JlYWQiLCJmb2N1c19pbnB1dCIsImZvY3VzRW5kIiwiZWxtX2NsYXNzIiwidGFyZ2V0IiwiaWdub3JlIiwic2Nyb2xsVG9wIiwibG9hZEhpc3RvcnkiLCJoYXNGb2N1cyIsIlJlY29yZEF1ZGlvIiwib3BlbiIsIkVtb2ppUGlja2VyIiwiYWRkTWVzc2FnZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImZpbGVzIiwic2VuZFVwbG9hZEZpbGVzIiwidmFsdWUiLCJidXR0b24iLCJhZGRMb2FkZXIiLCJkYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJhbGVydCIsImZpbGxNb2RhbCIsIm5vX2Nsb3NlIiwiYm9keSIsInRpdGxlIiwicGF5bG9hZCIsIkFsZXJ0IiwidG9hc3QiLCJjbG9zZV9tb2RhbCIsInN3aXRjaFRvZ2dsZUxpc3RlbmVyIiwiaXMiLCJwYXJlbnRzIiwiY2xvc2VzdCIsInN0YXJ0UHJlc2VuY2UiLCJmdWxsIiwic3Vic2NyaWJlIiwiRWNobyIsImNvbm5lY3RvciIsImNoYW5uZWxzIiwiam9pbiIsImhlcmUiLCJ1c2VycyIsImhpZGUiLCJpc1Byb3ZpZGVyIiwicHJvdmlkZXJfaWQiLCJwcm92aWRlcl9hbGlhcyIsInB1c2giLCJ1cGRhdGVCb2JibGVIZWFkIiwiZHJhd0JvYmJsZUhlYWRzIiwic2VuZE9ubGluZVN0YXR1cyIsImpvaW5pbmciLCJ1c2VyIiwibGVhdmluZyIsInVwZGF0ZUFjdGl2ZVByb2ZpbGUiLCJsaXN0ZW5Gb3JXaGlzcGVyIiwiYWRkVHlwZXJzIiwidGhyZWFkT25saW5lU3RhdHVzIiwib25saW5lX3N0YXR1cyIsIm1lc3NhZ2UiLCJtZXNzYWdlX2lkIiwiZ3JvdXBTZXR0aW5nc1N0YXRlIiwiZ3JvdXBBdmF0YXJTdGF0ZSIsInJlbmRlclVwZGF0ZWRNZXNzYWdlIiwidXBkYXRlTmV3UmVhY3Rpb24iLCJ1cGRhdGVSZW1vdmVSZWFjdGlvbiIsInN0YXR1cyIsInVucmVhZENoZWNrIiwic29ja2V0X2Vycm9yIiwic2hvdyIsInBvcG92ZXIiLCJteV9hdmF0YXJfc3RhdHVzIiwib25Db25uZWN0aW9uIiwicmVDb25uZWN0ZWQiLCJDYWxsTWFuYWdlciIsImluaXRpYWxpemVkIiwiY2hlY2tUb3RhbFVucmVhZCIsImNvdW50cyIsInVucmVhZF90aHJlYWRzX2NvdW50IiwidXBkYXRlTWVzc2FnZUNvdW50IiwidG90YWxfdW5yZWFkIiwiZmFpbCIsInVucmVhZCIsInNvdW5kIiwiSW1wb3J0cyIsIm5ld01lc3NhZ2UiLCJ1cGRhdGVUaHJlYWQiLCJvd25lcl9pZCIsIm93bmVyX3R5cGUiLCJhdWRpbyIsImNhbGxTdGF0dXMiLCJhY3Rpb24iLCJ0aHJlYWRDYWxsU3RhdHVzIiwiYWRkZWRUb1RocmVhZCIsInByb21vdGVkQWRtaW4iLCJ0aGVtZSIsImZvcmNlIiwiZGVtb3RlZEFkbWluIiwicGVybWlzc2lvbnNVcGRhdGVkIiwidGhyZWFkQXBwcm92YWwiLCJhcHByb3ZlZCIsInJlbW92ZVRocmVhZCIsInRocmVhZExlZnQiLCJwdXJnZU1lc3NhZ2UiLCJyZW1vdmUiLCJpbml0aWF0ZVByaXZhdGUiLCJub0hpc3RvcnkiLCJfZGF0YSRvcHRpb25zJGF3YWl0aW4iLCJyZXNvdXJjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsIm1ldGEiLCJmaW5hbF9wYWdlIiwibmV4dF9wYWdlX2lkIiwibmV4dF9wYWdlX3JvdXRlIiwicmVuZGVyX3ByaXZhdGUiLCJwdXNoU3RhdGUiLCJvcHRpb25zIiwiY2FsbCIsImxvY2tlZCIsImluaXRpYXRlR3JvdXAiLCJyZW5kZXJfZ3JvdXAiLCJwcm9maWxlIiwibWVzc2VuZ2VyX3NlYXJjaCIsIkxhenlJbWFnZXMiLCJ1cGRhdGUiLCJpc0ZpbGUiLCJpIiwiZGF0YVRyYW5zZmVyIiwiaXRlbXMiLCJraW5kIiwic3RvcFByb3BhZ2F0aW9uIiwiZmFkZUluIiwiZmFkZU91dCIsImJ0biIsIm1lc3NhZ2VfY29udGVudHMiLCJhZnRlciIsInNlbmRfbXNnX2J0biIsInNldHRpbmdzIiwic2VuZGVyIiwiY2hlY2siLCJ0b3AiLCJoZWlnaHQiLCJvZmZzZXQiLCJzdGF0dXNPbmxpbmUiLCJpbmFjdGl2aXR5IiwidXBkYXRlT25saW5lU3RhdHVzU2V0dGluZyIsImxvY2F0ZVN0b3JhZ2VJdGVtIiwiZm91bmQiLCJpbmRleCIsInNlZW5NZXNzYWdlIiwicnVuTWFya1JlYWQiLCJsb2FkRGF0YVRhYmxlIiwic3BlY2lhbCIsImRlc3Ryb3kiLCJEYXRhVGFibGUiLCJkcmF3Q2FsbGJhY2siLCJhcGkiLCJmbiIsIkFwaSIsInBhZ2luYXRpb24iLCJ0b2dnbGUiLCJwYWdlIiwiaW5mbyIsInBhZ2VzIiwiYWRkQm90VHlwZXJzIiwiYXZhdGFyIiwiZ2V0VGltZSIsImJvdCIsImRyYXdCb3RUeXBpbmdCb2JibGVIZWFkcyIsInNwbGljZSIsInJlbW92ZUJvdFR5cGVycyIsImltYWdlTG9hZExpc3RlbmVyIiwicHJpdmF0ZU1haW5Cb2JibGVEcmF3IiwiYm9iYmxlIiwidGhyZWFkX3ByaXZhdGVfaGVhZGVyX2JvYmJsZSIsIm93bmVyIiwicHJlcGVuZCIsImJvdF90eXBpbmdfYm9iYmxlX2hlYWQiLCJsYXN0X3JlYWQiLCJhZGRlZCIsImNhdWdodF91cCIsInR5cGluZyIsImJvYmJsZV9oZWFkIiwibmV4dCIsImhhc0NsYXNzIiwic2Vlbl9ieSIsImNoaWxkcmVuIiwieCIsImluX2NoYXQiLCJjaGVja1JlY2VudEJvYmJsZUhlYWRzIiwicmVsb2FkIiwieiIsImltYWdlcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJlbW9qaXMiLCJsb2FkSW1hZ2UiLCJzaWJsaW5ncyIsInJlcGxhY2VXaXRoIiwibG9hZEVtb2ppIiwiaW1nIiwibWFuYWdlUmVjZW50TWVzc2FnZXMiLCJtZXNzYWdlc19odG1sIiwicmV2ZXJzZSIsImtleSIsInN5c3RlbV9tZXNzYWdlIiwidGltZURpZmZJblVuaXQiLCJteV9tZXNzYWdlX2dyb3VwZWQiLCJteV9tZXNzYWdlX3JlcGx5IiwibXlfbWVzc2FnZSIsIm1lc3NhZ2VfZ3JvdXBlZCIsIm1lc3NhZ2VfcmVwbHkiLCJlbmRfb2ZfaGlzdG9yeSIsIm1hbmFnZUhpc3RvcnlNZXNzYWdlcyIsImZpbHRlciIsImxhc3RfbWVzc2FnZSIsInJlcGxhY2VfaHRtbCIsInBhZ2VfaWQiLCJzY3JvbGxJbnRvVmlldyIsInNjcm9sbFRvIiwib25Mb2FkIiwibG9hZGluZ19oaXN0b3J5IiwiYnlwYXNzIiwid2hpc3BlciIsImF2YXRhcl9zbSIsImNsaXBib2FyZERhdGEiLCJvcmlnaW5hbEV2ZW50IiwiYmxvYiIsImluZGV4T2YiLCJnZXRBc0ZpbGUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiZmlsZSIsInJlc3VsdCIsIk1vZGFsIiwic2l6ZSIsImljb24iLCJiYWNrZHJvcF9jdHJsIiwiY2JfYnRuX3R4dCIsImNiX2J0bl9pY29uIiwiY2JfYnRuX3RoZW1lIiwib25SZWFkeSIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJpbWFnZSIsIkltYWdlIiwid2lkdGgiLCJkcmF3SW1hZ2UiLCJzcmMiLCJjYWxsYmFjayIsInRvQmxvYiIsIm1vZGFsIiwicmVhZEFzRGF0YVVSTCIsIm1ha2VQZW5kaW5nTWVzc2FnZSIsIm1hbmFnZVBlbmRpbmdNZXNzYWdlIiwiZm9ybURhdGEiLCJ0ZW1wb3JhcnlfaWQiLCJnZXRUeXBlIiwibWF0Y2giLCJudW1iZXIiLCJpbnB1dCIsInBhdGgiLCJKU09OIiwic3RyaW5naWZ5IiwiYXVkaW9fbWVzc2FnZSIsImVzY2FwZUh0bWwiLCJ1dWlkIiwidjQiLCJwcm92aWRlcl9tb2RlbCIsImFkZFBlbmRpbmdNZXNzYWdlIiwicGVuZGluZ19tZXNzYWdlX2dyb3VwZWQiLCJwZW5kaW5nX21lc3NhZ2UiLCJmaW5hbCIsIm1zZ19lbG0iLCJtZXNzYWdlU3RhdHVzU3RhdGUiLCJjb2xsZWN0aW9uIiwidGVybSIsIml0ZW0iLCJtc2ciLCJ1bnNoaWZ0IiwiZm9yY2VTY3JvbGwiLCJ5b3V0dWJlUmVnZXgiLCJ0ZXN0IiwiZGlkU2Nyb2xsIiwidGhyZWFkX25ld19tZXNzYWdlX2FsZXJ0IiwiY2FsbF9hcmVhIiwiaGFzX2NhbGwiLCJ0aHJlYWRfY2FsbF9zdGF0ZSIsImFjdGl2ZV9jYWxsIiwiaW5fY2FsbCIsImpvaW5lZCIsImxlZnRfY2FsbCIsInRlbXAiLCJhZGRUaHJlYWQiLCJyZWNpcGllbnQiLCJjYWxjVW5yZWFkVGhyZWFkcyIsInJlYWQiLCJ1bnJlYWRfY291bnQiLCJsYXRlc3RfbWVzc2FnZSIsInVwZGF0ZWRfYXQiLCJkcmF3VGhyZWFkcyIsImNoZWNrU2hvd1RocmVhZFNlYXJjaCIsInRocmVhZF9lbG0iLCJzZWxlY3RlZCIsImdyb3VwX3RocmVhZCIsInByaXZhdGVfdGhyZWFkIiwiZ3JvdXAiLCJmaWx0ZXJlZCIsInRvTG93ZXJDYXNlIiwiZWRpdE1lc3NhZ2UiLCJtZXNzYWdlU3RvcmFnZSIsImg0IiwidW5sb2NrX2J1dHRvbnMiLCJlZGl0X21lc3NhZ2UiLCJzaG9ydGNvZGVUb1VuaWNvZGUiLCJ1cGRhdGVNZXNzYWdlIiwib25DbG9zZWQiLCJyZXBseVRvTWVzc2FnZSIsInRocmVhZF9yZXBseWluZ19tZXNzYWdlX2FsZXJ0IiwidGV4dGFyZWEiLCJtZXNzYWdlX2JvZHkiLCJhZGROZXdSZWFjdGlvbiIsInJlYWN0aW9uIiwiZW1vamkiLCJyZW1vdmVSZWFjdGlvbiIsInJlbW92ZUxpIiwicmVhY3RMaSIsInJlYWN0aW9ucyIsInRvdGFsX3VuaXF1ZSIsImtleXMiLCJ0b3RhbCIsInJlYWN0ZWQiLCJkcmF3UmVhY3Rpb25zIiwieSIsInVuaXF1ZSIsIm1lc3NhZ2VfcmVhY3Rpb25zIiwiYXJjaGl2ZSIsIk1lc3NhZ2UiLCJjZW50ZXJlZCIsImNiX2Nsb3NlIiwiVGhyZWFkIiwicHJlX2xvYWRlciIsImFyY2hpdmVfdGhyZWFkX3dhcm5pbmciLCJkZXN0cm95TW9kYWwiLCJwb3N0QXJjaGl2ZVRocmVhZCIsInNoYXJlZCIsImdyb3VwcyIsInZpZXdQYXJ0aWNpcGFudHMiLCJnYXRoZXIiLCJncm91cF9wYXJ0aWNpcGFudHMiLCJvdmVyZmxvdyIsImFkZF9wYXJ0aWNpcGFudHMiLCJhZGRQYXJ0aWNpcGFudHMiLCJ2aWV3SW52aXRlR2VuZXJhdG9yIiwibWFuYWdlSW52aXRlR2VuUGFnZSIsImdlbmVyYXRlX2NsaWNrIiwiZ2VuZXJhdGVJbnZpdGVMaW5rIiwidGhyZWFkX25hbWUiLCJ0aHJlYWRfc2hvd19pbnZpdGUiLCJidG5fc3dpdGNoIiwidGhyZWFkX2dlbmVyYXRlX2ludml0ZSIsImV4cGlyZSIsInBhcnNlSW50IiwidXNlcyIsImV4cGlyZXNfYXQiLCJkYXlqcyIsInV0YyIsImFkZCIsImV4cGlyZXMiLCJyZW1vdmVJbnZpdGVMaW5rIiwiZ3JvdXBfYWRkX3BhcnRpY2lwYW50cyIsInByb3ZpZGVycyIsIm1hcCIsImRhdGFzZXQiLCJwcm92aWRlckFsaWFzIiwicHJvdmlkZXJJZCIsInZpZXdTZXR0aW5ncyIsImdyb3VwX3NldHRpbmdzIiwic2F2ZVNldHRpbmdzIiwiaW52aXRhdGlvbnMiLCJjYWxsaW5nIiwia25vY2tzIiwiY2hhdF9ib3RzIiwicmVtb3ZlR3JvdXBBdmF0YXIiLCJyZW1vdmVQYXJ0aWNpcGFudCIsInJvdyIsImRyYXciLCJwcm9tb3RlQWRtaW4iLCJwYXJ0aWNpcGFudCIsImRlbW90ZUFkbWluIiwicGFydGljaXBhbnRQZXJtaXNzaW9uc1ZpZXciLCJwYXJ0aWNpcGFudF9pZCIsInBhcnRpY2lwYW50X3Blcm1pc3Npb25zIiwicGFydGljaXBhbnRQZXJtaXNzaW9uU2F2ZSIsIm1hbmFnZV9pbnZpdGVzIiwic2VuZF9tZXNzYWdlcyIsInNlbmRfa25vY2tzIiwic3RhcnRfY2FsbHMiLCJtYW5hZ2VfYm90cyIsImxlYXZlR3JvdXAiLCJuZXdHcm91cCIsImxvYWRpbmdfdGhyZWFkX2Jhc2UiLCJ2b2ljZU1lc3NhZ2UiLCJhcHByb3ZlIiwiQ2FsbHMiLCJzaG93Q3JlYXRlTW9kYWwiLCJhbGxvd19jbG9zZSIsImluaXRDYWxsIiwiaGVhcnRiZWF0IiwicmVtb3ZlTG9hZGVyIiwic2VuZEtub2NrIiwiY2xvc2UiLCJNdXRlIiwibXV0ZSIsInVubXV0ZSIsIm1lc3NhZ2VFZGl0cyIsIm1lc3NhZ2VfZWRpdF9oaXN0b3J5IiwidGhyZWFkTG9ncyIsInBhZ2luYXRlIiwidGhyZWFkX2xvZ3MiLCJ0aHJlYWRJbWFnZXMiLCJ0aHJlYWRfaW1hZ2VzIiwidGhyZWFkRG9jdW1lbnRzIiwidGhyZWFkX2RvY3VtZW50cyIsIm1lc3NhZ2VSZWFjdGlvbnMiLCJtZXNzYWdlSWQiLCJzaG93X21lc3NhZ2VfcmVhY3Rpb25zIiwidGhyZWFkQXVkaW8iLCJ0aHJlYWRfYXVkaW8iLCJ0aHJlYWRWaWRlb3MiLCJ0aHJlYWRfdmlkZW9zIiwic2VhcmNoX2Jhc2UiLCJjb250YWN0c19iYXNlIiwicmVuZGVyX25ld19wcml2YXRlIiwiY2FuX21lc3NhZ2VfZmlyc3QiLCJuZXdfZ3JvdXBfYmFzZSIsIm5ld19ncm91cF9mcmllbmRzIiwiaW5pdCIsIkltcG9ydCIsIm5ld0Zvcm1zIiwiY2FsbHMiLCJzZW5kIiwicmVwbHkiLCJsb2FkIiwic3dpdGNoVG9nZ2xlIiwidGhyZWFkX2xvY2tvdXQiLCJ0aHJlYWRfYWRtaW4iLCJzb2NrZXRTdGF0dXNDaGVjayIsIm9ubGluZSIsInN0YXR1c1NldHRpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/managers/ThreadManager.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/modules/EmojiPicker.js":
/*!*************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/modules/EmojiPicker.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@joeattardi/emoji-button'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\nwindow.EmojiPicker = function () {\n  var opt = {\n      lock: true,\n      reactionPicker: null,\n      reactionMessageId: null,\n      reactionMessageElm: null,\n      messagePicker: null,\n      messageTextElm: null,\n      editPicker: null,\n      editPickerBtn: null,\n      editPickerTextEml: null,\n      botReactionPicker: null,\n      botReactionBtn: null,\n      botReactionElm: null,\n      botReactionBombPicker: null,\n      botReactionBombIndex: 0\n    },\n    mounted = {\n      Initialize: function Initialize() {\n        opt.lock = false;\n      }\n    },\n    methods = {\n      updateThemes: function updateThemes(dark) {\n        if (opt.reactionPicker !== null) {\n          opt.reactionPicker.setTheme(dark ? 'dark' : 'light');\n        }\n        if (opt.messagePicker !== null) {\n          opt.messagePicker.setTheme(dark ? 'dark' : 'light');\n        }\n        if (opt.editPicker !== null) {\n          opt.editPicker.setTheme(dark ? 'dark' : 'light');\n        }\n        if (opt.botReactionPicker !== null) {\n          opt.botReactionPicker.setTheme(dark ? 'dark' : 'light');\n        }\n        if (opt.botReactionBombPicker !== null) {\n          opt.botReactionBombPicker.setTheme(dark ? 'dark' : 'light');\n        }\n      },\n      addReaction: function addReaction(messageId) {\n        if (opt.reactionPicker === null) {\n          opt.reactionPicker = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@joeattardi/emoji-button'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            theme: Messenger.common().dark_mode ? 'dark' : 'light'\n          });\n          opt.reactionPicker.on('emoji', methods.sendReaction);\n          opt.reactionPicker.on('hidden', methods.reactionPickerHidden);\n        }\n        if (opt.reactionMessageId !== null) {\n          opt.reactionPicker.hidePicker();\n          setTimeout(function () {\n            methods.addReaction(messageId);\n          }, 500);\n          return;\n        }\n        opt.reactionMessageId = messageId;\n        opt.reactionMessageElm = document.getElementById('message_' + messageId).getElementsByClassName('message-body')[0];\n        opt.reactionMessageElm.classList.add('shadow-primary');\n        opt.reactionPicker.showPicker(opt.reactionMessageElm);\n      },\n      addMessage: function addMessage() {\n        if (opt.messagePicker === null) {\n          opt.messagePicker = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@joeattardi/emoji-button'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            theme: Messenger.common().dark_mode ? 'dark' : 'light',\n            autoHide: false,\n            position: 'top-end'\n          });\n          opt.messagePicker.on('emoji', methods.messageSelection);\n        }\n        opt.messageTextElm = document.getElementById('message_text_input');\n        opt.messagePicker.showPicker(opt.messageTextElm);\n      },\n      editMessage: function editMessage() {\n        if (opt.editPicker === null) {\n          opt.editPicker = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@joeattardi/emoji-button'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            theme: Messenger.common().dark_mode ? 'dark' : 'light',\n            autoHide: false,\n            position: 'bottom-end'\n          });\n          opt.editPicker.on('emoji', methods.editSelection);\n        }\n        opt.editPickerTextEml = document.getElementById('edit_message_textarea');\n        opt.editPickerBtn = document.getElementById('edit_message_emoji_btn');\n        opt.editPicker.showPicker(opt.editPickerBtn);\n      },\n      botActionReact: function botActionReact() {\n        if (opt.botReactionPicker === null) {\n          opt.botReactionPicker = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@joeattardi/emoji-button'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            theme: Messenger.common().dark_mode ? 'dark' : 'light'\n          });\n          opt.botReactionPicker.on('emoji', methods.botReactSelection);\n        }\n        opt.botReactionElm = document.getElementById('g_s_bot_reaction');\n        opt.botReactionBtn = document.getElementById('bot_reaction_emoji_btn');\n        opt.botReactionPicker.showPicker(opt.botReactionBtn);\n      },\n      botActionReactBomb: function botActionReactBomb(index) {\n        opt.botReactionBombIndex = index;\n        if (opt.botReactionBombPicker === null) {\n          opt.botReactionBombPicker = new Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@joeattardi/emoji-button'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({\n            theme: Messenger.common().dark_mode ? 'dark' : 'light'\n          });\n          opt.botReactionBombPicker.on('emoji', methods.botReactBombSelection);\n        }\n        opt.botReactionBombPicker.showPicker(document.getElementById('bot_reaction_bomb_btn_' + index));\n      },\n      resetBotActionReactBomb: function resetBotActionReactBomb(index) {\n        document.getElementById('bot_reaction_bomb_' + index).value = '';\n      },\n      sendReaction: function sendReaction(selection) {\n        ThreadManager.addNewReaction({\n          message_id: opt.reactionMessageId,\n          emoji: selection.emoji\n        });\n      },\n      reactionPickerHidden: function reactionPickerHidden() {\n        if (opt.reactionMessageElm !== null) {\n          opt.reactionMessageElm.classList.remove('shadow-primary');\n        }\n        opt.reactionMessageId = null;\n        opt.reactionMessageElm = null;\n      },\n      messageSelection: function messageSelection(selection) {\n        var curPos = opt.messageTextElm.selectionStart;\n        var curVal = opt.messageTextElm.value;\n        opt.messageTextElm.value = curVal.slice(0, curPos) + selection.emoji + curVal.slice(curPos);\n      },\n      editSelection: function editSelection(selection) {\n        var curPos = opt.editPickerTextEml.selectionStart;\n        var curVal = opt.editPickerTextEml.value;\n        opt.editPickerTextEml.value = curVal.slice(0, curPos) + selection.emoji + curVal.slice(curPos);\n      },\n      botReactSelection: function botReactSelection(selection) {\n        opt.botReactionElm.value = selection.emoji;\n      },\n      botReactBombSelection: function botReactBombSelection(selection) {\n        document.getElementById('bot_reaction_bomb_' + opt.botReactionBombIndex).value = selection.emoji;\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    addReaction: methods.addReaction,\n    addMessage: methods.addMessage,\n    editMessage: methods.editMessage,\n    botActionReact: methods.botActionReact,\n    botActionReactBomb: methods.botActionReactBomb,\n    resetBotActionReactBomb: methods.resetBotActionReactBomb,\n    updateThemes: methods.updateThemes,\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.lock = arg;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/modules/EmojiPicker.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/modules/InviteJoin.js":
/*!************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/modules/InviteJoin.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.InviteJoin = function () {\n  var opt = {\n      API: null,\n      lock: true,\n      invite: null,\n      elements: {\n        loading: $(\"#inv_loading\"),\n        loaded: $(\"#inv_loaded\"),\n        actions: $(\"#inv_actions_ctnr\"),\n        auth: $(\"#auth_flow\")\n      }\n    },\n    mounted = {\n      Initialize: function Initialize(arg) {\n        opt.lock = false;\n        opt.API = Messenger.common().API + 'join/' + arg.code;\n        methods.load();\n      }\n    },\n    methods = {\n      load: function load() {\n        Messenger.xhr().request({\n          route: opt.API,\n          success: function success(invite) {\n            if (invite.options.is_valid) {\n              opt.invite = invite;\n              opt.elements.loading.hide();\n              opt.elements.loaded.html(templates.header());\n              if (!invite.options.messenger_auth) {\n                opt.elements.auth.show();\n              } else {\n                opt.elements.actions.show();\n                if (invite.options.in_thread) {\n                  opt.elements.actions.html(templates.enter());\n                } else {\n                  opt.elements.actions.html(templates.join());\n                }\n              }\n              methods.setTitle(invite.options.messenger_auth);\n              PageListeners.listen().tooltips();\n            } else {\n              methods.bad();\n            }\n          },\n          fail: methods.bad,\n          bypass: true,\n          fail_alert: true\n        });\n      },\n      setTitle: function setTitle(auth) {\n        var title = 'Join ' + opt.invite.options.thread_name;\n        document.title = title;\n        if (auth) {\n          if (!Messenger.common().modules.includes('NotifyManager')) {\n            setTimeout(function () {\n              methods.setTitle(auth);\n            }, 500);\n            return;\n          }\n          NotifyManager.setTitle(title);\n        }\n      },\n      join: function join() {\n        if (opt.lock || !opt.invite || !opt.invite.options.is_valid || opt.invite.options.in_thread) {\n          return;\n        }\n        opt.lock = true;\n        opt.elements.actions.html(Messenger.alert().loader(true));\n        Messenger.xhr().payload({\n          route: opt.API,\n          data: {},\n          success: function success() {\n            window.location.replace(Messenger.common().WEB + '/' + opt.invite.thread_id);\n          },\n          fail: methods.bad,\n          bypass: true,\n          fail_alert: true\n        });\n      },\n      bad: function bad() {\n        opt.elements.loading.hide();\n        opt.elements.loaded.html(templates.failed());\n        opt.elements.actions.show();\n        opt.elements.actions.html(templates.exit());\n      }\n    },\n    templates = {\n      join: function join() {\n        return '<button onclick=\"window.location.href = \\'' + Messenger.common().WEB + '\\';\" type=\"button\" data-toggle=\"tooltip\" data-placement=\"left\" title=\"Cancel\" class=\"mx-3 mb-4 shadow-lg btn btn-circle btn-circle-xl btn-danger\">No <i class=\"fas fa-times\"></i></button>\\n' + '<button onclick=\"InviteJoin.join()\" type=\"button\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Join Group!\" class=\"mx-3 mb-4 shadow-lg btn btn-circle btn-circle-xl btn-success\">Join <i class=\"fas fa-users\"></i></button>';\n      },\n      enter: function enter() {\n        return '<button onclick=\"window.location.href=\\'' + Messenger.common().WEB + '/' + opt.invite.thread_id + '\\'\" type=\"button\" data-toggle=\"tooltip\"\\n' + ' data-placement=\"bottom\" title=\"View Group\" class=\"shadow-lg btn btn-circle btn-circle-xl btn-success\">Enter <i class=\"fas fa-users\"></i></button>';\n      },\n      exit: function exit() {\n        return '<button onclick=\"window.location.href = \\'/\\';\" type=\"button\" data-toggle=\"tooltip\" data-placement=\"left\" title=\"Cancel\" class=\"mx-3 mb-4 shadow-lg btn btn-circle btn-circle-xl btn-danger\">Exit <i class=\"fas fa-times\"></i></button>';\n      },\n      failed: function failed() {\n        return '<div class=\"float-right d-none d-sm-block pl-2\">\\n' + ' <img class=\"pl-2\" id=\"FSlog\" height=\"95\" src=\"' + [window.location.protocol, '//', window.location.host].join('') + '/vendor/messenger/images/messenger.png\">\\n' + ' </div>' + '<h1 class=\"display-4\"><i class=\"fas fa-exclamation-triangle\"></i> Invalid Invite</h1>\\n' + ' <p class=\"h3 mt-4\">\\n' + '  <i class=\"far fa-dot-circle\"></i>\\n' + ' The invite you requested is expired or not found.' + ' </p>';\n      },\n      header: function header() {\n        return '<div class=\"float-right d-none d-sm-block ml-2\">\\n' + ' <img onclick=\"Messenger.alert().showAvatar(\\'' + opt.invite.options.thread_name + '\\', \\'' + opt.invite.options.avatar.lg + '\\')\" class=\"rounded pointer_area\" id=\"FSlog\" height=\"105\" width=\"105\" src=\"' + opt.invite.options.avatar.sm + '\">\\n' + ' </div>' + '<h1 class=\"display-4\"><i class=\"fas fa-users\"></i> ' + opt.invite.options.thread_name + '</h1>\\n' + '<div class=\"text-center d-block d-sm-none mt-4\">\\n' + ' <img onclick=\"Messenger.alert().showAvatar(\\'' + opt.invite.options.thread_name + '\\', \\'' + opt.invite.options.avatar.lg + '\\')\" class=\"rounded pointer_area\" id=\"FSlog\" height=\"75\" width=\"75\" src=\"' + opt.invite.options.avatar.sm + '\">\\n' + ' </div>' + ' <p class=\"h3 mt-4\">\\n' + '  <i class=\"far fa-dot-circle\"></i>\\n' + templates.message() + ' </p>';\n      },\n      message: function message() {\n        if (!opt.invite.options.messenger_auth) {\n          return 'Before you may join the group, you must log in or sign up below.';\n        }\n        if (opt.invite.options.in_thread) {\n          return 'You are already in this group.';\n        }\n        return 'Select an option below. Once joined, you will be redirected into the group.';\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    join: methods.join,\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.lock = arg;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/modules/InviteJoin.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/modules/MessengerSettings.js":
/*!*******************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/modules/MessengerSettings.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.MessengerSettings = function () {\n  var opt = {\n      lock: true,\n      elements: {\n        profile_avatar_upload: null\n      }\n    },\n    mounted = {\n      Initialize: function Initialize() {\n        $('body').append(templates.avatar_input());\n        opt.elements.profile_avatar_upload = document.getElementById('profile_avatar_upload');\n        opt.elements.profile_avatar_upload.addEventListener('change', methods.uploadProfileAvatar, false);\n        opt.lock = false;\n      }\n    },\n    methods = {\n      load: function load() {\n        if (opt.lock) return;\n        Messenger.alert().Modal({\n          backdrop_ctrl: false,\n          theme: 'dark',\n          icon: 'cog',\n          title: 'Loading Settings...',\n          pre_loader: true,\n          h4: false,\n          cb_btn_txt: 'Save Settings',\n          cb_btn_icon: 'save',\n          cb_btn_theme: 'success',\n          onReady: function onReady() {\n            Messenger.xhr().request({\n              route: Messenger.common().API + 'settings',\n              success: function success(data) {\n                Messenger.alert().fillModal({\n                  title: 'General Settings',\n                  body: templates.settings(data)\n                });\n                PageListeners.listen().tooltips();\n                $(\".m_setting_toggle\").change(function () {\n                  $(this).is(':checked') ? $(this).closest('tr').addClass('bg-light') : $(this).closest('tr').removeClass('bg-light');\n                });\n              }\n            });\n          },\n          callback: methods.saveSettings\n        });\n      },\n      saveSettings: function saveSettings() {\n        if (opt.lock) return;\n        opt.lock = true;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'settings',\n          data: {\n            message_popups: $(\"#message_popups\").is(\":checked\"),\n            message_sound: $(\"#message_sounds\").is(\":checked\"),\n            call_ringtone_sound: $(\"#call_ringtone_sound\").is(\":checked\"),\n            notify_sound: $(\"#notify_sound\").is(\":checked\"),\n            dark_mode: $(\"#dark_mode\").is(\":checked\"),\n            online_status: parseInt($('input[name=\"online_status\"]:checked').val())\n          },\n          success: methods.updateSettings,\n          fail_alert: true,\n          close_modal: true\n        }, 'put');\n      },\n      updateSettings: function updateSettings(data) {\n        if (Messenger.common().modules.includes('ThreadManager')) ThreadManager.state().statusSetting(data.online_status);\n        PageListeners.listen().tooltips();\n        if (Messenger.common().modules.includes('NotifyManager')) NotifyManager.settings(data);\n        Messenger.alert().Alert({\n          title: 'Updated your settings',\n          toast: true\n        });\n        Messenger.handle().switchCss(data.dark_mode);\n      },\n      uploadProfileAvatar: function uploadProfileAvatar() {\n        if (opt.lock || !opt.elements.profile_avatar_upload.files.length) return;\n        opt.lock = true;\n        var data = new FormData();\n        data.append('image', opt.elements.profile_avatar_upload.files[0]);\n        PageListeners.listen().disposeTooltips();\n        if (!$('#main_modal').length) {\n          Messenger.alert().Modal({\n            size: 'sm',\n            icon: 'cloud-upload-alt',\n            pre_loader: true,\n            centered: true,\n            unlock_buttons: false,\n            allow_close: false,\n            backdrop_ctrl: false,\n            title: 'Uploading...',\n            theme: 'primary'\n          });\n        } else {\n          Messenger.alert().fillModal({\n            loader: true,\n            no_close: true,\n            body: null,\n            title: 'Uploading...'\n          });\n        }\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'avatar',\n          data: data,\n          success: methods.manageNewAvatar,\n          fail_alert: true,\n          close_modal: true\n        });\n      },\n      removeProfileAvatarCheck: function removeProfileAvatarCheck() {\n        if (opt.lock) return;\n        Messenger.alert().Modal({\n          backdrop_ctrl: false,\n          size: 'sm',\n          body: false,\n          centered: true,\n          unlock_buttons: false,\n          title: 'Remove Avatar?',\n          theme: 'danger',\n          cb_btn_txt: 'Remove',\n          cb_btn_theme: 'danger',\n          cb_btn_icon: 'trash',\n          icon: 'trash',\n          callback: methods.removeProfileAvatar\n        });\n      },\n      removeProfileAvatar: function removeProfileAvatar() {\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'avatar',\n          data: {},\n          success: methods.manageNewAvatar,\n          fail_alert: true,\n          close_modal: true\n        }, 'delete');\n      },\n      manageNewAvatar: function manageNewAvatar(data) {\n        if (data) {\n          Messenger.forms().updateSlug(data.owner.avatar.sm);\n          $('.my-global-avatar').attr('src', data.owner.avatar.sm);\n          opt.elements.profile_avatar_upload.value = '';\n          Messenger.alert().Alert({\n            toast: true,\n            theme: 'success',\n            title: 'Your avatar has been updated'\n          });\n        } else {\n          window.location.reload();\n        }\n      }\n    },\n    templates = {\n      settings: function settings(data) {\n        return '<div class=\"form-row\">\\n' + '<div class=\"col-6\"><label class=\"control-label d-block h5 font-weight-bold\" for=\"online_status_switch\">Online Status</label>\\n' + '<div id=\"online_status_switch\" class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\\n' + '<label data-toggle=\"tooltip\" title=\"Online\" data-placement=\"left\" class=\"pointer_area btn btn-success ' + (data.online_status === 1 ? 'active glowing_btn' : '') + '\">\\n' + '<input type=\"radio\" name=\"online_status\" value=\"1\" autocomplete=\"off\" ' + (data.online_status === 1 ? 'checked' : '') + '><i class=\"fas fa-wifi\"></i>\\n' + '</label>\\n' + '<label data-toggle=\"tooltip\" title=\"Away\" data-placement=\"bottom\" class=\"pointer_area btn btn-danger ' + (data.online_status === 2 ? 'active glowing_btn' : '') + '\">\\n' + '<input type=\"radio\" name=\"online_status\" value=\"2\" autocomplete=\"off\" ' + (data.online_status === 2 ? 'checked' : '') + '><i class=\"fas fa-user-slash\"></i>\\n' + '</label>\\n' + '<label data-toggle=\"tooltip\" title=\"Offline\" data-placement=\"right\" class=\"pointer_area btn btn-secondary ' + (data.online_status === 0 ? 'active glowing_btn' : '') + '\">\\n' + '<input type=\"radio\" name=\"online_status\" value=\"0\" autocomplete=\"off\" ' + (data.online_status === 0 ? 'checked' : '') + '><i class=\"fas fa-power-off\"></i>\\n' + '</label>\\n' + '</div></div>\\n' + '<div class=\"col-6 mt-1 text-right\">' + '    <div class=\"btn-group-vertical mr-1\">' + '        <button data-toggle=\"tooltip\" data-placement=\"left\" title=\"Upload New Avatar\" onclick=\"$(\\'#profile_avatar_upload\\').click()\" class=\"btn btn-sm btn-outline-success\"><i class=\"fas fa-image\"></i></button>' + '        <button data-toggle=\"tooltip\" data-placement=\"left\" title=\"Remove Avatar\" onclick=\"MessengerSettings.removeAvatar()\" class=\"btn btn-sm btn-outline-danger\"><i class=\"fas fa-trash\"></i></button>' + '    </div>' + '    <div data-toggle=\"tooltip\" title=\"Upload New Avatar\" data-placement=\"right\" onclick=\"$(\\'#profile_avatar_upload\\').click()\" class=\"pointer_area d-inline\">\\n' + '         <img alt=\"Avatar\" height=\"62\" width=\"62\" class=\"rounded avatar-is-' + (data.online_status === 1 ? \"online\" : data.online_status === 2 ? \"away\" : \"offline\") + '\" src=\"' + data.owner.avatar.sm + '\"/>\\n' + '    </div>\\n' + '</div>' + '</div><hr>' + '<table class=\"table mb-0 table-sm table-hover\"><tbody>\\n' + '<tr class=\"' + (data.message_popups ? 'bg-light' : '') + '\">\\n' + '<td class=\"pointer_area\" onclick=\"$(\\'#message_popups\\').click()\"><div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Message Popups</span></div></td>\\n' + '<td><div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\"><input class=\"switch switch_input m_setting_toggle\" id=\"message_popups\" name=\"message_popups\" type=\"checkbox\" ' + (data.message_popups ? 'checked' : '') + '/><label for=\"message_popups\"></label></span></div></td>\\n' + '</tr>\\n' + '<tr class=\"' + (data.message_sound ? 'bg-light' : '') + '\">\\n' + '<td class=\"pointer_area\" onclick=\"$(\\'#message_sounds\\').click()\"><div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Message Sounds</span></div></td>\\n' + '<td><div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\"><input class=\"switch switch_input m_setting_toggle\" id=\"message_sounds\" name=\"message_sounds\" type=\"checkbox\" ' + (data.message_sound ? 'checked' : '') + '/><label for=\"message_sounds\"></label></span></div></td>\\n' + '</tr>\\n' + '<tr class=\"' + (data.call_ringtone_sound ? 'bg-light' : '') + '\">\\n' + '<td class=\"pointer_area\" onclick=\"$(\\'#call_ringtone_sound\\').click()\"><div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Call Ringtone</span></div></td>\\n' + '<td><div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\"><input class=\"switch switch_input m_setting_toggle\" id=\"call_ringtone_sound\" name=\"call_ringtone_sound\" type=\"checkbox\" ' + (data.call_ringtone_sound ? 'checked' : '') + '/><label for=\"call_ringtone_sound\"></label></span></div></td>\\n' + '</tr>\\n' + '<tr class=\"' + (data.notify_sound ? 'bg-light' : '') + '\">\\n' + '<td class=\"pointer_area\" onclick=\"$(\\'#notify_sound\\').click()\"><div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Notification Sound</span></div></td>\\n' + '<td><div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\"><input class=\"switch switch_input m_setting_toggle\" id=\"notify_sound\" name=\"notify_sound\" type=\"checkbox\" ' + (data.notify_sound ? 'checked' : '') + '/><label for=\"notify_sound\"></label></span></div></td>\\n' + '</tr>\\n' + '<tr class=\"' + (data.dark_mode ? 'bg-light' : '') + '\">\\n' + '<td class=\"pointer_area\" onclick=\"$(\\'#dark_mode\\').click()\"><div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Dark Mode</span></div></td>\\n' + '<td><div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\"><input class=\"switch switch_input m_setting_toggle\" id=\"dark_mode\" name=\"dark_mode\" type=\"checkbox\" ' + (data.dark_mode ? 'checked' : '') + '/><label for=\"dark_mode\"></label></span></div></td>\\n' + '</tr>\\n' + '</tbody></table>\\n';\n      },\n      avatar_input: function avatar_input() {\n        return '<input style=\"display: none;\" class=\"NS\" id=\"profile_avatar_upload\" type=\"file\" name=\"profile_avatar_upload\" accept=\"image/*\">';\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    show: methods.load,\n    removeAvatar: methods.removeProfileAvatarCheck,\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.lock = arg;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/modules/MessengerSettings.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/modules/RecordAudio.js":
/*!*************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/modules/RecordAudio.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'audio-recorder-polyfill'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'audio-recorder-polyfill/mpeg-encoder'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n\n\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'audio-recorder-polyfill'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()) = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'audio-recorder-polyfill/mpeg-encoder'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'audio-recorder-polyfill'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()).mimeType = 'audio/mpeg';\nwindow.MediaRecorder = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'audio-recorder-polyfill'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nwindow.RecordAudio = function () {\n  var opt = {\n      lock: true,\n      using: false,\n      elements: {\n        visualizer: null,\n        visualizerCtx: null,\n        record_audio_action: null,\n        start_audio_record: null,\n        is_audio_recording: null,\n        record_audio_results: null,\n        completed_audio: null\n      },\n      audio: {\n        stream: null,\n        ctx: null,\n        animator: null,\n        recorder: null,\n        final_blob: null\n      }\n    },\n    mounted = {\n      Initialize: function Initialize() {\n        opt.lock = false;\n      }\n    },\n    methods = {\n      open: function open() {\n        if (opt.using) return;\n        opt.using = true;\n        Messenger.alert().Modal({\n          size: 'md',\n          backdrop_ctrl: false,\n          overflow: true,\n          theme: 'dark',\n          icon: 'music',\n          title: 'Record Audio Message',\n          pre_loader: true,\n          h4: false,\n          onReady: methods.loadAudio,\n          onClosed: methods.closed\n        });\n      },\n      loadAudio: function loadAudio() {\n        if (navigator.mediaDevices.getUserMedia) {\n          navigator.mediaDevices.getUserMedia({\n            audio: true\n          }).then(methods.ready, methods.error);\n        } else {\n          methods.error();\n        }\n      },\n      ready: function ready(stream) {\n        Messenger.alert().fillModal({\n          body: templates.body()\n        });\n        opt.elements.record_audio_action = $(\"#record_audio_action\");\n        opt.elements.start_audio_record = $(\"#start_audio_record\");\n        opt.elements.is_audio_recording = $(\"#is_audio_recording\");\n        opt.elements.record_audio_results = $(\"#record_audio_results\");\n        opt.elements.completed_audio = document.getElementById('completed_audio');\n        opt.elements.visualizer = document.querySelector('.visualizer');\n        opt.elements.visualizerCtx = opt.elements.visualizer.getContext(\"2d\");\n        opt.elements.visualizer.width = opt.elements.visualizer.parentElement.offsetWidth - 10;\n        opt.audio.stream = stream;\n        opt.audio.recorder = new MediaRecorder(opt.audio.stream);\n        opt.audio.recorder.addEventListener('dataavailable', methods.stopped);\n        methods.visualize(opt.audio.stream);\n      },\n      start: function start() {\n        if (!opt.using) return;\n        opt.elements.start_audio_record.hide();\n        opt.elements.is_audio_recording.show();\n        opt.audio.recorder.start();\n      },\n      stop: function stop() {\n        if (!opt.using) return;\n        opt.audio.recorder.stop();\n        cancelAnimationFrame(opt.audio.animator);\n        opt.elements.record_audio_action.hide();\n        opt.elements.start_audio_record.show();\n        opt.elements.is_audio_recording.hide();\n        opt.elements.record_audio_results.show();\n      },\n      retry: function retry() {\n        opt.audio.final_blob = null;\n        opt.elements.completed_audio.src = '';\n        opt.elements.record_audio_action.show();\n        opt.elements.record_audio_results.hide();\n        methods.visualize(opt.audio.stream);\n      },\n      send: function send() {\n        ThreadManager.Import().audioMessage(opt.audio.final_blob);\n        methods.closed();\n        Messenger.alert().destroyModal();\n      },\n      stopped: function stopped(e) {\n        opt.audio.final_blob = e.data;\n        opt.elements.completed_audio.src = window.URL.createObjectURL(opt.audio.final_blob);\n      },\n      visualize: function visualize(stream) {\n        if (!opt.audio.ctx) {\n          opt.audio.ctx = new AudioContext();\n        }\n        var source = opt.audio.ctx.createMediaStreamSource(stream);\n        var analyser = opt.audio.ctx.createAnalyser();\n        analyser.fftSize = 2048;\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Uint8Array(bufferLength);\n        source.connect(analyser);\n        var draw = function draw() {\n          var WIDTH = opt.elements.visualizer.width;\n          var HEIGHT = opt.elements.visualizer.height;\n          analyser.getByteTimeDomainData(dataArray);\n          opt.elements.visualizerCtx.fillStyle = 'rgb(48, 48, 48)';\n          opt.elements.visualizerCtx.fillRect(0, 0, WIDTH, HEIGHT);\n          opt.elements.visualizerCtx.lineWidth = 2;\n          opt.elements.visualizerCtx.strokeStyle = 'rgb(0, 188, 40)';\n          opt.elements.visualizerCtx.beginPath();\n          var sliceWidth = WIDTH * 1.0 / bufferLength;\n          var x = 0;\n          for (var i = 0; i < bufferLength; i++) {\n            var v = dataArray[i] / 128.0;\n            var y = v * HEIGHT / 2;\n            if (i === 0) {\n              opt.elements.visualizerCtx.moveTo(x, y);\n            } else {\n              opt.elements.visualizerCtx.lineTo(x, y);\n            }\n            x += sliceWidth;\n          }\n          opt.elements.visualizerCtx.lineTo(opt.elements.visualizer.width, opt.elements.visualizer.height / 2);\n          opt.elements.visualizerCtx.stroke();\n          opt.audio.animator = requestAnimationFrame(draw);\n        };\n        opt.audio.animator = requestAnimationFrame(draw);\n      },\n      closed: function closed() {\n        if (opt.audio.stream) {\n          opt.audio.stream.getTracks().forEach(function (track) {\n            return track.stop();\n          });\n        }\n        if (opt.audio.animator) {\n          cancelAnimationFrame(opt.audio.animator);\n        }\n        opt = {\n          lock: false,\n          using: false,\n          elements: {\n            visualizer: null,\n            animator: null,\n            visualizerCtx: null,\n            record_audio_action: null,\n            start_audio_record: null,\n            is_audio_recording: null,\n            record_audio_results: null,\n            completed_audio: null\n          },\n          audio: {\n            stream: null,\n            ctx: null,\n            recorder: null,\n            final_blob: null\n          }\n        };\n      },\n      error: function error() {\n        Messenger.alert().destroyModal();\n        Messenger.alert().Alert({\n          theme: 'error',\n          title: 'Unable to load your audio device.',\n          toast: true\n        });\n        methods.closed();\n      }\n    },\n    templates = {\n      body: function body() {\n        return '<div id=\"record_audio_action\" class=\"col-12 text-center\">' + '<div class=\"col-12\"><canvas class=\"visualizer\" height=\"60px\"></canvas></div>' + '<div id=\"start_audio_record\"><h3>Start Recording</h3><button onclick=\"RecordAudio.start()\" type=\"button\" title=\"Start recording!\" class=\"mx-3 mb-4 btn btn-circle btn-circle-xl btn-success\"><i class=\"fas fa-microphone fa-2x\"></i></button></div>' + '<div id=\"is_audio_recording\" style=\"display: none\"><h3>Recording...</h3><button onclick=\"RecordAudio.stop()\" type=\"button\" title=\"Finish recording!\" class=\"mx-3 mb-4 btn btn-circle btn-circle-xl btn-danger glowing_warning_btn\"><i class=\"fas fa-microphone-alt fa-2x\"></i></button></div>' + '</div>' + '<div id=\"record_audio_results\" class=\"col-12 text-center\" style=\"display: none\">' + '<audio id=\"completed_audio\" controls></audio><hr>' + '<button onclick=\"RecordAudio.retry()\" type=\"button\" class=\"btn btn-lg btn-primary mr-2\"><i class=\"fas fa-redo\"></i> Retry</button>' + '<button onclick=\"RecordAudio.send()\" type=\"button\" class=\"btn btn-lg btn-success\"><i class=\"fas fa-play-circle\"></i> Send</button>' + '</div>';\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    open: methods.open,\n    start: methods.start,\n    stop: methods.stop,\n    retry: methods.retry,\n    send: methods.send,\n    state: function state() {\n      return opt;\n    },\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.lock = arg;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/modules/RecordAudio.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/modules/ThreadBots.js":
/*!************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/modules/ThreadBots.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nwindow.ThreadBots = function () {\n  var opt = {\n      lock: true,\n      thread: null,\n      bots_table: null,\n      current_bot: null,\n      current_bot_action_container: null,\n      avatar_input: null,\n      handlers: null,\n      current_handler: null,\n      current_action: null\n    },\n    mounted = {\n      Initialize: function Initialize() {\n        opt.lock = false;\n        $('body').append(templates.avatar_input());\n        opt.avatar_input = document.getElementById('bot_avatar_upload');\n        opt.avatar_input.addEventListener('change', methods.uploadAvatar, false);\n      }\n    },\n    methods = {\n      setThread: function setThread() {\n        if (ThreadManager.state()._thread) {\n          opt.thread = ThreadManager.state()._thread;\n          return true;\n        }\n        return false;\n      },\n      loadDataTable: function loadDataTable(elm, term) {\n        if (opt.bots_table) opt.bots_table.destroy();\n        if (!elm || !elm.length) return;\n        opt.bots_table = elm.DataTable({\n          \"language\": {\n            \"info\": \"Showing _START_ to _END_ of _TOTAL_ \" + term,\n            \"lengthMenu\": \"Show _MENU_ \" + term,\n            \"infoEmpty\": \"Showing 0 to 0 of 0 \" + term,\n            \"infoFiltered\": \"(filtered from _MAX_ total \" + term + \")\",\n            \"emptyTable\": \"No \" + term + \" found\",\n            \"zeroRecords\": \"No matching \" + term + \" found\"\n          },\n          \"drawCallback\": function drawCallback(settings) {\n            var api = new $.fn.DataTable.Api(settings),\n              pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');\n            pagination.toggle(api.page.info().pages > 1);\n          },\n          \"pageLength\": 25\n        });\n      },\n      viewBots: function viewBots() {\n        if (!methods.setThread()) return;\n        var gather = function gather() {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots',\n            success: function success(bots) {\n              Messenger.alert().fillModal({\n                body: templates.bots(bots),\n                title: opt.thread.name + ' Bots'\n              });\n              methods.loadDataTable($(\"#view_bots_table\"), 'bots');\n            },\n            fail_alert: true\n          });\n        };\n        var modal = {\n          icon: 'robot',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Loading Bots...',\n          pre_loader: true,\n          overflow: true,\n          unlock_buttons: false,\n          h4: false,\n          size: 'lg',\n          onReady: gather\n        };\n        if (opt.thread.options.manage_bots) {\n          modal.cb_btn_txt = 'Create or Install Bot';\n          modal.cb_btn_icon = 'robot';\n          modal.cb_btn_theme = 'success';\n          modal.callback = methods.createOrInstall;\n        }\n        Messenger.alert().Modal(modal);\n      },\n      createOrInstall: function createOrInstall() {\n        Messenger.alert().Modal({\n          icon: 'robot',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Create or Install Bot',\n          h4: false,\n          size: 'md',\n          body: templates.create_or_install()\n        });\n      },\n      viewBotPackages: function viewBotPackages() {\n        if (!methods.setThread()) return;\n        var gather = function gather() {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/packages',\n            success: function success(packages) {\n              Messenger.alert().fillModal({\n                body: templates.bot_packages(packages),\n                title: 'Bot Packages'\n              });\n            },\n            fail_alert: true\n          });\n        };\n        Messenger.alert().Modal({\n          icon: 'robot',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Loading Bot Packages...',\n          pre_loader: true,\n          overflow: true,\n          unlock_buttons: false,\n          h4: false,\n          size: 'lg',\n          onReady: gather\n        });\n      },\n      addBot: function addBot() {\n        Messenger.alert().Modal({\n          icon: 'robot',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Add Bot',\n          overflow: true,\n          unlock_buttons: false,\n          h4: false,\n          size: 'md',\n          body: templates.add_bot(),\n          cb_btn_txt: 'Add Bot',\n          cb_btn_icon: 'robot',\n          cb_btn_theme: 'success',\n          onReady: function onReady() {\n            $(\".m_setting_toggle\").change(function () {\n              $(this).is(':checked') ? $(this).closest('tr').addClass('alert-success') : $(this).closest('tr').removeClass('alert-success');\n            });\n          },\n          callback: methods.storeBot\n        });\n      },\n      viewBot: function viewBot(id) {\n        if (!methods.setThread()) return;\n        var gather = function gather() {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + id,\n            success: function success(bot) {\n              opt.current_bot = bot;\n              Messenger.alert().fillModal({\n                body: templates.view_bot(bot),\n                title: bot.name\n              });\n              opt.current_bot_action_container = $(\"#bot_actions_container\");\n              if (bot.hasOwnProperty('actions')) {\n                setTimeout(function () {\n                  methods.loadDataTable($(\"#view_bots_actions_table\"), 'actions');\n                }, 100);\n              }\n            },\n            fail_alert: true\n          });\n        };\n        Messenger.alert().Modal({\n          icon: 'robot',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Loading Bot...',\n          pre_loader: true,\n          unlock_buttons: false,\n          h4: false,\n          size: 'fullscreen',\n          onReady: gather\n        });\n      },\n      editBot: function editBot(id) {\n        if (!methods.setThread()) return;\n        var gather = function gather() {\n          var fill = function fill(bot) {\n            opt.current_bot = bot;\n            Messenger.alert().fillModal({\n              body: templates.edit_bot(bot),\n              title: 'Editing ' + bot.name\n            });\n            $(\".m_setting_toggle\").change(function () {\n              $(this).is(':checked') ? $(this).closest('tr').addClass('alert-success') : $(this).closest('tr').removeClass('alert-success');\n            });\n          };\n          if (opt.current_bot && opt.current_bot.id === id) {\n            fill(opt.current_bot);\n            return;\n          }\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + id,\n            success: fill,\n            fail_alert: true,\n            fail_keep_open: true\n          });\n        };\n        Messenger.alert().Modal({\n          icon: 'robot',\n          backdrop_ctrl: false,\n          theme: 'dark',\n          title: 'Loading Bot...',\n          pre_loader: true,\n          unlock_buttons: false,\n          h4: false,\n          size: 'md',\n          overflow: true,\n          onReady: gather,\n          cb_btn_txt: 'Save Bot',\n          cb_btn_icon: 'robot',\n          cb_btn_theme: 'success',\n          callback: function callback() {\n            methods.updateBot(id);\n          }\n        });\n      },\n      editAction: function editAction(id) {\n        if (!methods.setThread() || !opt.current_bot) return;\n        if (!opt.current_bot.hasOwnProperty('actions') || !opt.current_bot.actions.length) {\n          methods.reloadBotActions();\n        }\n        for (var i = 0; i < opt.current_bot.actions.length; i++) {\n          if (opt.current_bot.actions[i].id === id) {\n            opt.current_action = opt.current_bot.actions[i];\n            return methods.generateEditActionForm();\n          }\n        }\n        methods.reloadBotActions();\n      },\n      updateAction: function updateAction() {\n        if (!methods.setThread() || !opt.current_bot || !opt.current_action) return;\n        Messenger.button().addLoader({\n          id: '#save_bot_action_btn'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/actions/' + opt.current_action.id,\n          data: methods.makeHandlerFormData(opt.current_action.handler),\n          success: methods.reloadBotActions,\n          fail_alert: true,\n          fail_keep_open: true\n        }, 'put');\n      },\n      generateEditActionForm: function generateEditActionForm() {\n        var _opt$current_action$h;\n        var extra = '';\n        switch (opt.current_action.handler.alias) {\n          case 'react':\n            extra = handlers.reaction(opt.current_action.payload.reaction);\n            break;\n          case 'react_bomb':\n            extra = handlers.reaction_bomb(opt.current_action.payload.reactions);\n            break;\n          case 'reply':\n            extra = handlers.replies(opt.current_action.payload);\n            break;\n          case 'invitations':\n            extra = handlers.invite_lifetime(opt.current_action.payload);\n            break;\n          case 'document_finder':\n          case 'wiki':\n          case 'youtube':\n            extra = handlers.result_limit(opt.current_action.payload);\n            break;\n        }\n        opt.current_bot_action_container.html(handlers.start(opt.current_action.handler, true) + handlers.base(opt.current_action) + handlers.triggers(opt.current_action.triggers, opt.current_action.handler.triggers, (_opt$current_action$h = opt.current_action.handler.match) !== null && _opt$current_action$h !== void 0 ? _opt$current_action$h : opt.current_action.match) + handlers.match(opt.current_action.match, opt.current_action.handler.match) + extra + handlers.end(true));\n        $(\".m_setting_toggle\").change(function () {\n          $(this).is(':checked') ? $(this).closest('tr').addClass('alert-success') : $(this).closest('tr').removeClass('alert-success');\n        });\n      },\n      viewAvailableHandlers: function viewAvailableHandlers() {\n        if (!methods.setThread() || !opt.current_bot) return;\n        opt.current_bot_action_container.html(Messenger.alert().loader(true));\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/add-handlers',\n          success: function success(handlers) {\n            opt.handlers = handlers;\n            opt.current_bot_action_container.html(templates.view_handlers(handlers));\n            methods.loadDataTable($(\"#view_handlers_table\"), 'actions');\n          },\n          fail_alert: true\n        });\n      },\n      createAction: function createAction(alias) {\n        if (!methods.setThread() || !opt.current_bot) return;\n        if (!opt.handlers) {\n          Messenger.xhr().request({\n            route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/add-handlers',\n            success: function success(handlers) {\n              opt.handlers = handlers;\n              methods.createAction(alias);\n            },\n            fail_alert: true\n          });\n          return;\n        }\n        for (var i = 0; i < opt.handlers.length; i++) {\n          if (opt.handlers[i].alias === alias) {\n            opt.current_handler = opt.handlers[i];\n            return methods.generateCreateActionForm();\n          }\n        }\n        methods.reloadBotActions();\n      },\n      generateCreateActionForm: function generateCreateActionForm() {\n        var extra = '';\n        switch (opt.current_handler.alias) {\n          case 'react':\n            extra = handlers.reaction();\n            break;\n          case 'react_bomb':\n            extra = handlers.reaction_bomb();\n            break;\n          case 'reply':\n            extra = handlers.replies();\n            break;\n          case 'invitations':\n            extra = handlers.invite_lifetime();\n            break;\n          case 'document_finder':\n          case 'wiki':\n          case 'youtube':\n            extra = handlers.result_limit();\n            break;\n        }\n        opt.current_bot_action_container.html(handlers.start(opt.current_handler, false) + handlers.base() + handlers.triggers(null, opt.current_handler.triggers, opt.current_handler.match) + handlers.match(null, opt.current_handler.match) + extra + handlers.end(false));\n        $(\".m_setting_toggle\").change(function () {\n          $(this).is(':checked') ? $(this).closest('tr').addClass('alert-success') : $(this).closest('tr').removeClass('alert-success');\n        });\n      },\n      storeAction: function storeAction() {\n        if (!methods.setThread() || !opt.current_handler || !opt.current_bot) return;\n        Messenger.button().addLoader({\n          id: '#save_bot_action_btn'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/actions',\n          data: methods.makeHandlerFormData(opt.current_handler),\n          success: methods.reloadBotActions,\n          fail_alert: true,\n          fail_keep_open: true\n        });\n      },\n      reloadBotActions: function reloadBotActions() {\n        if (!methods.setThread() || !opt.current_bot) return;\n        opt.current_bot_action_container.html(Messenger.alert().loader(true));\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/actions',\n          success: function success(actions) {\n            opt.current_bot.actions = actions;\n            opt.current_bot_action_container.html(templates.bot_actions_table(actions));\n            methods.loadDataTable($(\"#view_bots_actions_table\"), 'actions');\n          },\n          fail_alert: true\n        });\n      },\n      makeHandlerFormData: function makeHandlerFormData(handler) {\n        var form = {},\n          match = $(\"#g_s_action_match\").val();\n        form.handler = handler.alias;\n        form.cooldown = parseInt($(\"#g_s_bot_cooldown\").val());\n        form.enabled = $(\"#g_s_action_enabled\").is(\":checked\");\n        form.admin_only = $(\"#g_s_admin_only_action\").is(\":checked\");\n        if (!handler.triggers && ![handler.match, match].includes('any')) {\n          form.triggers = [$(\"#g_s_action_triggers\").val()];\n        }\n        if (!handler.match) {\n          form.match = match;\n        }\n        if (handler.alias === 'react') {\n          form.reaction = $(\"#g_s_bot_reaction\").val();\n        }\n        if (handler.alias === 'react_bomb') {\n          form.reactions = [];\n          for (var i = 0; i < 10; i++) {\n            var bomb_emoji = $(\"#bot_reaction_bomb_\" + i).val();\n            if (bomb_emoji.trim().length) form.reactions.push(bomb_emoji);\n          }\n        }\n        if (handler.alias === 'reply') {\n          form.quote_original = $(\"#g_s_quote_original\").is(\":checked\");\n          form.replies = [];\n          var replies = [$(\"#g_s_reply_1\").val(), $(\"#g_s_reply_2\").val(), $(\"#g_s_reply_3\").val(), $(\"#g_s_reply_4\").val(), $(\"#g_s_reply_5\").val()];\n          replies.forEach(function (reply) {\n            if (reply.trim().length) form.replies.push(reply);\n          });\n        }\n        if (handler.alias === 'invitations') {\n          form.lifetime_minutes = parseInt($(\"#g_s_bot_inv_lifetime\").val());\n        }\n        if (['document_finder', 'wiki', 'youtube'].includes(handler.alias)) {\n          form.limit = parseInt($(\"#g_s_bot_result_limit\").val());\n        }\n        return form;\n      },\n      removeBot: function removeBot(id) {\n        if (!methods.setThread()) return;\n        if (opt.current_bot && opt.current_bot.id === id) {\n          Messenger.alert().Modal({\n            theme: 'danger',\n            icon: 'trash',\n            backdrop_ctrl: false,\n            title: 'Remove Bot?',\n            body: templates.warn_delete(),\n            cb_btn_txt: 'Delete',\n            cb_btn_icon: 'trash',\n            cb_btn_theme: 'danger',\n            callback: methods.deleteBot\n          });\n          return;\n        }\n        Messenger.xhr().request({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + id,\n          success: function success(bot) {\n            opt.current_bot = bot;\n            methods.removeBot(bot.id);\n          },\n          fail_alert: true\n        });\n      },\n      removeAction: function removeAction(id) {\n        if (!methods.setThread() || !opt.current_bot) return;\n        opt.current_bot_action_container.html(Messenger.alert().loader(true));\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/actions/' + id,\n          data: {},\n          success: methods.reloadBotActions,\n          fail_alert: true\n        }, 'delete');\n      },\n      deleteBot: function deleteBot() {\n        if (!methods.setThread() || !opt.current_bot) return;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id,\n          data: {},\n          success: methods.viewBots,\n          fail_alert: true\n        }, 'delete');\n      },\n      storeBot: function storeBot() {\n        if (!methods.setThread()) return;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots',\n          data: {\n            name: $('#g_s_bot_name').val(),\n            enabled: $(\"#g_s_bot_enabled\").is(\":checked\"),\n            hide_actions: $(\"#g_s_hide_actions\").is(\":checked\"),\n            cooldown: parseInt($(\"#g_s_bot_cooldown\").val())\n          },\n          success: function success(bot) {\n            methods.viewBot(bot.id);\n          },\n          fail_alert: true,\n          fail_keep_open: true\n        });\n      },\n      installBotPackage: function installBotPackage(alias) {\n        if (!methods.setThread()) return;\n        Messenger.alert().fillModal({\n          loader: true,\n          title: 'Installing Bot...'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/packages',\n          data: {\n            alias: alias\n          },\n          success: function success(bot) {\n            methods.viewBot(bot.id);\n            Messenger.alert().Alert({\n              toast: true,\n              theme: 'success',\n              title: bot.name + ' was successfully installed.'\n            });\n          },\n          fail_alert: true\n        });\n      },\n      updateBot: function updateBot(id) {\n        if (!methods.setThread()) return;\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + id,\n          data: {\n            name: $('#g_s_bot_name').val(),\n            enabled: $(\"#g_s_bot_enabled\").is(\":checked\"),\n            hide_actions: $(\"#g_s_hide_actions\").is(\":checked\"),\n            cooldown: parseInt($(\"#g_s_bot_cooldown\").val())\n          },\n          success: function success(data) {\n            methods.viewBot(data.id);\n          },\n          fail_alert: true,\n          fail_keep_open: true\n        }, 'put');\n      },\n      uploadAvatar: function uploadAvatar() {\n        if (!methods.setThread() || !opt.current_bot || !opt.avatar_input.files.length) return;\n        var data = new FormData();\n        data.append('image', opt.avatar_input.files[0]);\n        PageListeners.listen().disposeTooltips();\n        Messenger.alert().fillModal({\n          loader: true,\n          no_close: true,\n          body: null,\n          title: 'Uploading...'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/avatar',\n          data: data,\n          success: function success(data) {\n            methods.viewBot(data.id);\n          },\n          fail_alert: true\n        });\n      },\n      removeAvatar: function removeAvatar() {\n        if (!methods.setThread() || !opt.current_bot) return;\n        Messenger.alert().fillModal({\n          loader: true,\n          no_close: true,\n          body: null,\n          title: 'Removing...'\n        });\n        Messenger.xhr().payload({\n          route: Messenger.common().API + 'threads/' + opt.thread.id + '/bots/' + opt.current_bot.id + '/avatar',\n          data: {},\n          success: function success() {\n            methods.viewBot(opt.current_bot.id);\n          },\n          fail_alert: true\n        }, 'delete');\n      },\n      updateTriggersForm: function updateTriggersForm() {\n        var container = $(\"#bot_action_triggers_form\");\n        if ($(\"#g_s_action_match\").val() === 'any') {\n          container.addClass('NS');\n        } else {\n          container.removeClass('NS');\n        }\n      }\n    },\n    templates = {\n      bots: function bots(_bots) {\n        var table_top = '<div class=\"row\">\\n' + '    <div class=\"col-12\">\\n' + '        <div class=\"table-responsive-sm\">\\n' + '            <table id=\"view_bots_table\" class=\"table table-sm table-hover\">\\n' + '                <thead>\\n' + '                <tr>\\n' + '                    <th>Name</th>\\n' + '                    <th>Enabled</th>\\n' + '                    <th>On Cooldown</th>\\n' + '                    <th>Cooldown</th>\\n' + '                    <th>Actions</th>\\n' + '                    <th>Options</th>\\n' + '                </tr>\\n' + '                </thead>\\n' + '                <tbody>',\n          table_bot = '</tbody></table></div></div></div>',\n          table_fill = '';\n        var bot_fill = function bot_fill(bot) {\n          var online = bot.enabled ? bot.on_cooldown ? 'away' : 'online' : 'offline',\n            manage = '<a class=\"dropdown-item\" onclick=\"ThreadBots.editBot(\\'' + bot.id + '\\'); return false;\" href=\"#\" title=\"Edit\"><i class=\"fas fa-edit\"></i> Edit</a>' + '<a class=\"dropdown-item\" onclick=\"ThreadBots.removeBot(\\'' + bot.id + '\\'); return false;\" href=\"#\" title=\"Remove\"><i class=\"fas fa-trash-alt\"></i> Delete</a>';\n          return '<tr id=\"row_' + bot.id + '\">\\n' + '     <td class=\"pointer_area\" onclick=\"ThreadBots.viewBot(\\'' + bot.id + '\\')\">\\n' + '      <div class=\"table_links\">\\n' + '        <div class=\"nowrap\">\\n' + '          <img alt=\"Bot Avatar\" class=\"rounded-circle group-image avatar-is-' + online + '\" src=\"' + bot.avatar.sm + '\" />\\n' + '          <span class=\"h5\"><span class=\"badge badge-light\">' + bot.name + '</span></span>\\n' + '         </div>\\n' + '       </div>\\n' + '  </td>' + '  <td class=\"h5\">\\n' + (bot.enabled ? '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i></span>' : '<span class=\"badge badge-danger\"><i class=\"fas fa-times\"></i></span>') + '  </td>\\n' + '  <td class=\"h5\">\\n' + (bot.on_cooldown ? '<span class=\"badge badge-danger\"><i class=\"fas fa-hourglass-half\"></i> Yes</span>' : '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i> No</span>') + '  </td>\\n' + '  <td class=\"h5\"><span class=\"badge badge-primary\">' + bot.cooldown + ' seconds</span></td>\\n' + '  <td class=\"h5\"><span class=\"badge badge-primary\">' + bot.actions_count + '</span></td>\\n' + '  <td>\\n' + '  <div class=\"dropdown float-right\">\\n' + '    <button class=\"btn btn-sm btn-outline-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fas fa-cog\"></i></button>\\n' + '    <div class=\"dropdown-menu dropdown-menu-right\">\\n' + '       <a class=\"dropdown-item\" onclick=\"ThreadBots.viewBot(\\'' + bot.id + '\\'); return false;\" href=\"#\" title=\"View\"><i class=\"fas fa-robot\"></i> ' + (opt.thread.options.manage_bots ? 'Manage Actions' : 'View Actions') + '</a>' + (opt.thread.options.manage_bots ? manage : '') + ' </span>\\n' + ' </div></div>' + '</td>\\n' + '</tr>';\n        };\n        if (_bots && _bots.length) {\n          _bots.forEach(function (bot) {\n            table_fill += bot_fill(bot);\n          });\n        }\n        return table_top + table_fill + table_bot;\n      },\n      create_or_install: function create_or_install() {\n        return '<div class=\"card mt-3\">' + '<div class=\"card-body bg-primary shadow rounded\">' + '<h4>Would you like to create your own bot or install a ready-made bot package?</h4>' + '</div>' + '</div><hr>' + '<div class=\"col-12 text-center mt-3\">' + '<button type=\"button\" onclick=\"ThreadBots.addBot()\" class=\"btn btn-lg btn-primary mt-2 mr-2\"><i class=\"fas fa-robot\"></i> Create</button>' + '<button type=\"button\" onclick=\"ThreadBots.viewBotPackages()\" class=\"btn btn-lg btn-primary mt-2\"><i class=\"fas fa-server\"></i> Install Package</button>' + '</div>';\n      },\n      bot_packages: function bot_packages(packages) {\n        if (!packages.length) {\n          return '<div class=\"card mt-3\">' + '<div class=\"card-body bg-warning shadow rounded text-center\">' + '<h4>There are no available bot packages to install.</h4>' + '</div></div>';\n        }\n        var html = '';\n        var package_fill = function package_fill(packaged_bot) {\n          var install_list = '',\n            already_installed_list = '',\n            useInstalls = false,\n            useAlreadyInstalled = false;\n          if (packaged_bot.installs.length) {\n            useInstalls = true;\n            packaged_bot.installs.forEach(function (install) {\n              install_list += '<li><u>' + install.name + '</u> - ' + install.description + '</li>';\n            });\n          }\n          if (packaged_bot.already_installed.length) {\n            useAlreadyInstalled = true;\n            packaged_bot.already_installed.forEach(function (installed) {\n              already_installed_list += '<li><u>' + installed.name + '</u> - ' + installed.description + '</li>';\n            });\n          }\n          return '<div class=\"col-12 bg-light rounded py-3 mb-2\">' + '<div class=\"col-12 h3\"><img height=\"75\" width=\"75\" class=\"mr-3 rounded avatar-is-online\" src=\"' + packaged_bot.avatar.md + '\"  alt=\"Bot Package\"/><u>' + packaged_bot.name + '</u></div>' + '<hr><h5>Description: ' + packaged_bot.description + '</h5>' + '<hr><h4>Installs: ' + (useInstalls ? '' : '<span class=\"badge badge-warning\">Nothing to install.</span>') + '</h4>' + (useInstalls ? '<ul>' + install_list + '</ul>' : '') + '<hr>' + (useAlreadyInstalled ? '<h4>Already Installed:</h4><ul>' + already_installed_list + '</ul><hr>' : '') + '<div class=\"col-12 text-center\"><button onclick=\"ThreadBots.installBotPackage(\\'' + packaged_bot.alias + '\\')\" type=\"button\" class=\"btn btn-md btn-primary\"><i class=\"fas fa-robot\"></i> Install ' + packaged_bot.name + '</button> </div> ' + '</div><hr>';\n        };\n        packages.forEach(function (packaged_bot) {\n          html += package_fill(packaged_bot);\n        });\n        return html;\n      },\n      add_bot: function add_bot() {\n        return '<form id=\"new_bot_form\" action=\"\">\\n' + '<div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <h5>Bot Name:</h5>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-robot\"></i></span>\\n' + '         </div>\\n' + '         <input autocomplete=\"off\" minlength=\"2\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_name\" placeholder=\"Bot Name\" name=\"bot-name-' + Date.now() + '\" required>' + '     </div>\\n' + '</div>' + '<hr>' + '<div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <h5>Cooldown (in seconds):</h5>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-clock\"></i></span>\\n' + '         </div>\\n' + '         <input type=\"number\" autocomplete=\"off\" min=\"0\" max=\"900\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_cooldown\" placeholder=\"Bot Cooldown\" name=\"bot-cooldown-' + Date.now() + '\" required value=\"0\">' + '     </div>\\n' + '</div>' + '    <hr>\\n' + '    <div class=\"form-row mx-n2 rounded bg-light text-dark pb-3 pt-2 px-3 shadow-sm\">\\n' + '        <label class=\"font-weight-bold h5 control-label\" for=\"g_s_table\">Bot Toggles:</label>\\n' + '        <table id=\"g_s_table\" class=\"table mb-0 table-sm table-hover\">\\n' + '            <tbody>\\n' + '            <tr class=\"alert-success\">\\n' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_bot_enabled\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Enabled</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_bot_enabled\" name=\"g_s_bot_enabled\" type=\"checkbox\" checked>\\n' + '                        <label for=\"g_s_bot_enabled\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            <tr>\\n' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_hide_actions\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Hide Actions</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_hide_actions\" name=\"g_s_hide_actions\" type=\"checkbox\">\\n' + '                        <label for=\"g_s_hide_actions\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            </tbody>\\n' + '        </table>\\n' + '    </div>\\n' + '</form>';\n      },\n      edit_bot: function edit_bot(bot) {\n        return '<form id=\"edit_bot_form\" action=\"\">\\n' + '<div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <h5 class=\"font-weight-bold\">Bot Name:</h5>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-robot\"></i></span>\\n' + '         </div>\\n' + '         <input autocomplete=\"off\" minlength=\"2\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_name\" placeholder=\"Bot Name\" name=\"bot-name-' + Date.now() + '\" required value=\"' + bot.name + '\">' + '     </div>\\n' + '</div>' + '<hr>' + '<div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <h5 class=\"font-weight-bold\">Cooldown [in seconds]:</h5>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-clock\"></i></span>\\n' + '         </div>\\n' + '         <input type=\"number\" autocomplete=\"off\" min=\"0\" max=\"900\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_cooldown\" placeholder=\"Bot Cooldown\" name=\"bot-cooldown-' + Date.now() + '\" required value=\"' + bot.cooldown + '\">' + '     </div>\\n' + '</div>' + '    <hr>\\n' + '    <div class=\"form-row mx-n2 rounded bg-light text-dark pb-3 pt-2 px-3 shadow-sm\">\\n' + '        <label class=\"font-weight-bold h5 control-label\" for=\"g_s_table\">Bot Toggles:</label>\\n' + '        <table id=\"g_s_table\" class=\"table mb-0 table-sm table-hover\">\\n' + '            <tbody>\\n' + '            <tr class=\"' + (bot.enabled ? 'alert-success' : '') + '\">\\n' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_bot_enabled\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Enabled</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_bot_enabled\" name=\"g_s_bot_enabled\" type=\"checkbox\" ' + (bot.enabled ? 'checked' : '') + '>\\n' + '                        <label for=\"g_s_bot_enabled\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            <tr class=\"' + (bot.hide_actions ? 'alert-success' : '') + '\">\\n' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_hide_actions\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Hide Actions</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_hide_actions\" name=\"g_s_hide_actions\" type=\"checkbox\" ' + (bot.hide_actions ? 'checked' : '') + '>\\n' + '                        <label for=\"g_s_hide_actions\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            </tbody>\\n' + '        </table>\\n' + '    </div>\\n' + '    <hr>\\n' + '    <div class=\"form-group mb-0 py-2 alert-dark shadow rounded\">\\n' + '    <div class=\"col-12\">' + '        <img alt=\"Avatar\" height=\"62\" width=\"62\" class=\"mr-3 rounded avatar-is-offline\" src=\"' + bot.avatar.sm + '\"/>' + '        <button onclick=\"$(\\'#bot_avatar_upload\\').click()\" type=\"button\" class=\"btn btn-sm btn-success mr-3\"><i class=\"fas fa-image\"></i> Upload Avatar</button>' + '        <button onclick=\"ThreadBots.removeAvatar()\" type=\"button\" class=\"btn btn-sm btn-danger\"><i class=\"fas fa-trash\"></i> Remove Avatar</button>' + '    </div></div>\\n' + '    <hr>\\n' + '    <div class=\"text-center form-group mb-0 py-2 alert-danger shadow rounded\">\\n' + '        <div class=\"mb-1 font-weight-bold\">You will be asked to confirm this action</div>\\n' + '        <button onclick=\"ThreadBots.removeBot(\\'' + bot.id + '\\')\" type=\"button\" class=\"btn btn-sm btn-danger\"><i class=\"fas fa-trash\"></i> Remove Bot</button>\\n' + '    </div>\\n' + '</form>';\n      },\n      view_bot: function view_bot(bot) {\n        var online = bot.enabled ? bot.on_cooldown ? 'away' : 'online' : 'offline',\n          actions = '<div class=\"col-12 mt-5 text-center h2\"><span class=\"badge badge-light\"><i class=\"fas fa-eye-slash\"></i> Actions are hidden</span></div>',\n          editable = '<hr class=\"mt-2\"><div class=\"row\"><div class=\"col-12 text-center\">' + '<button onclick=\"ThreadBots.editBot(\\'' + bot.id + '\\')\" type=\"button\" class=\"btn btn-sm btn-outline-success mr-3 mb-2\">Edit Bot <i class=\"fas fa-edit\"></i></button>' + '<button onclick=\"ThreadBots.viewAvailableHandlers()\" type=\"button\" class=\"btn btn-sm btn-outline-success mr-3 mb-2\">Add Actions <i class=\"fas fa-server\"></i></button>' + '<button class=\"btn btn-sm btn-outline-success dropdown-toggle mr-3 mb-2\" type=\"button\" id=\"botAvatarDropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\\n' + '  Bot Avatar <i class=\"fas fa-image\"></i>' + '</button>\\n' + '  <div class=\"dropdown-menu\" aria-labelledby=\"botAvatarDropdown\">\\n' + '    <a onclick=\"$(\\'#bot_avatar_upload\\').click(); return false;\" class=\"dropdown-item\" href=\"#\"><i class=\"fas fa-image\"></i> Upload Avatar</a>\\n' + '    <a onclick=\"ThreadBots.removeAvatar(); return false;\" class=\"dropdown-item\" href=\"#\"><i class=\"fas fa-trash\"></i> Remove Avatar</a>\\n' + '  </div>\\n' + '<button onclick=\"ThreadBots.removeBot(\\'' + bot.id + '\\')\" type=\"button\" class=\"btn btn-sm btn-outline-danger mr-3 mb-2\">Delete Bot <i class=\"fas fa-trash-alt\"></i></button>' + '</div></div><hr>';\n        if (bot.hasOwnProperty('actions')) {\n          actions = templates.bot_actions_table(bot.actions);\n        }\n        return '<div class=\"row\">' + '<div class=\"col-12 col-md-6 mb-3\">' + '<img alt=\"Avatar\" height=\"75\" width=\"75\" class=\"float-left mr-3 rounded avatar-is-' + online + '\" src=\"' + bot.avatar.md + '\"/>' + '<h3 class=\"font-weight-bold\">' + bot.name + '</h3>' + '<h5>Creator: ' + bot.owner.name + '</h4>' + '</div>' + '<div class=\"col-12 col-md-6 h5\">' + '<div class=\"float-right\">' + '<div class=\"col-12 mb-2\">Enabled : ' + (bot.enabled ? '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i></span>' : '<span class=\"badge badge-danger\"><i class=\"fas fa-times\"></i></span>') + '</div>' + '<div class=\"col-12 mb-2\">Cooldown : <span class=\"badge badge-primary mr-3\">' + bot.cooldown + ' seconds</span></div>' + '<div class=\"col-12\">On cooldown? ' + (bot.on_cooldown ? '<span class=\"badge badge-danger\"><i class=\"fas fa-hourglass-half\"></i> Yes</span>' : '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i> No</span>') + '</div>' + '</div></div></div>' + (opt.thread.options.manage_bots ? editable : '') + '<div id=\"bot_actions_container\">' + actions + '</div>';\n      },\n      bot_actions_table: function bot_actions_table(actions) {\n        var table_top = '<div class=\"row\">\\n' + '    <div class=\"col-12\">\\n' + '        <div class=\"table-responsive-xl\">\\n' + '            <table id=\"view_bots_actions_table\" class=\"table table-sm table-hover\">\\n' + '                <thead>\\n' + '                <tr>\\n' + '                    <th>Name</th>\\n' + '                    <th>Enabled</th>\\n' + '                    <th>Description</th>\\n' + '                    <th>Triggers</th>\\n' + '                    <th>Match</th>\\n' + '                    <th>Payload</th>\\n' + '                    <th>On Cooldown</th>\\n' + '                    <th>Cooldown</th>\\n' + '                    <th>Admin Only</th>\\n' + (opt.thread.options.manage_bots ? ' <th>Options</th>' : '') + '                </tr>\\n' + '                </thead>\\n' + '                <tbody>',\n          table_bot = '</tbody></table></div></div></div>',\n          table_fill = '';\n        var action_fill = function action_fill(action) {\n          var triggers = '<span class=\"badge badge-secondary font-italic\">N/A</span>',\n            options = '<td><div class=\"dropdown float-right\">' + '<button class=\"btn btn-sm btn-outline-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fas fa-cog\"></i></button>' + '    <div class=\"dropdown-menu dropdown-menu-right\">' + '       <a class=\"dropdown-item\" onclick=\"ThreadBots.editAction(\\'' + action.id + '\\'); return false;\" href=\"#\" title=\"Edit\"><i class=\"fas fa-edit\"></i> Edit</a>' + '       <a class=\"dropdown-item\" onclick=\"ThreadBots.removeAction(\\'' + action.id + '\\'); return false;\" href=\"#\" title=\"Delete\"><i class=\"fas fa-trash-alt\"></i> Delete</a>' + '</span></div></div></td>';\n          if (action.triggers && action.triggers.length) {\n            triggers = '';\n            action.triggers.forEach(function (trigger) {\n              return triggers += '<span class=\"badge badge-light mr-1\">' + trigger + '</span>';\n            });\n          }\n          return '<tr id=\"row_' + action.id + '\">\\n' + '  <td class=\"h5 nowrap\">' + action.handler.name + '</td>' + '  <td class=\"h5\">\\n' + (action.enabled ? '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i></span>' : '<span class=\"badge badge-danger\"><i class=\"fas fa-times\"></i></span>') + '  </td>\\n' + '  <td class=\"h6\">' + action.handler.description + '</td>' + '  <td class=\"h5\">' + triggers + '</td>' + '  <td class=\"h5\"><span class=\"badge badge-primary\">' + action.match + '</span></td>' + '  <td class=\"h5 nowrap action-payload\">' + templates.handler_payload(action) + '</td>' + '  <td class=\"h5\">\\n' + (action.on_cooldown ? '<span class=\"badge badge-danger\"><i class=\"fas fa-hourglass-half\"></i> Yes</span>' : '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i> No</span>') + '  </td>\\n' + '  <td class=\"h5\"><span class=\"badge badge-primary\">' + action.cooldown + ' seconds</span></td>\\n' + '  <td class=\"h5\">\\n' + (action.admin_only ? '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i></span>' : '<span class=\"badge badge-danger\"><i class=\"fas fa-times\"></i></span>') + '  </td>\\n' + (opt.thread.options.manage_bots ? options : '') + '</tr>';\n        };\n        if (actions && actions.length) {\n          actions.forEach(function (action) {\n            table_fill += action_fill(action);\n          });\n        }\n        return table_top + table_fill + table_bot;\n      },\n      handler_payload: function handler_payload(action) {\n        switch (action.handler.alias) {\n          case 'react':\n            return Messenger.format().shortcodeToImage(action.payload.reaction);\n          case 'react_bomb':\n            return Messenger.format().shortcodeToImage(action.payload.reactions.join('<span class=\"mr-1\"></span>'));\n          case 'reply':\n            var replies = '<ul class=\"p-0 my-0 mr-0 ml-1\">';\n            action.payload.replies.forEach(function (reply) {\n              return replies += '<li>' + Messenger.format().shortcodeToImage(reply) + '</li>';\n            });\n            return replies + '</ul>';\n          case 'invitations':\n            if (action.payload) {\n              return 'Lifetime of ' + action.payload.lifetime_minutes + ' minutes';\n            }\n            break;\n          case 'document_finder':\n          case 'youtube':\n          case 'wiki':\n            if (action.payload) {\n              return 'Max of ' + action.payload.limit + ' results';\n            }\n            break;\n        }\n        return '<span class=\"badge badge-secondary font-italic\">N/A</span>';\n      },\n      view_handlers: function view_handlers(handlers) {\n        var table_top = '<div class=\"col-12 my-3 text-center h2\"><span class=\"badge badge-light\"><i class=\"fas fa-list\"></i> Select an action:</span></div>' + '<div class=\"row\">\\n' + '    <div class=\"col-12\">\\n' + '        <div class=\"table-responsive-xl\">\\n' + '            <table id=\"view_handlers_table\" class=\"table table-sm table-hover\">\\n' + '                <thead>\\n' + '                <tr>\\n' + '                    <th>Name</th>\\n' + '                    <th>Description</th>\\n' + '                    <th>Unique</th>\\n' + '                    <th>Preset Triggers</th>\\n' + '                    <th>Preset Match</th>\\n' + '                    <th>Options</th>\\n' + '                </tr>\\n' + '                </thead>\\n' + '                <tbody>',\n          table_fill = '',\n          table_bot = '</tbody></table></div></div></div>' + '<hr><div class=\"col-12 text-center\">' + '<button onclick=\"ThreadBots.reloadBotActions()\" type=\"button\" class=\"btn btn-info\">Cancel <i class=\"fas fa-undo\"></i></button>' + '</div>';\n        var handler_fill = function handler_fill(handler) {\n          var _handler$match;\n          var triggers = '<span class=\"badge badge-secondary font-italic\">N/A</span>';\n          if (handler.triggers && handler.triggers.length) {\n            triggers = '';\n            handler.triggers.forEach(function (trigger) {\n              return triggers += '<span class=\"badge badge-light mr-1\">' + trigger + '</span>';\n            });\n          }\n          return '<tr class=\"pointer_area\" onclick=\"ThreadBots.createAction(\\'' + handler.alias + '\\')\">\\n' + '  <td class=\"h5 nowrap\">' + handler.name + '</td>' + '  <td class=\"h6\">' + handler.description + '</td>' + '  <td class=\"h5\">\\n' + (handler.unique ? '<span class=\"badge badge-success\"><i class=\"fas fa-check\"></i></span>' : '<span class=\"badge badge-danger\"><i class=\"fas fa-times\"></i></span>') + '  </td>\\n' + '  <td class=\"h5 nowrap\">' + triggers + '</td>' + '  <td class=\"h5\">' + ((_handler$match = handler.match) !== null && _handler$match !== void 0 ? _handler$match : '<span class=\"badge badge-secondary font-italic\">N/A</span>') + '</td>' + '  <td class=\"h5\"><button type=\"button\" class=\"btn btn-sm btn-primary\">Select <i class=\"fas fa-server\"></i></button></td>' + '</tr>';\n        };\n        if (handlers && handlers.length) {\n          handlers.forEach(function (handler) {\n            table_fill += handler_fill(handler);\n          });\n        }\n        return table_top + table_fill + table_bot;\n      },\n      warn_delete: function warn_delete() {\n        return 'Really Delete <strong>' + opt.current_bot.name + '</strong>?' + '<div class=\"card mt-3\"><div class=\"card-body bg-warning shadow rounded\"><h5>This cannot be undone. All actions will be removed from ' + opt.current_bot.name + ' as well. ' + 'Any previous interactions sent by ' + opt.current_bot.name + ' will be preserved.</h5></div></div>';\n      },\n      avatar_input: function avatar_input() {\n        return '<input style=\"display: none;\" class=\"NS\" id=\"bot_avatar_upload\" type=\"file\" name=\"profile_avatar_upload\" accept=\"image/*\">';\n      }\n    },\n    handlers = {\n      start: function start(handler, edit) {\n        return '<div class=\"col-12 my-3 text-center h2\"><span class=\"badge badge-light\"><i class=\"fas fa-edit\"></i> ' + (edit ? 'Editing' : 'Creating') + ' ' + handler.name + ':</span></div>' + '<div class=\"col-12 col-md-6 offset-md-3 text-center h3 mb-4\"><i class=\"fas fa-info-circle\"></i> ' + handler.description + '</div> ' + '<div class=\"col-12 col-md-6 offset-md-3\">' + '<form id=\"bot_action_form\" action=\"\">';\n      },\n      end: function end(edit) {\n        var delete_btn = '';\n        if (edit) {\n          delete_btn = '<button onclick=\"ThreadBots.removeAction(\\'' + opt.current_action.id + '\\')\" type=\"button\" class=\"btn btn-lg btn-danger mr-3\">Delete <i class=\"fas fa-trash-alt\"></i></button>';\n        }\n        return '</form></div>' + '<hr><div class=\"col-12 text-center\">' + '<button onclick=\"ThreadBots.reloadBotActions()\" type=\"button\" class=\"btn btn-lg btn-info mr-3\">Cancel <i class=\"fas fa-undo\"></i></button>' + delete_btn + '<button id=\"save_bot_action_btn\" onclick=\"' + (edit ? 'ThreadBots.updateAction()' : 'ThreadBots.storeAction()') + '\" type=\"button\" class=\"btn btn-lg btn-success\">' + (edit ? 'Update' : 'Save') + ' <i class=\"fas fa-save\"></i></button>' + '</div>';\n      },\n      base: function base(values) {\n        var cooldown = 15,\n          enabled = true,\n          admin_only = false;\n        if (values) {\n          cooldown = values.cooldown;\n          enabled = values.enabled;\n          admin_only = values.admin_only;\n        }\n        return '<div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <div class=\"col-12\"><h5 class=\"font-weight-bold\">Cooldown [ in seconds ]:</h5></div>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-clock\"></i></span>\\n' + '         </div>\\n' + '         <input type=\"number\" autocomplete=\"off\" min=\"0\" max=\"900\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_cooldown\" placeholder=\"Bot Cooldown\" name=\"bot-cooldown-' + Date.now() + '\" required value=\"' + cooldown + '\">' + '     </div>\\n' + '</div>' + '    <hr>\\n' + '    <div class=\"form-row mx-n2 rounded bg-light text-dark pb-3 pt-2 px-3 shadow-sm\">\\n' + '        <label class=\"font-weight-bold h5 control-label\" for=\"g_s_table\">Action Toggles:</label>\\n' + '        <table id=\"g_s_table\" class=\"table mb-0 table-sm table-hover\">\\n' + '            <tbody>\\n' + '            <tr class=\"' + (enabled ? 'alert-success' : '') + '\">\\n' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_action_enabled\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Enabled</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_action_enabled\" name=\"g_s_action_enabled\" type=\"checkbox\" ' + (enabled ? 'checked' : '') + '>\\n' + '                        <label for=\"g_s_action_enabled\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            <tr class=\"' + (admin_only ? 'alert-success' : '') + '\">' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_admin_only_action\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Admin Only</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_admin_only_action\" name=\"g_s_admin_only_action\" type=\"checkbox\" ' + (admin_only ? 'checked' : '') + '>\\n' + '                        <label for=\"g_s_admin_only_action\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            </tbody>\\n' + '        </table>\\n' + '    </div>';\n      },\n      triggers: function triggers(values, overrides, match) {\n        var triggers = '',\n          readonly = false,\n          hidden = false,\n          text = '[ Separate multiple triggers using commas ( , ) or the pipe ( | ) ]';\n        if (overrides && overrides.length) {\n          triggers = overrides.join('|');\n          readonly = true;\n          text = '<span class=\"badge badge-warning\">Cannot change</span>';\n        } else if (values && values.length) {\n          triggers = values.join('|');\n        }\n        if (match === 'any') {\n          hidden = true;\n        }\n        return '<div id=\"bot_action_triggers_form\" class=\"' + (hidden ? 'NS' : '') + '\">' + '<hr>' + '<div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <div class=\"col-12\"><h5 class=\"font-weight-bold\">Triggers: ' + text + '</h5></div>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-laptop-code\"></i></span>\\n' + '         </div>\\n' + '         <input ' + (readonly ? 'readonly' : '') + ' autocomplete=\"off\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_action_triggers\" placeholder=\"!command | hello | sentence as a trigger\" name=\"bot-triggers-' + Date.now() + '\" required value=\"' + triggers + '\">' + '     </div>\\n' + '   </div>' + '</div>';\n      },\n      match: function match(value, override) {\n        var match = 'exact',\n          readonly = false,\n          text = '<span class=\"badge badge-warning\">Cannot change</span>';\n        if (override) {\n          match = override;\n          readonly = true;\n        } else if (value) {\n          match = value;\n        }\n        return '<hr><div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '<div class=\"col-12\"><h5 class=\"font-weight-bold\">Match Method: ' + (readonly ? text : '') + '</h5></div>' + '<div class=\"col-12 mb-3\"><div class=\"col-12 col-lg-8 offset-lg-2\">' + '<select onchange=\"ThreadBots.updateTriggers()\" id=\"g_s_action_match\" class=\"custom-select custom-select-lg\" ' + (readonly ? 'disabled' : '') + '>\\n' + '  <option value=\"any\" ' + (match === \"any\" ? 'selected' : '') + '>any</option>\\n' + '  <option value=\"contains\" ' + (match === \"contains\" ? 'selected' : '') + '>contains</option>\\n' + '  <option value=\"contains:caseless\" ' + (match === \"contains:caseless\" ? 'selected' : '') + '>contains:caseless</option>\\n' + '  <option value=\"contains:any\" ' + (match === \"contains:any\" ? 'selected' : '') + '>contains:any</option>\\n' + '  <option value=\"contains:any:caseless\" ' + (match === \"contains:any:caseless\" ? 'selected' : '') + '>contains:any:caseless</option>\\n' + '  <option value=\"exact\" ' + (match === \"exact\" ? 'selected' : '') + '>exact</option>\\n' + '  <option value=\"exact:caseless\" ' + (match === \"exact:caseless\" ? 'selected' : '') + '>exact:caseless</option>\\n' + '  <option value=\"starts:with\" ' + (match === \"starts:with\" ? 'selected' : '') + '>starts:with</option>\\n' + '  <option value=\"starts:with:caseless\" ' + (match === \"starts:with:caseless\" ? 'selected' : '') + '>starts:with:caseless</option>\\n' + '</select>' + '</div></div>' + '<div class=\"col-12 h6\">' + '    <ul>' + '        <li>any - The action will be triggered for any message sent.</li>' + '        <li>contains - The trigger can be anywhere within a message. Cannot be part of or inside another word.</li>' + '        <li>contains:caseless - Same as \"contains\", but is case insensitive.</li>' + '        <li>contains:any - The trigger can be anywhere within a message, including inside another word.</li>' + '        <li>contains:any:caseless - Same as \"contains any\", but is case insensitive.</li>' + '        <li>exact - The trigger must match the message exactly.</li>' + '        <li>exact:caseless - Same as \"exact\", but is case insensitive.</li>' + '        <li>starts:with - The trigger must be the lead phrase within the message. Cannot be part of or inside another word.</li>' + '        <li>starts:with:caseless - Same as \"starts with\", but is case insensitive.</li>' + '    </ul>' + '</div></div>';\n      },\n      reaction: function reaction(_reaction) {\n        var value = '';\n        if (_reaction) {\n          value = Messenger.format().shortcodeToUnicode(_reaction);\n        }\n        return '<hr><div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <div class=\"col-12\"><h5 class=\"font-weight-bold\">Reaction: [ emoji ]</h5></div>' + '    <div class=\"input-group input-group-lg col-12 col-md-4 offset-md-4\">\\n' + '         <input onclick=\"EmojiPicker.botActionReact()\" readonly autocomplete=\"off\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_reaction\" placeholder=\"Pick emoji\" name=\"bot-reaction-' + Date.now() + '\" required value=\"' + value + '\">' + '         <div class=\"input-group-append\">\\n' + '           <button onclick=\"EmojiPicker.botActionReact()\" class=\"btn btn-primary\" type=\"button\" id=\"bot_reaction_emoji_btn\"><i class=\"fas fa-grin\"></i></button>\\n' + '         </div>' + '     </div>' + '</div>';\n      },\n      reaction_bomb: function reaction_bomb(reactions) {\n        var fields = '';\n        var field = function field(index) {\n          var emoji = reactions && reactions.hasOwnProperty(index) ? Messenger.format().shortcodeToUnicode(reactions[index]) : '';\n          return '<div class=\"input-group input-group-lg col-12 col-md-4 offset-md-4 mb-2\">\\n' + '<div class=\"input-group-prepend\">\\n' + '    <button onclick=\"EmojiPicker.resetBotActionReactBomb(' + index + ')\" class=\"btn btn-danger\" type=\"button\"><i class=\"fas fa-trash\"></i></button>\\n' + '</div>' + '<input onclick=\"EmojiPicker.botActionReactBomb(' + index + ')\" readonly autocomplete=\"off\" class=\"form-control font-weight-bold shadow-sm\" id=\"bot_reaction_bomb_' + index + '\" placeholder=\"Pick emoji\" name=\"bot-reaction-' + Date.now() + '\" required value=\"' + emoji + '\">' + '  <div class=\"input-group-append\">\\n' + '    <button onclick=\"EmojiPicker.botActionReactBomb(' + index + ')\" class=\"btn btn-primary\" type=\"button\" id=\"bot_reaction_bomb_btn_' + index + '\"><i class=\"fas fa-grin\"></i></button>\\n' + '  </div>' + '</div>';\n        };\n        for (var i = 0; i < 10; i++) {\n          fields += field(i);\n        }\n        return '<hr><div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + ' <div class=\"col-12\"><h5 class=\"font-weight-bold\">Reactions: [ emojis ]</h5></div>' + fields + '</div>';\n      },\n      replies: function replies(payload) {\n        var quote = false,\n          reply1 = '',\n          reply2 = '',\n          reply3 = '',\n          reply4 = '',\n          reply5 = '';\n        if (payload) {\n          quote = payload.quote_original;\n          reply1 = payload.replies[0] ? Messenger.format().shortcodeToUnicode(payload.replies[0]) : '';\n          reply2 = payload.replies[1] ? Messenger.format().shortcodeToUnicode(payload.replies[1]) : '';\n          reply3 = payload.replies[2] ? Messenger.format().shortcodeToUnicode(payload.replies[2]) : '';\n          reply4 = payload.replies[3] ? Messenger.format().shortcodeToUnicode(payload.replies[3]) : '';\n          reply5 = payload.replies[4] ? Messenger.format().shortcodeToUnicode(payload.replies[4]) : '';\n        }\n        return '<hr><div class=\"form-row mx-n2 rounded bg-light text-dark pb-3 pt-2 px-2 shadow-sm\">\\n' + '    <div class=\"col-12\"><h5 class=\"font-weight-bold\">Replies: [ One required. Max of 5 ]</h5></div>' + '        <label class=\"control-label\" for=\"g_replies_table\"> - Quote matching message? When enabled, the first reply will use the matching message within the reply.</label>' + '        <table id=\"g_replies_table\" class=\"table table-sm table-hover\">\\n' + '            <tbody>\\n' + '            <tr class=\"' + (quote ? 'alert-success' : '') + '\">\\n' + '                <td class=\"pointer_area\" onclick=\"$(\\'#g_s_quote_original\\').click()\">\\n' + '                    <div class=\"h4 mt-1\"><i class=\"fas fa-caret-right\"></i> <span class=\"h5\">Quote matching message?</span></div>\\n' + '                </td>\\n' + '                <td>\\n' + '                    <div class=\"mt-1 float-right\"><span class=\"switch switch-sm mt-1\">\\n' + '                        <input class=\"switch switch_input m_setting_toggle\" id=\"g_s_quote_original\" name=\"g_s_quote_original\" type=\"checkbox\" ' + (quote ? 'checked' : '') + '>\\n' + '                        <label for=\"g_s_quote_original\"></label>\\n' + '                    </span></div>\\n' + '                </td>\\n' + '            </tr>\\n' + '            </tbody>\\n' + '        </table>\\n' + '<input autocomplete=\"off\" class=\"form-control form-control-lg font-weight-bold shadow-sm my-2\" id=\"g_s_reply_1\" placeholder=\"First reply...\" name=\"bot-reply-' + Date.now() + '\" value=\"' + reply1 + '\">' + '<input autocomplete=\"off\" class=\"form-control form-control-lg font-weight-bold shadow-sm mb-2\" id=\"g_s_reply_2\" placeholder=\"Second reply...\" name=\"bot-reply-' + Date.now() + '\" value=\"' + reply2 + '\">' + '<input autocomplete=\"off\" class=\"form-control form-control-lg font-weight-bold shadow-sm mb-2\" id=\"g_s_reply_3\" placeholder=\"Third reply...\" name=\"bot-reply-' + Date.now() + '\" value=\"' + reply3 + '\">' + '<input autocomplete=\"off\" class=\"form-control form-control-lg font-weight-bold shadow-sm mb-2\" id=\"g_s_reply_4\" placeholder=\"Fourth reply...\" name=\"bot-reply-' + Date.now() + '\" value=\"' + reply4 + '\">' + '<input autocomplete=\"off\" class=\"form-control form-control-lg font-weight-bold shadow-sm\" id=\"g_s_reply_5\" placeholder=\"Fifth reply...\" name=\"bot-reply-' + Date.now() + '\" value=\"' + reply5 + '\">' + '</div>';\n      },\n      result_limit: function result_limit(payload) {\n        var limit = 3;\n        if (payload) {\n          limit = payload.limit;\n        }\n        return '<hr><div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <div class=\"col-12\"><h5 class=\"font-weight-bold\">Max number of results: [ 10 max ]</h5></div>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-list-ol\"></i></span>\\n' + '         </div>\\n' + '         <input type=\"number\" autocomplete=\"off\" min=\"1\" max=\"10\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_result_limit\" placeholder=\"Results Limit\" name=\"bot-limit-' + Date.now() + '\" required value=\"' + limit + '\">' + '     </div>\\n' + '</div>';\n      },\n      invite_lifetime: function invite_lifetime(payload) {\n        var lifetime = 15;\n        if (payload) {\n          lifetime = payload.lifetime_minutes;\n        }\n        return '<hr><div class=\"form-row mx-n2 rounded bg-light text-dark pt-2 pb-3 px-2 shadow-sm\">\\n' + '    <div class=\"col-12\"><h5 class=\"font-weight-bold\">Invite lifetime: [ between 5 and 60 minutes ]</h5></div>' + '    <div class=\"input-group input-group-lg col-12 mb-0\">\\n' + '        <div class=\"input-group-prepend\">\\n' + '            <span class=\"input-group-text\"><i class=\"fas fa-clock\"></i></span>\\n' + '         </div>\\n' + '         <input type=\"number\" autocomplete=\"off\" min=\"5\" max=\"60\" class=\"form-control font-weight-bold shadow-sm\" id=\"g_s_bot_inv_lifetime\" placeholder=\"Invite Lifetime\" name=\"bot-invite-lifetime-' + Date.now() + '\" required value=\"' + lifetime + '\">' + '     </div>\\n' + '</div>';\n      }\n    };\n  return {\n    init: mounted.Initialize,\n    viewBots: methods.viewBots,\n    addBot: methods.addBot,\n    viewBot: methods.viewBot,\n    viewBotPackages: methods.viewBotPackages,\n    installBotPackage: methods.installBotPackage,\n    editBot: methods.editBot,\n    removeAvatar: methods.removeAvatar,\n    removeBot: methods.removeBot,\n    viewAvailableHandlers: methods.viewAvailableHandlers,\n    reloadBotActions: methods.reloadBotActions,\n    createAction: methods.createAction,\n    storeAction: methods.storeAction,\n    editAction: methods.editAction,\n    updateAction: methods.updateAction,\n    removeAction: methods.removeAction,\n    updateTriggers: methods.updateTriggersForm,\n    state: function state() {\n      return opt;\n    },\n    lock: function lock(arg) {\n      if (typeof arg === 'boolean') opt.lock = arg;\n    }\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./vendor/rtippin/messenger-ui/resources/js/modules/ThreadBots.js\n");

/***/ }),

/***/ "./vendor/rtippin/messenger-ui/resources/js/templates/ThreadTemplates.js":
/*!*******************************************************************************!*\
  !*** ./vendor/rtippin/messenger-ui/resources/js/templates/ThreadTemplates.js ***!
  \*******************************************************************************/
/***/ (() => {

throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nSyntaxError: /home/r/Websites/timebank_cc_2/vendor/rtippin/messenger-ui/resources/js/templates/ThreadTemplates.js: Missing semicolon. (1227:138)\n\n\u001b[0m \u001b[90m 1225 |\u001b[39m                 \u001b[32m'                            <div class=\"col-12\">\\n'\u001b[39m \u001b[33m+\u001b[39m\n \u001b[90m 1226 |\u001b[39m                 \u001b[32m'                            <div class=\"input-group\">\\n'\u001b[39m \u001b[33m+\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1227 |\u001b[39m                 \u001b[32m'                                <input minlength=\"3\" maxlength=\"50\" class=\"form-control\" id=\"subject\" placeholder=\"{{__('\u001b[39m\u001b[33mName\u001b[39m the group conversation\u001b[33m!\u001b[39m\u001b[32m')}}\" name=\"subject-'\u001b[39m\u001b[33m+\u001b[39m\u001b[33mDate\u001b[39m\u001b[33m.\u001b[39mnow()\u001b[33m+\u001b[39m\u001b[32m'\" autocomplete=\"off\" required>\\n'\u001b[39m \u001b[33m+\u001b[39m\n \u001b[90m      |\u001b[39m                                                                                                                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 1228 |\u001b[39m                 \u001b[32m'                                <div class=\"input-group-append\">\\n'\u001b[39m \u001b[33m+\u001b[39m\n \u001b[90m 1229 |\u001b[39m                 \u001b[32m'                                    <button id=\"make_thread_btn\" class=\"btn btn-primary\"><i class=\"fas fa-edit\"></i> Create</button>\\n'\u001b[39m \u001b[33m+\u001b[39m\n \u001b[90m 1230 |\u001b[39m                 \u001b[32m'                                </div>\\n'\u001b[39m \u001b[33m+\u001b[39m\u001b[0m\n    at constructor (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:351:19)\n    at Parser.raise (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:3233:19)\n    at Parser.semicolon (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:3554:10)\n    at Parser.parseReturnStatement (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12604:12)\n    at Parser.parseStatementContent (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12254:21)\n    at Parser.parseStatementLike (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12223:17)\n    at Parser.parseStatementListItem (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12203:17)\n    at Parser.parseBlockOrModuleBlockBody (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12780:61)\n    at Parser.parseBlockBody (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12773:10)\n    at Parser.parseBlock (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12761:10)\n    at Parser.parseFunctionBody (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11600:24)\n    at Parser.parseFunctionBodyAndFinish (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11586:10)\n    at /home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12903:12\n    at Parser.withSmartMixTopicForbiddingContext (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11897:14)\n    at Parser.parseFunction (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12902:10)\n    at Parser.parseFunctionOrFunctionSent (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11067:17)\n    at Parser.parseExprAtom (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10856:21)\n    at Parser.parseExprSubscripts (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10568:23)\n    at Parser.parseUpdate (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10551:21)\n    at Parser.parseMaybeUnary (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10529:23)\n    at Parser.parseMaybeUnaryOrPrivate (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10383:61)\n    at Parser.parseExprOps (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10388:23)\n    at Parser.parseMaybeConditional (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10365:23)\n    at Parser.parseMaybeAssign (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10326:21)\n    at /home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10296:39\n    at Parser.allowInAnd (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11920:12)\n    at Parser.parseMaybeAssignAllowIn (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10296:17)\n    at Parser.parseObjectProperty (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11454:83)\n    at Parser.parseObjPropValue (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11479:100)\n    at Parser.parsePropertyDefinition (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11419:17)\n    at Parser.parseObjectLike (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11334:21)\n    at Parser.parseExprAtom (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10853:23)\n    at Parser.parseExprSubscripts (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10568:23)\n    at Parser.parseUpdate (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10551:21)\n    at Parser.parseMaybeUnary (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10529:23)\n    at Parser.parseMaybeUnaryOrPrivate (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10383:61)\n    at Parser.parseExprOps (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10388:23)\n    at Parser.parseMaybeConditional (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10365:23)\n    at Parser.parseMaybeAssign (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10326:21)\n    at /home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10296:39\n    at Parser.allowInAnd (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:11915:16)\n    at Parser.parseMaybeAssignAllowIn (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:10296:17)\n    at Parser.parseVar (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12848:91)\n    at Parser.parseVarStatement (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12694:10)\n    at Parser.parseStatementContent (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12306:23)\n    at Parser.parseStatementLike (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12223:17)\n    at Parser.parseStatementListItem (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12203:17)\n    at Parser.parseBlockOrModuleBlockBody (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12780:61)\n    at Parser.parseBlockBody (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12773:10)\n    at Parser.parseBlock (/home/r/Websites/timebank_cc_2/node_modules/@babel/parser/lib/index.js:12761:10)");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanM/Mzc3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/*!\n  * Bootstrap v4.6.2 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\")) :\n  0;\n})(this, (function (exports, $, Popper) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var $__default = /*#__PURE__*/_interopDefaultLegacy($);\n  var Popper__default = /*#__PURE__*/_interopDefaultLegacy(Popper);\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n\n  function _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n\n    _setPrototypeOf(subClass, superClass);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n    return _setPrototypeOf(o, p);\n  }\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v4.6.2): util.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Private TransitionEnd Helpers\n   */\n\n  var TRANSITION_END = 'transitionend';\n  var MAX_UID = 1000000;\n  var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  function toType(obj) {\n    if (obj === null || typeof obj === 'undefined') {\n      return \"\" + obj;\n    }\n\n    return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase();\n  }\n\n  function getSpecialTransitionEndEvent() {\n    return {\n      bindType: TRANSITION_END,\n      delegateType: TRANSITION_END,\n      handle: function handle(event) {\n        if ($__default[\"default\"](event.target).is(this)) {\n          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params\n        }\n\n        return undefined;\n      }\n    };\n  }\n\n  function transitionEndEmulator(duration) {\n    var _this = this;\n\n    var called = false;\n    $__default[\"default\"](this).one(Util.TRANSITION_END, function () {\n      called = true;\n    });\n    setTimeout(function () {\n      if (!called) {\n        Util.triggerTransitionEnd(_this);\n      }\n    }, duration);\n    return this;\n  }\n\n  function setTransitionEndSupport() {\n    $__default[\"default\"].fn.emulateTransitionEnd = transitionEndEmulator;\n    $__default[\"default\"].event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\n  }\n  /**\n   * Public Util API\n   */\n\n\n  var Util = {\n    TRANSITION_END: 'bsTransitionEnd',\n    getUID: function getUID(prefix) {\n      do {\n        // eslint-disable-next-line no-bitwise\n        prefix += ~~(Math.random() * MAX_UID); // \"~~\" acts like a faster Math.floor() here\n      } while (document.getElementById(prefix));\n\n      return prefix;\n    },\n    getSelectorFromElement: function getSelectorFromElement(element) {\n      var selector = element.getAttribute('data-target');\n\n      if (!selector || selector === '#') {\n        var hrefAttr = element.getAttribute('href');\n        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';\n      }\n\n      try {\n        return document.querySelector(selector) ? selector : null;\n      } catch (_) {\n        return null;\n      }\n    },\n    getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {\n      if (!element) {\n        return 0;\n      } // Get transition-duration of the element\n\n\n      var transitionDuration = $__default[\"default\"](element).css('transition-duration');\n      var transitionDelay = $__default[\"default\"](element).css('transition-delay');\n      var floatTransitionDuration = parseFloat(transitionDuration);\n      var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n      if (!floatTransitionDuration && !floatTransitionDelay) {\n        return 0;\n      } // If multiple durations are defined, take the first\n\n\n      transitionDuration = transitionDuration.split(',')[0];\n      transitionDelay = transitionDelay.split(',')[0];\n      return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n    },\n    reflow: function reflow(element) {\n      return element.offsetHeight;\n    },\n    triggerTransitionEnd: function triggerTransitionEnd(element) {\n      $__default[\"default\"](element).trigger(TRANSITION_END);\n    },\n    supportsTransitionEnd: function supportsTransitionEnd() {\n      return Boolean(TRANSITION_END);\n    },\n    isElement: function isElement(obj) {\n      return (obj[0] || obj).nodeType;\n    },\n    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {\n      for (var property in configTypes) {\n        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n          var expectedTypes = configTypes[property];\n          var value = config[property];\n          var valueType = value && Util.isElement(value) ? 'element' : toType(value);\n\n          if (!new RegExp(expectedTypes).test(valueType)) {\n            throw new Error(componentName.toUpperCase() + \": \" + (\"Option \\\"\" + property + \"\\\" provided type \\\"\" + valueType + \"\\\" \") + (\"but expected type \\\"\" + expectedTypes + \"\\\".\"));\n          }\n        }\n      }\n    },\n    findShadowRoot: function findShadowRoot(element) {\n      if (!document.documentElement.attachShadow) {\n        return null;\n      } // Can find the shadow root otherwise it'll return the document\n\n\n      if (typeof element.getRootNode === 'function') {\n        var root = element.getRootNode();\n        return root instanceof ShadowRoot ? root : null;\n      }\n\n      if (element instanceof ShadowRoot) {\n        return element;\n      } // when we don't find a shadow root\n\n\n      if (!element.parentNode) {\n        return null;\n      }\n\n      return Util.findShadowRoot(element.parentNode);\n    },\n    jQueryDetection: function jQueryDetection() {\n      if (typeof $__default[\"default\"] === 'undefined') {\n        throw new TypeError('Bootstrap\\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\\'s JavaScript.');\n      }\n\n      var version = $__default[\"default\"].fn.jquery.split(' ')[0].split('.');\n      var minMajor = 1;\n      var ltMajor = 2;\n      var minMinor = 9;\n      var minPatch = 1;\n      var maxMajor = 4;\n\n      if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {\n        throw new Error('Bootstrap\\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');\n      }\n    }\n  };\n  Util.jQueryDetection();\n  setTransitionEndSupport();\n\n  /**\n   * Constants\n   */\n\n  var NAME$a = 'alert';\n  var VERSION$a = '4.6.2';\n  var DATA_KEY$a = 'bs.alert';\n  var EVENT_KEY$a = \".\" + DATA_KEY$a;\n  var DATA_API_KEY$7 = '.data-api';\n  var JQUERY_NO_CONFLICT$a = $__default[\"default\"].fn[NAME$a];\n  var CLASS_NAME_ALERT = 'alert';\n  var CLASS_NAME_FADE$5 = 'fade';\n  var CLASS_NAME_SHOW$7 = 'show';\n  var EVENT_CLOSE = \"close\" + EVENT_KEY$a;\n  var EVENT_CLOSED = \"closed\" + EVENT_KEY$a;\n  var EVENT_CLICK_DATA_API$6 = \"click\" + EVENT_KEY$a + DATA_API_KEY$7;\n  var SELECTOR_DISMISS = '[data-dismiss=\"alert\"]';\n  /**\n   * Class definition\n   */\n\n  var Alert = /*#__PURE__*/function () {\n    function Alert(element) {\n      this._element = element;\n    } // Getters\n\n\n    var _proto = Alert.prototype;\n\n    // Public\n    _proto.close = function close(element) {\n      var rootElement = this._element;\n\n      if (element) {\n        rootElement = this._getRootElement(element);\n      }\n\n      var customEvent = this._triggerCloseEvent(rootElement);\n\n      if (customEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._removeElement(rootElement);\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"].removeData(this._element, DATA_KEY$a);\n      this._element = null;\n    } // Private\n    ;\n\n    _proto._getRootElement = function _getRootElement(element) {\n      var selector = Util.getSelectorFromElement(element);\n      var parent = false;\n\n      if (selector) {\n        parent = document.querySelector(selector);\n      }\n\n      if (!parent) {\n        parent = $__default[\"default\"](element).closest(\".\" + CLASS_NAME_ALERT)[0];\n      }\n\n      return parent;\n    };\n\n    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {\n      var closeEvent = $__default[\"default\"].Event(EVENT_CLOSE);\n      $__default[\"default\"](element).trigger(closeEvent);\n      return closeEvent;\n    };\n\n    _proto._removeElement = function _removeElement(element) {\n      var _this = this;\n\n      $__default[\"default\"](element).removeClass(CLASS_NAME_SHOW$7);\n\n      if (!$__default[\"default\"](element).hasClass(CLASS_NAME_FADE$5)) {\n        this._destroyElement(element);\n\n        return;\n      }\n\n      var transitionDuration = Util.getTransitionDurationFromElement(element);\n      $__default[\"default\"](element).one(Util.TRANSITION_END, function (event) {\n        return _this._destroyElement(element, event);\n      }).emulateTransitionEnd(transitionDuration);\n    };\n\n    _proto._destroyElement = function _destroyElement(element) {\n      $__default[\"default\"](element).detach().trigger(EVENT_CLOSED).remove();\n    } // Static\n    ;\n\n    Alert._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var $element = $__default[\"default\"](this);\n        var data = $element.data(DATA_KEY$a);\n\n        if (!data) {\n          data = new Alert(this);\n          $element.data(DATA_KEY$a, data);\n        }\n\n        if (config === 'close') {\n          data[config](this);\n        }\n      });\n    };\n\n    Alert._handleDismiss = function _handleDismiss(alertInstance) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        alertInstance.close(this);\n      };\n    };\n\n    _createClass(Alert, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$a;\n      }\n    }]);\n\n    return Alert;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_CLICK_DATA_API$6, SELECTOR_DISMISS, Alert._handleDismiss(new Alert()));\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$a] = Alert._jQueryInterface;\n  $__default[\"default\"].fn[NAME$a].Constructor = Alert;\n\n  $__default[\"default\"].fn[NAME$a].noConflict = function () {\n    $__default[\"default\"].fn[NAME$a] = JQUERY_NO_CONFLICT$a;\n    return Alert._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$9 = 'button';\n  var VERSION$9 = '4.6.2';\n  var DATA_KEY$9 = 'bs.button';\n  var EVENT_KEY$9 = \".\" + DATA_KEY$9;\n  var DATA_API_KEY$6 = '.data-api';\n  var JQUERY_NO_CONFLICT$9 = $__default[\"default\"].fn[NAME$9];\n  var CLASS_NAME_ACTIVE$3 = 'active';\n  var CLASS_NAME_BUTTON = 'btn';\n  var CLASS_NAME_FOCUS = 'focus';\n  var EVENT_CLICK_DATA_API$5 = \"click\" + EVENT_KEY$9 + DATA_API_KEY$6;\n  var EVENT_FOCUS_BLUR_DATA_API = \"focus\" + EVENT_KEY$9 + DATA_API_KEY$6 + \" \" + (\"blur\" + EVENT_KEY$9 + DATA_API_KEY$6);\n  var EVENT_LOAD_DATA_API$2 = \"load\" + EVENT_KEY$9 + DATA_API_KEY$6;\n  var SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]';\n  var SELECTOR_DATA_TOGGLES = '[data-toggle=\"buttons\"]';\n  var SELECTOR_DATA_TOGGLE$4 = '[data-toggle=\"button\"]';\n  var SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn';\n  var SELECTOR_INPUT = 'input:not([type=\"hidden\"])';\n  var SELECTOR_ACTIVE$2 = '.active';\n  var SELECTOR_BUTTON = '.btn';\n  /**\n   * Class definition\n   */\n\n  var Button = /*#__PURE__*/function () {\n    function Button(element) {\n      this._element = element;\n      this.shouldAvoidTriggerChange = false;\n    } // Getters\n\n\n    var _proto = Button.prototype;\n\n    // Public\n    _proto.toggle = function toggle() {\n      var triggerChangeEvent = true;\n      var addAriaPressed = true;\n      var rootElement = $__default[\"default\"](this._element).closest(SELECTOR_DATA_TOGGLES)[0];\n\n      if (rootElement) {\n        var input = this._element.querySelector(SELECTOR_INPUT);\n\n        if (input) {\n          if (input.type === 'radio') {\n            if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE$3)) {\n              triggerChangeEvent = false;\n            } else {\n              var activeElement = rootElement.querySelector(SELECTOR_ACTIVE$2);\n\n              if (activeElement) {\n                $__default[\"default\"](activeElement).removeClass(CLASS_NAME_ACTIVE$3);\n              }\n            }\n          }\n\n          if (triggerChangeEvent) {\n            // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n            if (input.type === 'checkbox' || input.type === 'radio') {\n              input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE$3);\n            }\n\n            if (!this.shouldAvoidTriggerChange) {\n              $__default[\"default\"](input).trigger('change');\n            }\n          }\n\n          input.focus();\n          addAriaPressed = false;\n        }\n      }\n\n      if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n        if (addAriaPressed) {\n          this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE$3));\n        }\n\n        if (triggerChangeEvent) {\n          $__default[\"default\"](this._element).toggleClass(CLASS_NAME_ACTIVE$3);\n        }\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"].removeData(this._element, DATA_KEY$9);\n      this._element = null;\n    } // Static\n    ;\n\n    Button._jQueryInterface = function _jQueryInterface(config, avoidTriggerChange) {\n      return this.each(function () {\n        var $element = $__default[\"default\"](this);\n        var data = $element.data(DATA_KEY$9);\n\n        if (!data) {\n          data = new Button(this);\n          $element.data(DATA_KEY$9, data);\n        }\n\n        data.shouldAvoidTriggerChange = avoidTriggerChange;\n\n        if (config === 'toggle') {\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Button, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$9;\n      }\n    }]);\n\n    return Button;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_CLICK_DATA_API$5, SELECTOR_DATA_TOGGLE_CARROT, function (event) {\n    var button = event.target;\n    var initialButton = button;\n\n    if (!$__default[\"default\"](button).hasClass(CLASS_NAME_BUTTON)) {\n      button = $__default[\"default\"](button).closest(SELECTOR_BUTTON)[0];\n    }\n\n    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n      event.preventDefault(); // work around Firefox bug #1540995\n    } else {\n      var inputBtn = button.querySelector(SELECTOR_INPUT);\n\n      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n        event.preventDefault(); // work around Firefox bug #1540995\n\n        return;\n      }\n\n      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {\n        Button._jQueryInterface.call($__default[\"default\"](button), 'toggle', initialButton.tagName === 'INPUT');\n      }\n    }\n  }).on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, function (event) {\n    var button = $__default[\"default\"](event.target).closest(SELECTOR_BUTTON)[0];\n    $__default[\"default\"](button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type));\n  });\n  $__default[\"default\"](window).on(EVENT_LOAD_DATA_API$2, function () {\n    // ensure correct active class is set to match the controls' actual values/states\n    // find all checkboxes/readio buttons inside data-toggle groups\n    var buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS));\n\n    for (var i = 0, len = buttons.length; i < len; i++) {\n      var button = buttons[i];\n      var input = button.querySelector(SELECTOR_INPUT);\n\n      if (input.checked || input.hasAttribute('checked')) {\n        button.classList.add(CLASS_NAME_ACTIVE$3);\n      } else {\n        button.classList.remove(CLASS_NAME_ACTIVE$3);\n      }\n    } // find all button toggles\n\n\n    buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$4));\n\n    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {\n      var _button = buttons[_i];\n\n      if (_button.getAttribute('aria-pressed') === 'true') {\n        _button.classList.add(CLASS_NAME_ACTIVE$3);\n      } else {\n        _button.classList.remove(CLASS_NAME_ACTIVE$3);\n      }\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$9] = Button._jQueryInterface;\n  $__default[\"default\"].fn[NAME$9].Constructor = Button;\n\n  $__default[\"default\"].fn[NAME$9].noConflict = function () {\n    $__default[\"default\"].fn[NAME$9] = JQUERY_NO_CONFLICT$9;\n    return Button._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$8 = 'carousel';\n  var VERSION$8 = '4.6.2';\n  var DATA_KEY$8 = 'bs.carousel';\n  var EVENT_KEY$8 = \".\" + DATA_KEY$8;\n  var DATA_API_KEY$5 = '.data-api';\n  var JQUERY_NO_CONFLICT$8 = $__default[\"default\"].fn[NAME$8];\n  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key\n\n  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key\n\n  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n  var SWIPE_THRESHOLD = 40;\n  var CLASS_NAME_CAROUSEL = 'carousel';\n  var CLASS_NAME_ACTIVE$2 = 'active';\n  var CLASS_NAME_SLIDE = 'slide';\n  var CLASS_NAME_RIGHT = 'carousel-item-right';\n  var CLASS_NAME_LEFT = 'carousel-item-left';\n  var CLASS_NAME_NEXT = 'carousel-item-next';\n  var CLASS_NAME_PREV = 'carousel-item-prev';\n  var CLASS_NAME_POINTER_EVENT = 'pointer-event';\n  var DIRECTION_NEXT = 'next';\n  var DIRECTION_PREV = 'prev';\n  var DIRECTION_LEFT = 'left';\n  var DIRECTION_RIGHT = 'right';\n  var EVENT_SLIDE = \"slide\" + EVENT_KEY$8;\n  var EVENT_SLID = \"slid\" + EVENT_KEY$8;\n  var EVENT_KEYDOWN = \"keydown\" + EVENT_KEY$8;\n  var EVENT_MOUSEENTER = \"mouseenter\" + EVENT_KEY$8;\n  var EVENT_MOUSELEAVE = \"mouseleave\" + EVENT_KEY$8;\n  var EVENT_TOUCHSTART = \"touchstart\" + EVENT_KEY$8;\n  var EVENT_TOUCHMOVE = \"touchmove\" + EVENT_KEY$8;\n  var EVENT_TOUCHEND = \"touchend\" + EVENT_KEY$8;\n  var EVENT_POINTERDOWN = \"pointerdown\" + EVENT_KEY$8;\n  var EVENT_POINTERUP = \"pointerup\" + EVENT_KEY$8;\n  var EVENT_DRAG_START = \"dragstart\" + EVENT_KEY$8;\n  var EVENT_LOAD_DATA_API$1 = \"load\" + EVENT_KEY$8 + DATA_API_KEY$5;\n  var EVENT_CLICK_DATA_API$4 = \"click\" + EVENT_KEY$8 + DATA_API_KEY$5;\n  var SELECTOR_ACTIVE$1 = '.active';\n  var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';\n  var SELECTOR_ITEM = '.carousel-item';\n  var SELECTOR_ITEM_IMG = '.carousel-item img';\n  var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';\n  var SELECTOR_INDICATORS = '.carousel-indicators';\n  var SELECTOR_DATA_SLIDE = '[data-slide], [data-slide-to]';\n  var SELECTOR_DATA_RIDE = '[data-ride=\"carousel\"]';\n  var Default$7 = {\n    interval: 5000,\n    keyboard: true,\n    slide: false,\n    pause: 'hover',\n    wrap: true,\n    touch: true\n  };\n  var DefaultType$7 = {\n    interval: '(number|boolean)',\n    keyboard: 'boolean',\n    slide: '(boolean|string)',\n    pause: '(string|boolean)',\n    wrap: 'boolean',\n    touch: 'boolean'\n  };\n  var PointerType = {\n    TOUCH: 'touch',\n    PEN: 'pen'\n  };\n  /**\n   * Class definition\n   */\n\n  var Carousel = /*#__PURE__*/function () {\n    function Carousel(element, config) {\n      this._items = null;\n      this._interval = null;\n      this._activeElement = null;\n      this._isPaused = false;\n      this._isSliding = false;\n      this.touchTimeout = null;\n      this.touchStartX = 0;\n      this.touchDeltaX = 0;\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._indicatorsElement = this._element.querySelector(SELECTOR_INDICATORS);\n      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);\n\n      this._addEventListeners();\n    } // Getters\n\n\n    var _proto = Carousel.prototype;\n\n    // Public\n    _proto.next = function next() {\n      if (!this._isSliding) {\n        this._slide(DIRECTION_NEXT);\n      }\n    };\n\n    _proto.nextWhenVisible = function nextWhenVisible() {\n      var $element = $__default[\"default\"](this._element); // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n\n      if (!document.hidden && $element.is(':visible') && $element.css('visibility') !== 'hidden') {\n        this.next();\n      }\n    };\n\n    _proto.prev = function prev() {\n      if (!this._isSliding) {\n        this._slide(DIRECTION_PREV);\n      }\n    };\n\n    _proto.pause = function pause(event) {\n      if (!event) {\n        this._isPaused = true;\n      }\n\n      if (this._element.querySelector(SELECTOR_NEXT_PREV)) {\n        Util.triggerTransitionEnd(this._element);\n        this.cycle(true);\n      }\n\n      clearInterval(this._interval);\n      this._interval = null;\n    };\n\n    _proto.cycle = function cycle(event) {\n      if (!event) {\n        this._isPaused = false;\n      }\n\n      if (this._interval) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n\n      if (this._config.interval && !this._isPaused) {\n        this._updateInterval();\n\n        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n      }\n    };\n\n    _proto.to = function to(index) {\n      var _this = this;\n\n      this._activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);\n\n      var activeIndex = this._getItemIndex(this._activeElement);\n\n      if (index > this._items.length - 1 || index < 0) {\n        return;\n      }\n\n      if (this._isSliding) {\n        $__default[\"default\"](this._element).one(EVENT_SLID, function () {\n          return _this.to(index);\n        });\n        return;\n      }\n\n      if (activeIndex === index) {\n        this.pause();\n        this.cycle();\n        return;\n      }\n\n      var direction = index > activeIndex ? DIRECTION_NEXT : DIRECTION_PREV;\n\n      this._slide(direction, this._items[index]);\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"](this._element).off(EVENT_KEY$8);\n      $__default[\"default\"].removeData(this._element, DATA_KEY$8);\n      this._items = null;\n      this._config = null;\n      this._element = null;\n      this._interval = null;\n      this._isPaused = null;\n      this._isSliding = null;\n      this._activeElement = null;\n      this._indicatorsElement = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default$7, config);\n      Util.typeCheckConfig(NAME$8, config, DefaultType$7);\n      return config;\n    };\n\n    _proto._handleSwipe = function _handleSwipe() {\n      var absDeltax = Math.abs(this.touchDeltaX);\n\n      if (absDeltax <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      var direction = absDeltax / this.touchDeltaX;\n      this.touchDeltaX = 0; // swipe left\n\n      if (direction > 0) {\n        this.prev();\n      } // swipe right\n\n\n      if (direction < 0) {\n        this.next();\n      }\n    };\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this2 = this;\n\n      if (this._config.keyboard) {\n        $__default[\"default\"](this._element).on(EVENT_KEYDOWN, function (event) {\n          return _this2._keydown(event);\n        });\n      }\n\n      if (this._config.pause === 'hover') {\n        $__default[\"default\"](this._element).on(EVENT_MOUSEENTER, function (event) {\n          return _this2.pause(event);\n        }).on(EVENT_MOUSELEAVE, function (event) {\n          return _this2.cycle(event);\n        });\n      }\n\n      if (this._config.touch) {\n        this._addTouchEventListeners();\n      }\n    };\n\n    _proto._addTouchEventListeners = function _addTouchEventListeners() {\n      var _this3 = this;\n\n      if (!this._touchSupported) {\n        return;\n      }\n\n      var start = function start(event) {\n        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {\n          _this3.touchStartX = event.originalEvent.clientX;\n        } else if (!_this3._pointerEvent) {\n          _this3.touchStartX = event.originalEvent.touches[0].clientX;\n        }\n      };\n\n      var move = function move(event) {\n        // ensure swiping with one touch and not pinching\n        _this3.touchDeltaX = event.originalEvent.touches && event.originalEvent.touches.length > 1 ? 0 : event.originalEvent.touches[0].clientX - _this3.touchStartX;\n      };\n\n      var end = function end(event) {\n        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {\n          _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;\n        }\n\n        _this3._handleSwipe();\n\n        if (_this3._config.pause === 'hover') {\n          // If it's a touch-enabled device, mouseenter/leave are fired as\n          // part of the mouse compatibility events on first tap - the carousel\n          // would stop cycling until user tapped out of it;\n          // here, we listen for touchend, explicitly pause the carousel\n          // (as if it's the second time we tap on it, mouseenter compat event\n          // is NOT fired) and after a timeout (to allow for mouse compatibility\n          // events to fire) we explicitly restart cycling\n          _this3.pause();\n\n          if (_this3.touchTimeout) {\n            clearTimeout(_this3.touchTimeout);\n          }\n\n          _this3.touchTimeout = setTimeout(function (event) {\n            return _this3.cycle(event);\n          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);\n        }\n      };\n\n      $__default[\"default\"](this._element.querySelectorAll(SELECTOR_ITEM_IMG)).on(EVENT_DRAG_START, function (e) {\n        return e.preventDefault();\n      });\n\n      if (this._pointerEvent) {\n        $__default[\"default\"](this._element).on(EVENT_POINTERDOWN, function (event) {\n          return start(event);\n        });\n        $__default[\"default\"](this._element).on(EVENT_POINTERUP, function (event) {\n          return end(event);\n        });\n\n        this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n      } else {\n        $__default[\"default\"](this._element).on(EVENT_TOUCHSTART, function (event) {\n          return start(event);\n        });\n        $__default[\"default\"](this._element).on(EVENT_TOUCHMOVE, function (event) {\n          return move(event);\n        });\n        $__default[\"default\"](this._element).on(EVENT_TOUCHEND, function (event) {\n          return end(event);\n        });\n      }\n    };\n\n    _proto._keydown = function _keydown(event) {\n      if (/input|textarea/i.test(event.target.tagName)) {\n        return;\n      }\n\n      switch (event.which) {\n        case ARROW_LEFT_KEYCODE:\n          event.preventDefault();\n          this.prev();\n          break;\n\n        case ARROW_RIGHT_KEYCODE:\n          event.preventDefault();\n          this.next();\n          break;\n      }\n    };\n\n    _proto._getItemIndex = function _getItemIndex(element) {\n      this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(SELECTOR_ITEM)) : [];\n      return this._items.indexOf(element);\n    };\n\n    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {\n      var isNextDirection = direction === DIRECTION_NEXT;\n      var isPrevDirection = direction === DIRECTION_PREV;\n\n      var activeIndex = this._getItemIndex(activeElement);\n\n      var lastItemIndex = this._items.length - 1;\n      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\n\n      if (isGoingToWrap && !this._config.wrap) {\n        return activeElement;\n      }\n\n      var delta = direction === DIRECTION_PREV ? -1 : 1;\n      var itemIndex = (activeIndex + delta) % this._items.length;\n      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\n    };\n\n    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {\n      var targetIndex = this._getItemIndex(relatedTarget);\n\n      var fromIndex = this._getItemIndex(this._element.querySelector(SELECTOR_ACTIVE_ITEM));\n\n      var slideEvent = $__default[\"default\"].Event(EVENT_SLIDE, {\n        relatedTarget: relatedTarget,\n        direction: eventDirectionName,\n        from: fromIndex,\n        to: targetIndex\n      });\n      $__default[\"default\"](this._element).trigger(slideEvent);\n      return slideEvent;\n    };\n\n    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {\n      if (this._indicatorsElement) {\n        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(SELECTOR_ACTIVE$1));\n        $__default[\"default\"](indicators).removeClass(CLASS_NAME_ACTIVE$2);\n\n        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\n\n        if (nextIndicator) {\n          $__default[\"default\"](nextIndicator).addClass(CLASS_NAME_ACTIVE$2);\n        }\n      }\n    };\n\n    _proto._updateInterval = function _updateInterval() {\n      var element = this._activeElement || this._element.querySelector(SELECTOR_ACTIVE_ITEM);\n\n      if (!element) {\n        return;\n      }\n\n      var elementInterval = parseInt(element.getAttribute('data-interval'), 10);\n\n      if (elementInterval) {\n        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n        this._config.interval = elementInterval;\n      } else {\n        this._config.interval = this._config.defaultInterval || this._config.interval;\n      }\n    };\n\n    _proto._slide = function _slide(direction, element) {\n      var _this4 = this;\n\n      var activeElement = this._element.querySelector(SELECTOR_ACTIVE_ITEM);\n\n      var activeElementIndex = this._getItemIndex(activeElement);\n\n      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\n\n      var nextElementIndex = this._getItemIndex(nextElement);\n\n      var isCycling = Boolean(this._interval);\n      var directionalClassName;\n      var orderClassName;\n      var eventDirectionName;\n\n      if (direction === DIRECTION_NEXT) {\n        directionalClassName = CLASS_NAME_LEFT;\n        orderClassName = CLASS_NAME_NEXT;\n        eventDirectionName = DIRECTION_LEFT;\n      } else {\n        directionalClassName = CLASS_NAME_RIGHT;\n        orderClassName = CLASS_NAME_PREV;\n        eventDirectionName = DIRECTION_RIGHT;\n      }\n\n      if (nextElement && $__default[\"default\"](nextElement).hasClass(CLASS_NAME_ACTIVE$2)) {\n        this._isSliding = false;\n        return;\n      }\n\n      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n      if (slideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      if (!activeElement || !nextElement) {\n        // Some weirdness is happening, so we bail\n        return;\n      }\n\n      this._isSliding = true;\n\n      if (isCycling) {\n        this.pause();\n      }\n\n      this._setActiveIndicatorElement(nextElement);\n\n      this._activeElement = nextElement;\n      var slidEvent = $__default[\"default\"].Event(EVENT_SLID, {\n        relatedTarget: nextElement,\n        direction: eventDirectionName,\n        from: activeElementIndex,\n        to: nextElementIndex\n      });\n\n      if ($__default[\"default\"](this._element).hasClass(CLASS_NAME_SLIDE)) {\n        $__default[\"default\"](nextElement).addClass(orderClassName);\n        Util.reflow(nextElement);\n        $__default[\"default\"](activeElement).addClass(directionalClassName);\n        $__default[\"default\"](nextElement).addClass(directionalClassName);\n        var transitionDuration = Util.getTransitionDurationFromElement(activeElement);\n        $__default[\"default\"](activeElement).one(Util.TRANSITION_END, function () {\n          $__default[\"default\"](nextElement).removeClass(directionalClassName + \" \" + orderClassName).addClass(CLASS_NAME_ACTIVE$2);\n          $__default[\"default\"](activeElement).removeClass(CLASS_NAME_ACTIVE$2 + \" \" + orderClassName + \" \" + directionalClassName);\n          _this4._isSliding = false;\n          setTimeout(function () {\n            return $__default[\"default\"](_this4._element).trigger(slidEvent);\n          }, 0);\n        }).emulateTransitionEnd(transitionDuration);\n      } else {\n        $__default[\"default\"](activeElement).removeClass(CLASS_NAME_ACTIVE$2);\n        $__default[\"default\"](nextElement).addClass(CLASS_NAME_ACTIVE$2);\n        this._isSliding = false;\n        $__default[\"default\"](this._element).trigger(slidEvent);\n      }\n\n      if (isCycling) {\n        this.cycle();\n      }\n    } // Static\n    ;\n\n    Carousel._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var data = $__default[\"default\"](this).data(DATA_KEY$8);\n\n        var _config = _extends({}, Default$7, $__default[\"default\"](this).data());\n\n        if (typeof config === 'object') {\n          _config = _extends({}, _config, config);\n        }\n\n        var action = typeof config === 'string' ? config : _config.slide;\n\n        if (!data) {\n          data = new Carousel(this, _config);\n          $__default[\"default\"](this).data(DATA_KEY$8, data);\n        }\n\n        if (typeof config === 'number') {\n          data.to(config);\n        } else if (typeof action === 'string') {\n          if (typeof data[action] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + action + \"\\\"\");\n          }\n\n          data[action]();\n        } else if (_config.interval && _config.ride) {\n          data.pause();\n          data.cycle();\n        }\n      });\n    };\n\n    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {\n      var selector = Util.getSelectorFromElement(this);\n\n      if (!selector) {\n        return;\n      }\n\n      var target = $__default[\"default\"](selector)[0];\n\n      if (!target || !$__default[\"default\"](target).hasClass(CLASS_NAME_CAROUSEL)) {\n        return;\n      }\n\n      var config = _extends({}, $__default[\"default\"](target).data(), $__default[\"default\"](this).data());\n\n      var slideIndex = this.getAttribute('data-slide-to');\n\n      if (slideIndex) {\n        config.interval = false;\n      }\n\n      Carousel._jQueryInterface.call($__default[\"default\"](target), config);\n\n      if (slideIndex) {\n        $__default[\"default\"](target).data(DATA_KEY$8).to(slideIndex);\n      }\n\n      event.preventDefault();\n    };\n\n    _createClass(Carousel, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$8;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$7;\n      }\n    }]);\n\n    return Carousel;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_CLICK_DATA_API$4, SELECTOR_DATA_SLIDE, Carousel._dataApiClickHandler);\n  $__default[\"default\"](window).on(EVENT_LOAD_DATA_API$1, function () {\n    var carousels = [].slice.call(document.querySelectorAll(SELECTOR_DATA_RIDE));\n\n    for (var i = 0, len = carousels.length; i < len; i++) {\n      var $carousel = $__default[\"default\"](carousels[i]);\n\n      Carousel._jQueryInterface.call($carousel, $carousel.data());\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$8] = Carousel._jQueryInterface;\n  $__default[\"default\"].fn[NAME$8].Constructor = Carousel;\n\n  $__default[\"default\"].fn[NAME$8].noConflict = function () {\n    $__default[\"default\"].fn[NAME$8] = JQUERY_NO_CONFLICT$8;\n    return Carousel._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$7 = 'collapse';\n  var VERSION$7 = '4.6.2';\n  var DATA_KEY$7 = 'bs.collapse';\n  var EVENT_KEY$7 = \".\" + DATA_KEY$7;\n  var DATA_API_KEY$4 = '.data-api';\n  var JQUERY_NO_CONFLICT$7 = $__default[\"default\"].fn[NAME$7];\n  var CLASS_NAME_SHOW$6 = 'show';\n  var CLASS_NAME_COLLAPSE = 'collapse';\n  var CLASS_NAME_COLLAPSING = 'collapsing';\n  var CLASS_NAME_COLLAPSED = 'collapsed';\n  var DIMENSION_WIDTH = 'width';\n  var DIMENSION_HEIGHT = 'height';\n  var EVENT_SHOW$4 = \"show\" + EVENT_KEY$7;\n  var EVENT_SHOWN$4 = \"shown\" + EVENT_KEY$7;\n  var EVENT_HIDE$4 = \"hide\" + EVENT_KEY$7;\n  var EVENT_HIDDEN$4 = \"hidden\" + EVENT_KEY$7;\n  var EVENT_CLICK_DATA_API$3 = \"click\" + EVENT_KEY$7 + DATA_API_KEY$4;\n  var SELECTOR_ACTIVES = '.show, .collapsing';\n  var SELECTOR_DATA_TOGGLE$3 = '[data-toggle=\"collapse\"]';\n  var Default$6 = {\n    toggle: true,\n    parent: ''\n  };\n  var DefaultType$6 = {\n    toggle: 'boolean',\n    parent: '(string|element)'\n  };\n  /**\n   * Class definition\n   */\n\n  var Collapse = /*#__PURE__*/function () {\n    function Collapse(element, config) {\n      this._isTransitioning = false;\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._triggerArray = [].slice.call(document.querySelectorAll(\"[data-toggle=\\\"collapse\\\"][href=\\\"#\" + element.id + \"\\\"],\" + (\"[data-toggle=\\\"collapse\\\"][data-target=\\\"#\" + element.id + \"\\\"]\")));\n      var toggleList = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$3));\n\n      for (var i = 0, len = toggleList.length; i < len; i++) {\n        var elem = toggleList[i];\n        var selector = Util.getSelectorFromElement(elem);\n        var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {\n          return foundElem === element;\n        });\n\n        if (selector !== null && filterElement.length > 0) {\n          this._selector = selector;\n\n          this._triggerArray.push(elem);\n        }\n      }\n\n      this._parent = this._config.parent ? this._getParent() : null;\n\n      if (!this._config.parent) {\n        this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n      }\n\n      if (this._config.toggle) {\n        this.toggle();\n      }\n    } // Getters\n\n\n    var _proto = Collapse.prototype;\n\n    // Public\n    _proto.toggle = function toggle() {\n      if ($__default[\"default\"](this._element).hasClass(CLASS_NAME_SHOW$6)) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._isTransitioning || $__default[\"default\"](this._element).hasClass(CLASS_NAME_SHOW$6)) {\n        return;\n      }\n\n      var actives;\n      var activesData;\n\n      if (this._parent) {\n        actives = [].slice.call(this._parent.querySelectorAll(SELECTOR_ACTIVES)).filter(function (elem) {\n          if (typeof _this._config.parent === 'string') {\n            return elem.getAttribute('data-parent') === _this._config.parent;\n          }\n\n          return elem.classList.contains(CLASS_NAME_COLLAPSE);\n        });\n\n        if (actives.length === 0) {\n          actives = null;\n        }\n      }\n\n      if (actives) {\n        activesData = $__default[\"default\"](actives).not(this._selector).data(DATA_KEY$7);\n\n        if (activesData && activesData._isTransitioning) {\n          return;\n        }\n      }\n\n      var startEvent = $__default[\"default\"].Event(EVENT_SHOW$4);\n      $__default[\"default\"](this._element).trigger(startEvent);\n\n      if (startEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      if (actives) {\n        Collapse._jQueryInterface.call($__default[\"default\"](actives).not(this._selector), 'hide');\n\n        if (!activesData) {\n          $__default[\"default\"](actives).data(DATA_KEY$7, null);\n        }\n      }\n\n      var dimension = this._getDimension();\n\n      $__default[\"default\"](this._element).removeClass(CLASS_NAME_COLLAPSE).addClass(CLASS_NAME_COLLAPSING);\n      this._element.style[dimension] = 0;\n\n      if (this._triggerArray.length) {\n        $__default[\"default\"](this._triggerArray).removeClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', true);\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        $__default[\"default\"](_this._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE + \" \" + CLASS_NAME_SHOW$6);\n        _this._element.style[dimension] = '';\n\n        _this.setTransitioning(false);\n\n        $__default[\"default\"](_this._element).trigger(EVENT_SHOWN$4);\n      };\n\n      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n      var scrollSize = \"scroll\" + capitalizedDimension;\n      var transitionDuration = Util.getTransitionDurationFromElement(this._element);\n      $__default[\"default\"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n      this._element.style[dimension] = this._element[scrollSize] + \"px\";\n    };\n\n    _proto.hide = function hide() {\n      var _this2 = this;\n\n      if (this._isTransitioning || !$__default[\"default\"](this._element).hasClass(CLASS_NAME_SHOW$6)) {\n        return;\n      }\n\n      var startEvent = $__default[\"default\"].Event(EVENT_HIDE$4);\n      $__default[\"default\"](this._element).trigger(startEvent);\n\n      if (startEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      var dimension = this._getDimension();\n\n      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + \"px\";\n      Util.reflow(this._element);\n      $__default[\"default\"](this._element).addClass(CLASS_NAME_COLLAPSING).removeClass(CLASS_NAME_COLLAPSE + \" \" + CLASS_NAME_SHOW$6);\n      var triggerArrayLength = this._triggerArray.length;\n\n      if (triggerArrayLength > 0) {\n        for (var i = 0; i < triggerArrayLength; i++) {\n          var trigger = this._triggerArray[i];\n          var selector = Util.getSelectorFromElement(trigger);\n\n          if (selector !== null) {\n            var $elem = $__default[\"default\"]([].slice.call(document.querySelectorAll(selector)));\n\n            if (!$elem.hasClass(CLASS_NAME_SHOW$6)) {\n              $__default[\"default\"](trigger).addClass(CLASS_NAME_COLLAPSED).attr('aria-expanded', false);\n            }\n          }\n        }\n      }\n\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        _this2.setTransitioning(false);\n\n        $__default[\"default\"](_this2._element).removeClass(CLASS_NAME_COLLAPSING).addClass(CLASS_NAME_COLLAPSE).trigger(EVENT_HIDDEN$4);\n      };\n\n      this._element.style[dimension] = '';\n      var transitionDuration = Util.getTransitionDurationFromElement(this._element);\n      $__default[\"default\"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n    };\n\n    _proto.setTransitioning = function setTransitioning(isTransitioning) {\n      this._isTransitioning = isTransitioning;\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"].removeData(this._element, DATA_KEY$7);\n      this._config = null;\n      this._parent = null;\n      this._element = null;\n      this._triggerArray = null;\n      this._isTransitioning = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default$6, config);\n      config.toggle = Boolean(config.toggle); // Coerce string values\n\n      Util.typeCheckConfig(NAME$7, config, DefaultType$6);\n      return config;\n    };\n\n    _proto._getDimension = function _getDimension() {\n      var hasWidth = $__default[\"default\"](this._element).hasClass(DIMENSION_WIDTH);\n      return hasWidth ? DIMENSION_WIDTH : DIMENSION_HEIGHT;\n    };\n\n    _proto._getParent = function _getParent() {\n      var _this3 = this;\n\n      var parent;\n\n      if (Util.isElement(this._config.parent)) {\n        parent = this._config.parent; // It's a jQuery object\n\n        if (typeof this._config.parent.jquery !== 'undefined') {\n          parent = this._config.parent[0];\n        }\n      } else {\n        parent = document.querySelector(this._config.parent);\n      }\n\n      var selector = \"[data-toggle=\\\"collapse\\\"][data-parent=\\\"\" + this._config.parent + \"\\\"]\";\n      var children = [].slice.call(parent.querySelectorAll(selector));\n      $__default[\"default\"](children).each(function (i, element) {\n        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\n      });\n      return parent;\n    };\n\n    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {\n      var isOpen = $__default[\"default\"](element).hasClass(CLASS_NAME_SHOW$6);\n\n      if (triggerArray.length) {\n        $__default[\"default\"](triggerArray).toggleClass(CLASS_NAME_COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\n      }\n    } // Static\n    ;\n\n    Collapse._getTargetFromElement = function _getTargetFromElement(element) {\n      var selector = Util.getSelectorFromElement(element);\n      return selector ? document.querySelector(selector) : null;\n    };\n\n    Collapse._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var $element = $__default[\"default\"](this);\n        var data = $element.data(DATA_KEY$7);\n\n        var _config = _extends({}, Default$6, $element.data(), typeof config === 'object' && config ? config : {});\n\n        if (!data && _config.toggle && typeof config === 'string' && /show|hide/.test(config)) {\n          _config.toggle = false;\n        }\n\n        if (!data) {\n          data = new Collapse(this, _config);\n          $element.data(DATA_KEY$7, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Collapse, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$7;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$6;\n      }\n    }]);\n\n    return Collapse;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n    if (event.currentTarget.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    var $trigger = $__default[\"default\"](this);\n    var selector = Util.getSelectorFromElement(this);\n    var selectors = [].slice.call(document.querySelectorAll(selector));\n    $__default[\"default\"](selectors).each(function () {\n      var $target = $__default[\"default\"](this);\n      var data = $target.data(DATA_KEY$7);\n      var config = data ? 'toggle' : $trigger.data();\n\n      Collapse._jQueryInterface.call($target, config);\n    });\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$7] = Collapse._jQueryInterface;\n  $__default[\"default\"].fn[NAME$7].Constructor = Collapse;\n\n  $__default[\"default\"].fn[NAME$7].noConflict = function () {\n    $__default[\"default\"].fn[NAME$7] = JQUERY_NO_CONFLICT$7;\n    return Collapse._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$6 = 'dropdown';\n  var VERSION$6 = '4.6.2';\n  var DATA_KEY$6 = 'bs.dropdown';\n  var EVENT_KEY$6 = \".\" + DATA_KEY$6;\n  var DATA_API_KEY$3 = '.data-api';\n  var JQUERY_NO_CONFLICT$6 = $__default[\"default\"].fn[NAME$6];\n  var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key\n\n  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key\n\n  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key\n\n  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key\n\n  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key\n\n  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)\n\n  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + \"|\" + ARROW_DOWN_KEYCODE + \"|\" + ESCAPE_KEYCODE$1);\n  var CLASS_NAME_DISABLED$1 = 'disabled';\n  var CLASS_NAME_SHOW$5 = 'show';\n  var CLASS_NAME_DROPUP = 'dropup';\n  var CLASS_NAME_DROPRIGHT = 'dropright';\n  var CLASS_NAME_DROPLEFT = 'dropleft';\n  var CLASS_NAME_MENURIGHT = 'dropdown-menu-right';\n  var CLASS_NAME_POSITION_STATIC = 'position-static';\n  var EVENT_HIDE$3 = \"hide\" + EVENT_KEY$6;\n  var EVENT_HIDDEN$3 = \"hidden\" + EVENT_KEY$6;\n  var EVENT_SHOW$3 = \"show\" + EVENT_KEY$6;\n  var EVENT_SHOWN$3 = \"shown\" + EVENT_KEY$6;\n  var EVENT_CLICK = \"click\" + EVENT_KEY$6;\n  var EVENT_CLICK_DATA_API$2 = \"click\" + EVENT_KEY$6 + DATA_API_KEY$3;\n  var EVENT_KEYDOWN_DATA_API = \"keydown\" + EVENT_KEY$6 + DATA_API_KEY$3;\n  var EVENT_KEYUP_DATA_API = \"keyup\" + EVENT_KEY$6 + DATA_API_KEY$3;\n  var SELECTOR_DATA_TOGGLE$2 = '[data-toggle=\"dropdown\"]';\n  var SELECTOR_FORM_CHILD = '.dropdown form';\n  var SELECTOR_MENU = '.dropdown-menu';\n  var SELECTOR_NAVBAR_NAV = '.navbar-nav';\n  var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n  var PLACEMENT_TOP = 'top-start';\n  var PLACEMENT_TOPEND = 'top-end';\n  var PLACEMENT_BOTTOM = 'bottom-start';\n  var PLACEMENT_BOTTOMEND = 'bottom-end';\n  var PLACEMENT_RIGHT = 'right-start';\n  var PLACEMENT_LEFT = 'left-start';\n  var Default$5 = {\n    offset: 0,\n    flip: true,\n    boundary: 'scrollParent',\n    reference: 'toggle',\n    display: 'dynamic',\n    popperConfig: null\n  };\n  var DefaultType$5 = {\n    offset: '(number|string|function)',\n    flip: 'boolean',\n    boundary: '(string|element)',\n    reference: '(string|element)',\n    display: 'string',\n    popperConfig: '(null|object)'\n  };\n  /**\n   * Class definition\n   */\n\n  var Dropdown = /*#__PURE__*/function () {\n    function Dropdown(element, config) {\n      this._element = element;\n      this._popper = null;\n      this._config = this._getConfig(config);\n      this._menu = this._getMenuElement();\n      this._inNavbar = this._detectNavbar();\n\n      this._addEventListeners();\n    } // Getters\n\n\n    var _proto = Dropdown.prototype;\n\n    // Public\n    _proto.toggle = function toggle() {\n      if (this._element.disabled || $__default[\"default\"](this._element).hasClass(CLASS_NAME_DISABLED$1)) {\n        return;\n      }\n\n      var isActive = $__default[\"default\"](this._menu).hasClass(CLASS_NAME_SHOW$5);\n\n      Dropdown._clearMenus();\n\n      if (isActive) {\n        return;\n      }\n\n      this.show(true);\n    };\n\n    _proto.show = function show(usePopper) {\n      if (usePopper === void 0) {\n        usePopper = false;\n      }\n\n      if (this._element.disabled || $__default[\"default\"](this._element).hasClass(CLASS_NAME_DISABLED$1) || $__default[\"default\"](this._menu).hasClass(CLASS_NAME_SHOW$5)) {\n        return;\n      }\n\n      var relatedTarget = {\n        relatedTarget: this._element\n      };\n      var showEvent = $__default[\"default\"].Event(EVENT_SHOW$3, relatedTarget);\n\n      var parent = Dropdown._getParentFromElement(this._element);\n\n      $__default[\"default\"](parent).trigger(showEvent);\n\n      if (showEvent.isDefaultPrevented()) {\n        return;\n      } // Totally disable Popper for Dropdowns in Navbar\n\n\n      if (!this._inNavbar && usePopper) {\n        // Check for Popper dependency\n        if (typeof Popper__default[\"default\"] === 'undefined') {\n          throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n        }\n\n        var referenceElement = this._element;\n\n        if (this._config.reference === 'parent') {\n          referenceElement = parent;\n        } else if (Util.isElement(this._config.reference)) {\n          referenceElement = this._config.reference; // Check if it's jQuery element\n\n          if (typeof this._config.reference.jquery !== 'undefined') {\n            referenceElement = this._config.reference[0];\n          }\n        } // If boundary is not `scrollParent`, then set position to `static`\n        // to allow the menu to \"escape\" the scroll parent's boundaries\n        // https://github.com/twbs/bootstrap/issues/24251\n\n\n        if (this._config.boundary !== 'scrollParent') {\n          $__default[\"default\"](parent).addClass(CLASS_NAME_POSITION_STATIC);\n        }\n\n        this._popper = new Popper__default[\"default\"](referenceElement, this._menu, this._getPopperConfig());\n      } // If this is a touch-enabled device we add extra\n      // empty mouseover listeners to the body's immediate children;\n      // only needed because of broken event delegation on iOS\n      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n      if ('ontouchstart' in document.documentElement && $__default[\"default\"](parent).closest(SELECTOR_NAVBAR_NAV).length === 0) {\n        $__default[\"default\"](document.body).children().on('mouseover', null, $__default[\"default\"].noop);\n      }\n\n      this._element.focus();\n\n      this._element.setAttribute('aria-expanded', true);\n\n      $__default[\"default\"](this._menu).toggleClass(CLASS_NAME_SHOW$5);\n      $__default[\"default\"](parent).toggleClass(CLASS_NAME_SHOW$5).trigger($__default[\"default\"].Event(EVENT_SHOWN$3, relatedTarget));\n    };\n\n    _proto.hide = function hide() {\n      if (this._element.disabled || $__default[\"default\"](this._element).hasClass(CLASS_NAME_DISABLED$1) || !$__default[\"default\"](this._menu).hasClass(CLASS_NAME_SHOW$5)) {\n        return;\n      }\n\n      var relatedTarget = {\n        relatedTarget: this._element\n      };\n      var hideEvent = $__default[\"default\"].Event(EVENT_HIDE$3, relatedTarget);\n\n      var parent = Dropdown._getParentFromElement(this._element);\n\n      $__default[\"default\"](parent).trigger(hideEvent);\n\n      if (hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      $__default[\"default\"](this._menu).toggleClass(CLASS_NAME_SHOW$5);\n      $__default[\"default\"](parent).toggleClass(CLASS_NAME_SHOW$5).trigger($__default[\"default\"].Event(EVENT_HIDDEN$3, relatedTarget));\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"].removeData(this._element, DATA_KEY$6);\n      $__default[\"default\"](this._element).off(EVENT_KEY$6);\n      this._element = null;\n      this._menu = null;\n\n      if (this._popper !== null) {\n        this._popper.destroy();\n\n        this._popper = null;\n      }\n    };\n\n    _proto.update = function update() {\n      this._inNavbar = this._detectNavbar();\n\n      if (this._popper !== null) {\n        this._popper.scheduleUpdate();\n      }\n    } // Private\n    ;\n\n    _proto._addEventListeners = function _addEventListeners() {\n      var _this = this;\n\n      $__default[\"default\"](this._element).on(EVENT_CLICK, function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _this.toggle();\n      });\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, this.constructor.Default, $__default[\"default\"](this._element).data(), config);\n      Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._getMenuElement = function _getMenuElement() {\n      if (!this._menu) {\n        var parent = Dropdown._getParentFromElement(this._element);\n\n        if (parent) {\n          this._menu = parent.querySelector(SELECTOR_MENU);\n        }\n      }\n\n      return this._menu;\n    };\n\n    _proto._getPlacement = function _getPlacement() {\n      var $parentDropdown = $__default[\"default\"](this._element.parentNode);\n      var placement = PLACEMENT_BOTTOM; // Handle dropup\n\n      if ($parentDropdown.hasClass(CLASS_NAME_DROPUP)) {\n        placement = $__default[\"default\"](this._menu).hasClass(CLASS_NAME_MENURIGHT) ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n      } else if ($parentDropdown.hasClass(CLASS_NAME_DROPRIGHT)) {\n        placement = PLACEMENT_RIGHT;\n      } else if ($parentDropdown.hasClass(CLASS_NAME_DROPLEFT)) {\n        placement = PLACEMENT_LEFT;\n      } else if ($__default[\"default\"](this._menu).hasClass(CLASS_NAME_MENURIGHT)) {\n        placement = PLACEMENT_BOTTOMEND;\n      }\n\n      return placement;\n    };\n\n    _proto._detectNavbar = function _detectNavbar() {\n      return $__default[\"default\"](this._element).closest('.navbar').length > 0;\n    };\n\n    _proto._getOffset = function _getOffset() {\n      var _this2 = this;\n\n      var offset = {};\n\n      if (typeof this._config.offset === 'function') {\n        offset.fn = function (data) {\n          data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets, _this2._element));\n          return data;\n        };\n      } else {\n        offset.offset = this._config.offset;\n      }\n\n      return offset;\n    };\n\n    _proto._getPopperConfig = function _getPopperConfig() {\n      var popperConfig = {\n        placement: this._getPlacement(),\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            enabled: this._config.flip\n          },\n          preventOverflow: {\n            boundariesElement: this._config.boundary\n          }\n        }\n      }; // Disable Popper if we have a static display\n\n      if (this._config.display === 'static') {\n        popperConfig.modifiers.applyStyle = {\n          enabled: false\n        };\n      }\n\n      return _extends({}, popperConfig, this._config.popperConfig);\n    } // Static\n    ;\n\n    Dropdown._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var data = $__default[\"default\"](this).data(DATA_KEY$6);\n\n        var _config = typeof config === 'object' ? config : null;\n\n        if (!data) {\n          data = new Dropdown(this, _config);\n          $__default[\"default\"](this).data(DATA_KEY$6, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    Dropdown._clearMenus = function _clearMenus(event) {\n      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {\n        return;\n      }\n\n      var toggles = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE$2));\n\n      for (var i = 0, len = toggles.length; i < len; i++) {\n        var parent = Dropdown._getParentFromElement(toggles[i]);\n\n        var context = $__default[\"default\"](toggles[i]).data(DATA_KEY$6);\n        var relatedTarget = {\n          relatedTarget: toggles[i]\n        };\n\n        if (event && event.type === 'click') {\n          relatedTarget.clickEvent = event;\n        }\n\n        if (!context) {\n          continue;\n        }\n\n        var dropdownMenu = context._menu;\n\n        if (!$__default[\"default\"](parent).hasClass(CLASS_NAME_SHOW$5)) {\n          continue;\n        }\n\n        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $__default[\"default\"].contains(parent, event.target)) {\n          continue;\n        }\n\n        var hideEvent = $__default[\"default\"].Event(EVENT_HIDE$3, relatedTarget);\n        $__default[\"default\"](parent).trigger(hideEvent);\n\n        if (hideEvent.isDefaultPrevented()) {\n          continue;\n        } // If this is a touch-enabled device we remove the extra\n        // empty mouseover listeners we added for iOS support\n\n\n        if ('ontouchstart' in document.documentElement) {\n          $__default[\"default\"](document.body).children().off('mouseover', null, $__default[\"default\"].noop);\n        }\n\n        toggles[i].setAttribute('aria-expanded', 'false');\n\n        if (context._popper) {\n          context._popper.destroy();\n        }\n\n        $__default[\"default\"](dropdownMenu).removeClass(CLASS_NAME_SHOW$5);\n        $__default[\"default\"](parent).removeClass(CLASS_NAME_SHOW$5).trigger($__default[\"default\"].Event(EVENT_HIDDEN$3, relatedTarget));\n      }\n    };\n\n    Dropdown._getParentFromElement = function _getParentFromElement(element) {\n      var parent;\n      var selector = Util.getSelectorFromElement(element);\n\n      if (selector) {\n        parent = document.querySelector(selector);\n      }\n\n      return parent || element.parentNode;\n    } // eslint-disable-next-line complexity\n    ;\n\n    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {\n      // If not input/textarea:\n      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n      // If input/textarea:\n      //  - If space key => not a dropdown command\n      //  - If key is other than escape\n      //    - If key is not up or down => not a dropdown command\n      //    - If trigger inside the menu => not a dropdown command\n      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE$1 && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $__default[\"default\"](event.target).closest(SELECTOR_MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {\n        return;\n      }\n\n      if (this.disabled || $__default[\"default\"](this).hasClass(CLASS_NAME_DISABLED$1)) {\n        return;\n      }\n\n      var parent = Dropdown._getParentFromElement(this);\n\n      var isActive = $__default[\"default\"](parent).hasClass(CLASS_NAME_SHOW$5);\n\n      if (!isActive && event.which === ESCAPE_KEYCODE$1) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!isActive || event.which === ESCAPE_KEYCODE$1 || event.which === SPACE_KEYCODE) {\n        if (event.which === ESCAPE_KEYCODE$1) {\n          $__default[\"default\"](parent.querySelector(SELECTOR_DATA_TOGGLE$2)).trigger('focus');\n        }\n\n        $__default[\"default\"](this).trigger('click');\n        return;\n      }\n\n      var items = [].slice.call(parent.querySelectorAll(SELECTOR_VISIBLE_ITEMS)).filter(function (item) {\n        return $__default[\"default\"](item).is(':visible');\n      });\n\n      if (items.length === 0) {\n        return;\n      }\n\n      var index = items.indexOf(event.target);\n\n      if (event.which === ARROW_UP_KEYCODE && index > 0) {\n        // Up\n        index--;\n      }\n\n      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {\n        // Down\n        index++;\n      }\n\n      if (index < 0) {\n        index = 0;\n      }\n\n      items[index].focus();\n    };\n\n    _createClass(Dropdown, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$6;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$5;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$5;\n      }\n    }]);\n\n    return Dropdown;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$2, Dropdown._dataApiKeydownHandler).on(EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown._dataApiKeydownHandler).on(EVENT_CLICK_DATA_API$2 + \" \" + EVENT_KEYUP_DATA_API, Dropdown._clearMenus).on(EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    Dropdown._jQueryInterface.call($__default[\"default\"](this), 'toggle');\n  }).on(EVENT_CLICK_DATA_API$2, SELECTOR_FORM_CHILD, function (e) {\n    e.stopPropagation();\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$6] = Dropdown._jQueryInterface;\n  $__default[\"default\"].fn[NAME$6].Constructor = Dropdown;\n\n  $__default[\"default\"].fn[NAME$6].noConflict = function () {\n    $__default[\"default\"].fn[NAME$6] = JQUERY_NO_CONFLICT$6;\n    return Dropdown._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$5 = 'modal';\n  var VERSION$5 = '4.6.2';\n  var DATA_KEY$5 = 'bs.modal';\n  var EVENT_KEY$5 = \".\" + DATA_KEY$5;\n  var DATA_API_KEY$2 = '.data-api';\n  var JQUERY_NO_CONFLICT$5 = $__default[\"default\"].fn[NAME$5];\n  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\n\n  var CLASS_NAME_SCROLLABLE = 'modal-dialog-scrollable';\n  var CLASS_NAME_SCROLLBAR_MEASURER = 'modal-scrollbar-measure';\n  var CLASS_NAME_BACKDROP = 'modal-backdrop';\n  var CLASS_NAME_OPEN = 'modal-open';\n  var CLASS_NAME_FADE$4 = 'fade';\n  var CLASS_NAME_SHOW$4 = 'show';\n  var CLASS_NAME_STATIC = 'modal-static';\n  var EVENT_HIDE$2 = \"hide\" + EVENT_KEY$5;\n  var EVENT_HIDE_PREVENTED = \"hidePrevented\" + EVENT_KEY$5;\n  var EVENT_HIDDEN$2 = \"hidden\" + EVENT_KEY$5;\n  var EVENT_SHOW$2 = \"show\" + EVENT_KEY$5;\n  var EVENT_SHOWN$2 = \"shown\" + EVENT_KEY$5;\n  var EVENT_FOCUSIN = \"focusin\" + EVENT_KEY$5;\n  var EVENT_RESIZE = \"resize\" + EVENT_KEY$5;\n  var EVENT_CLICK_DISMISS$1 = \"click.dismiss\" + EVENT_KEY$5;\n  var EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\" + EVENT_KEY$5;\n  var EVENT_MOUSEUP_DISMISS = \"mouseup.dismiss\" + EVENT_KEY$5;\n  var EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\" + EVENT_KEY$5;\n  var EVENT_CLICK_DATA_API$1 = \"click\" + EVENT_KEY$5 + DATA_API_KEY$2;\n  var SELECTOR_DIALOG = '.modal-dialog';\n  var SELECTOR_MODAL_BODY = '.modal-body';\n  var SELECTOR_DATA_TOGGLE$1 = '[data-toggle=\"modal\"]';\n  var SELECTOR_DATA_DISMISS$1 = '[data-dismiss=\"modal\"]';\n  var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n  var SELECTOR_STICKY_CONTENT = '.sticky-top';\n  var Default$4 = {\n    backdrop: true,\n    keyboard: true,\n    focus: true,\n    show: true\n  };\n  var DefaultType$4 = {\n    backdrop: '(boolean|string)',\n    keyboard: 'boolean',\n    focus: 'boolean',\n    show: 'boolean'\n  };\n  /**\n   * Class definition\n   */\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(element, config) {\n      this._config = this._getConfig(config);\n      this._element = element;\n      this._dialog = element.querySelector(SELECTOR_DIALOG);\n      this._backdrop = null;\n      this._isShown = false;\n      this._isBodyOverflowing = false;\n      this._ignoreBackdropClick = false;\n      this._isTransitioning = false;\n      this._scrollbarWidth = 0;\n    } // Getters\n\n\n    var _proto = Modal.prototype;\n\n    // Public\n    _proto.toggle = function toggle(relatedTarget) {\n      return this._isShown ? this.hide() : this.show(relatedTarget);\n    };\n\n    _proto.show = function show(relatedTarget) {\n      var _this = this;\n\n      if (this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      var showEvent = $__default[\"default\"].Event(EVENT_SHOW$2, {\n        relatedTarget: relatedTarget\n      });\n      $__default[\"default\"](this._element).trigger(showEvent);\n\n      if (showEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._isShown = true;\n\n      if ($__default[\"default\"](this._element).hasClass(CLASS_NAME_FADE$4)) {\n        this._isTransitioning = true;\n      }\n\n      this._checkScrollbar();\n\n      this._setScrollbar();\n\n      this._adjustDialog();\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      $__default[\"default\"](this._element).on(EVENT_CLICK_DISMISS$1, SELECTOR_DATA_DISMISS$1, function (event) {\n        return _this.hide(event);\n      });\n      $__default[\"default\"](this._dialog).on(EVENT_MOUSEDOWN_DISMISS, function () {\n        $__default[\"default\"](_this._element).one(EVENT_MOUSEUP_DISMISS, function (event) {\n          if ($__default[\"default\"](event.target).is(_this._element)) {\n            _this._ignoreBackdropClick = true;\n          }\n        });\n      });\n\n      this._showBackdrop(function () {\n        return _this._showElement(relatedTarget);\n      });\n    };\n\n    _proto.hide = function hide(event) {\n      var _this2 = this;\n\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this._isShown || this._isTransitioning) {\n        return;\n      }\n\n      var hideEvent = $__default[\"default\"].Event(EVENT_HIDE$2);\n      $__default[\"default\"](this._element).trigger(hideEvent);\n\n      if (!this._isShown || hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._isShown = false;\n      var transition = $__default[\"default\"](this._element).hasClass(CLASS_NAME_FADE$4);\n\n      if (transition) {\n        this._isTransitioning = true;\n      }\n\n      this._setEscapeEvent();\n\n      this._setResizeEvent();\n\n      $__default[\"default\"](document).off(EVENT_FOCUSIN);\n      $__default[\"default\"](this._element).removeClass(CLASS_NAME_SHOW$4);\n      $__default[\"default\"](this._element).off(EVENT_CLICK_DISMISS$1);\n      $__default[\"default\"](this._dialog).off(EVENT_MOUSEDOWN_DISMISS);\n\n      if (transition) {\n        var transitionDuration = Util.getTransitionDurationFromElement(this._element);\n        $__default[\"default\"](this._element).one(Util.TRANSITION_END, function (event) {\n          return _this2._hideModal(event);\n        }).emulateTransitionEnd(transitionDuration);\n      } else {\n        this._hideModal();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      [window, this._element, this._dialog].forEach(function (htmlElement) {\n        return $__default[\"default\"](htmlElement).off(EVENT_KEY$5);\n      });\n      /**\n       * `document` has 2 events `EVENT_FOCUSIN` and `EVENT_CLICK_DATA_API`\n       * Do not move `document` in `htmlElements` array\n       * It will remove `EVENT_CLICK_DATA_API` event that should remain\n       */\n\n      $__default[\"default\"](document).off(EVENT_FOCUSIN);\n      $__default[\"default\"].removeData(this._element, DATA_KEY$5);\n      this._config = null;\n      this._element = null;\n      this._dialog = null;\n      this._backdrop = null;\n      this._isShown = null;\n      this._isBodyOverflowing = null;\n      this._ignoreBackdropClick = null;\n      this._isTransitioning = null;\n      this._scrollbarWidth = null;\n    };\n\n    _proto.handleUpdate = function handleUpdate() {\n      this._adjustDialog();\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default$4, config);\n      Util.typeCheckConfig(NAME$5, config, DefaultType$4);\n      return config;\n    };\n\n    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {\n      var _this3 = this;\n\n      var hideEventPrevented = $__default[\"default\"].Event(EVENT_HIDE_PREVENTED);\n      $__default[\"default\"](this._element).trigger(hideEventPrevented);\n\n      if (hideEventPrevented.isDefaultPrevented()) {\n        return;\n      }\n\n      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      if (!isModalOverflowing) {\n        this._element.style.overflowY = 'hidden';\n      }\n\n      this._element.classList.add(CLASS_NAME_STATIC);\n\n      var modalTransitionDuration = Util.getTransitionDurationFromElement(this._dialog);\n      $__default[\"default\"](this._element).off(Util.TRANSITION_END);\n      $__default[\"default\"](this._element).one(Util.TRANSITION_END, function () {\n        _this3._element.classList.remove(CLASS_NAME_STATIC);\n\n        if (!isModalOverflowing) {\n          $__default[\"default\"](_this3._element).one(Util.TRANSITION_END, function () {\n            _this3._element.style.overflowY = '';\n          }).emulateTransitionEnd(_this3._element, modalTransitionDuration);\n        }\n      }).emulateTransitionEnd(modalTransitionDuration);\n\n      this._element.focus();\n    };\n\n    _proto._showElement = function _showElement(relatedTarget) {\n      var _this4 = this;\n\n      var transition = $__default[\"default\"](this._element).hasClass(CLASS_NAME_FADE$4);\n      var modalBody = this._dialog ? this._dialog.querySelector(SELECTOR_MODAL_BODY) : null;\n\n      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n        // Don't move modal's DOM position\n        document.body.appendChild(this._element);\n      }\n\n      this._element.style.display = 'block';\n\n      this._element.removeAttribute('aria-hidden');\n\n      this._element.setAttribute('aria-modal', true);\n\n      this._element.setAttribute('role', 'dialog');\n\n      if ($__default[\"default\"](this._dialog).hasClass(CLASS_NAME_SCROLLABLE) && modalBody) {\n        modalBody.scrollTop = 0;\n      } else {\n        this._element.scrollTop = 0;\n      }\n\n      if (transition) {\n        Util.reflow(this._element);\n      }\n\n      $__default[\"default\"](this._element).addClass(CLASS_NAME_SHOW$4);\n\n      if (this._config.focus) {\n        this._enforceFocus();\n      }\n\n      var shownEvent = $__default[\"default\"].Event(EVENT_SHOWN$2, {\n        relatedTarget: relatedTarget\n      });\n\n      var transitionComplete = function transitionComplete() {\n        if (_this4._config.focus) {\n          _this4._element.focus();\n        }\n\n        _this4._isTransitioning = false;\n        $__default[\"default\"](_this4._element).trigger(shownEvent);\n      };\n\n      if (transition) {\n        var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);\n        $__default[\"default\"](this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);\n      } else {\n        transitionComplete();\n      }\n    };\n\n    _proto._enforceFocus = function _enforceFocus() {\n      var _this5 = this;\n\n      $__default[\"default\"](document).off(EVENT_FOCUSIN) // Guard against infinite focus loop\n      .on(EVENT_FOCUSIN, function (event) {\n        if (document !== event.target && _this5._element !== event.target && $__default[\"default\"](_this5._element).has(event.target).length === 0) {\n          _this5._element.focus();\n        }\n      });\n    };\n\n    _proto._setEscapeEvent = function _setEscapeEvent() {\n      var _this6 = this;\n\n      if (this._isShown) {\n        $__default[\"default\"](this._element).on(EVENT_KEYDOWN_DISMISS, function (event) {\n          if (_this6._config.keyboard && event.which === ESCAPE_KEYCODE) {\n            event.preventDefault();\n\n            _this6.hide();\n          } else if (!_this6._config.keyboard && event.which === ESCAPE_KEYCODE) {\n            _this6._triggerBackdropTransition();\n          }\n        });\n      } else if (!this._isShown) {\n        $__default[\"default\"](this._element).off(EVENT_KEYDOWN_DISMISS);\n      }\n    };\n\n    _proto._setResizeEvent = function _setResizeEvent() {\n      var _this7 = this;\n\n      if (this._isShown) {\n        $__default[\"default\"](window).on(EVENT_RESIZE, function (event) {\n          return _this7.handleUpdate(event);\n        });\n      } else {\n        $__default[\"default\"](window).off(EVENT_RESIZE);\n      }\n    };\n\n    _proto._hideModal = function _hideModal() {\n      var _this8 = this;\n\n      this._element.style.display = 'none';\n\n      this._element.setAttribute('aria-hidden', true);\n\n      this._element.removeAttribute('aria-modal');\n\n      this._element.removeAttribute('role');\n\n      this._isTransitioning = false;\n\n      this._showBackdrop(function () {\n        $__default[\"default\"](document.body).removeClass(CLASS_NAME_OPEN);\n\n        _this8._resetAdjustments();\n\n        _this8._resetScrollbar();\n\n        $__default[\"default\"](_this8._element).trigger(EVENT_HIDDEN$2);\n      });\n    };\n\n    _proto._removeBackdrop = function _removeBackdrop() {\n      if (this._backdrop) {\n        $__default[\"default\"](this._backdrop).remove();\n        this._backdrop = null;\n      }\n    };\n\n    _proto._showBackdrop = function _showBackdrop(callback) {\n      var _this9 = this;\n\n      var animate = $__default[\"default\"](this._element).hasClass(CLASS_NAME_FADE$4) ? CLASS_NAME_FADE$4 : '';\n\n      if (this._isShown && this._config.backdrop) {\n        this._backdrop = document.createElement('div');\n        this._backdrop.className = CLASS_NAME_BACKDROP;\n\n        if (animate) {\n          this._backdrop.classList.add(animate);\n        }\n\n        $__default[\"default\"](this._backdrop).appendTo(document.body);\n        $__default[\"default\"](this._element).on(EVENT_CLICK_DISMISS$1, function (event) {\n          if (_this9._ignoreBackdropClick) {\n            _this9._ignoreBackdropClick = false;\n            return;\n          }\n\n          if (event.target !== event.currentTarget) {\n            return;\n          }\n\n          if (_this9._config.backdrop === 'static') {\n            _this9._triggerBackdropTransition();\n          } else {\n            _this9.hide();\n          }\n        });\n\n        if (animate) {\n          Util.reflow(this._backdrop);\n        }\n\n        $__default[\"default\"](this._backdrop).addClass(CLASS_NAME_SHOW$4);\n\n        if (!callback) {\n          return;\n        }\n\n        if (!animate) {\n          callback();\n          return;\n        }\n\n        var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\n        $__default[\"default\"](this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);\n      } else if (!this._isShown && this._backdrop) {\n        $__default[\"default\"](this._backdrop).removeClass(CLASS_NAME_SHOW$4);\n\n        var callbackRemove = function callbackRemove() {\n          _this9._removeBackdrop();\n\n          if (callback) {\n            callback();\n          }\n        };\n\n        if ($__default[\"default\"](this._element).hasClass(CLASS_NAME_FADE$4)) {\n          var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\n\n          $__default[\"default\"](this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);\n        } else {\n          callbackRemove();\n        }\n      } else if (callback) {\n        callback();\n      }\n    } // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // todo (fat): these should probably be refactored out of modal.js\n    // ----------------------------------------------------------------------\n    ;\n\n    _proto._adjustDialog = function _adjustDialog() {\n      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n      if (!this._isBodyOverflowing && isModalOverflowing) {\n        this._element.style.paddingLeft = this._scrollbarWidth + \"px\";\n      }\n\n      if (this._isBodyOverflowing && !isModalOverflowing) {\n        this._element.style.paddingRight = this._scrollbarWidth + \"px\";\n      }\n    };\n\n    _proto._resetAdjustments = function _resetAdjustments() {\n      this._element.style.paddingLeft = '';\n      this._element.style.paddingRight = '';\n    };\n\n    _proto._checkScrollbar = function _checkScrollbar() {\n      var rect = document.body.getBoundingClientRect();\n      this._isBodyOverflowing = Math.round(rect.left + rect.right) < window.innerWidth;\n      this._scrollbarWidth = this._getScrollbarWidth();\n    };\n\n    _proto._setScrollbar = function _setScrollbar() {\n      var _this10 = this;\n\n      if (this._isBodyOverflowing) {\n        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\n        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n        var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));\n        var stickyContent = [].slice.call(document.querySelectorAll(SELECTOR_STICKY_CONTENT)); // Adjust fixed content padding\n\n        $__default[\"default\"](fixedContent).each(function (index, element) {\n          var actualPadding = element.style.paddingRight;\n          var calculatedPadding = $__default[\"default\"](element).css('padding-right');\n          $__default[\"default\"](element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this10._scrollbarWidth + \"px\");\n        }); // Adjust sticky content margin\n\n        $__default[\"default\"](stickyContent).each(function (index, element) {\n          var actualMargin = element.style.marginRight;\n          var calculatedMargin = $__default[\"default\"](element).css('margin-right');\n          $__default[\"default\"](element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this10._scrollbarWidth + \"px\");\n        }); // Adjust body padding\n\n        var actualPadding = document.body.style.paddingRight;\n        var calculatedPadding = $__default[\"default\"](document.body).css('padding-right');\n        $__default[\"default\"](document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + \"px\");\n      }\n\n      $__default[\"default\"](document.body).addClass(CLASS_NAME_OPEN);\n    };\n\n    _proto._resetScrollbar = function _resetScrollbar() {\n      // Restore fixed content padding\n      var fixedContent = [].slice.call(document.querySelectorAll(SELECTOR_FIXED_CONTENT));\n      $__default[\"default\"](fixedContent).each(function (index, element) {\n        var padding = $__default[\"default\"](element).data('padding-right');\n        $__default[\"default\"](element).removeData('padding-right');\n        element.style.paddingRight = padding ? padding : '';\n      }); // Restore sticky content\n\n      var elements = [].slice.call(document.querySelectorAll(\"\" + SELECTOR_STICKY_CONTENT));\n      $__default[\"default\"](elements).each(function (index, element) {\n        var margin = $__default[\"default\"](element).data('margin-right');\n\n        if (typeof margin !== 'undefined') {\n          $__default[\"default\"](element).css('margin-right', margin).removeData('margin-right');\n        }\n      }); // Restore body padding\n\n      var padding = $__default[\"default\"](document.body).data('padding-right');\n      $__default[\"default\"](document.body).removeData('padding-right');\n      document.body.style.paddingRight = padding ? padding : '';\n    };\n\n    _proto._getScrollbarWidth = function _getScrollbarWidth() {\n      // thx d.walsh\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = CLASS_NAME_SCROLLBAR_MEASURER;\n      document.body.appendChild(scrollDiv);\n      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return scrollbarWidth;\n    } // Static\n    ;\n\n    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {\n      return this.each(function () {\n        var data = $__default[\"default\"](this).data(DATA_KEY$5);\n\n        var _config = _extends({}, Default$4, $__default[\"default\"](this).data(), typeof config === 'object' && config ? config : {});\n\n        if (!data) {\n          data = new Modal(this, _config);\n          $__default[\"default\"](this).data(DATA_KEY$5, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](relatedTarget);\n        } else if (_config.show) {\n          data.show(relatedTarget);\n        }\n      });\n    };\n\n    _createClass(Modal, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$5;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$4;\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n    var _this11 = this;\n\n    var target;\n    var selector = Util.getSelectorFromElement(this);\n\n    if (selector) {\n      target = document.querySelector(selector);\n    }\n\n    var config = $__default[\"default\"](target).data(DATA_KEY$5) ? 'toggle' : _extends({}, $__default[\"default\"](target).data(), $__default[\"default\"](this).data());\n\n    if (this.tagName === 'A' || this.tagName === 'AREA') {\n      event.preventDefault();\n    }\n\n    var $target = $__default[\"default\"](target).one(EVENT_SHOW$2, function (showEvent) {\n      if (showEvent.isDefaultPrevented()) {\n        // Only register focus restorer if modal will actually get shown\n        return;\n      }\n\n      $target.one(EVENT_HIDDEN$2, function () {\n        if ($__default[\"default\"](_this11).is(':visible')) {\n          _this11.focus();\n        }\n      });\n    });\n\n    Modal._jQueryInterface.call($__default[\"default\"](target), config, this);\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$5] = Modal._jQueryInterface;\n  $__default[\"default\"].fn[NAME$5].Constructor = Modal;\n\n  $__default[\"default\"].fn[NAME$5].noConflict = function () {\n    $__default[\"default\"].fn[NAME$5] = JQUERY_NO_CONFLICT$5;\n    return Modal._jQueryInterface;\n  };\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v4.6.2): tools/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n  var DefaultWhitelist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  };\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n   */\n\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n\n  function allowedAttribute(attr, allowedAttributeList) {\n    var attrName = attr.nodeName.toLowerCase();\n\n    if (allowedAttributeList.indexOf(attrName) !== -1) {\n      if (uriAttrs.indexOf(attrName) !== -1) {\n        return Boolean(SAFE_URL_PATTERN.test(attr.nodeValue) || DATA_URL_PATTERN.test(attr.nodeValue));\n      }\n\n      return true;\n    }\n\n    var regExp = allowedAttributeList.filter(function (attrRegex) {\n      return attrRegex instanceof RegExp;\n    }); // Check if a regular expression validates the attribute.\n\n    for (var i = 0, len = regExp.length; i < len; i++) {\n      if (regExp[i].test(attrName)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {\n    if (unsafeHtml.length === 0) {\n      return unsafeHtml;\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml);\n    }\n\n    var domParser = new window.DOMParser();\n    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n    var whitelistKeys = Object.keys(whiteList);\n    var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));\n\n    var _loop = function _loop(i, len) {\n      var el = elements[i];\n      var elName = el.nodeName.toLowerCase();\n\n      if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {\n        el.parentNode.removeChild(el);\n        return \"continue\";\n      }\n\n      var attributeList = [].slice.call(el.attributes); // eslint-disable-next-line unicorn/prefer-spread\n\n      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);\n      attributeList.forEach(function (attr) {\n        if (!allowedAttribute(attr, whitelistedAttributes)) {\n          el.removeAttribute(attr.nodeName);\n        }\n      });\n    };\n\n    for (var i = 0, len = elements.length; i < len; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    return createdDocument.body.innerHTML;\n  }\n\n  /**\n   * Constants\n   */\n\n  var NAME$4 = 'tooltip';\n  var VERSION$4 = '4.6.2';\n  var DATA_KEY$4 = 'bs.tooltip';\n  var EVENT_KEY$4 = \".\" + DATA_KEY$4;\n  var JQUERY_NO_CONFLICT$4 = $__default[\"default\"].fn[NAME$4];\n  var CLASS_PREFIX$1 = 'bs-tooltip';\n  var BSCLS_PREFIX_REGEX$1 = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX$1 + \"\\\\S+\", 'g');\n  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];\n  var CLASS_NAME_FADE$3 = 'fade';\n  var CLASS_NAME_SHOW$3 = 'show';\n  var HOVER_STATE_SHOW = 'show';\n  var HOVER_STATE_OUT = 'out';\n  var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n  var SELECTOR_ARROW = '.arrow';\n  var TRIGGER_HOVER = 'hover';\n  var TRIGGER_FOCUS = 'focus';\n  var TRIGGER_CLICK = 'click';\n  var TRIGGER_MANUAL = 'manual';\n  var AttachmentMap = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: 'right',\n    BOTTOM: 'bottom',\n    LEFT: 'left'\n  };\n  var Default$3 = {\n    animation: true,\n    template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    selector: false,\n    placement: 'top',\n    offset: 0,\n    container: false,\n    fallbackPlacement: 'flip',\n    boundary: 'scrollParent',\n    customClass: '',\n    sanitize: true,\n    sanitizeFn: null,\n    whiteList: DefaultWhitelist,\n    popperConfig: null\n  };\n  var DefaultType$3 = {\n    animation: 'boolean',\n    template: 'string',\n    title: '(string|element|function)',\n    trigger: 'string',\n    delay: '(number|object)',\n    html: 'boolean',\n    selector: '(string|boolean)',\n    placement: '(string|function)',\n    offset: '(number|string|function)',\n    container: '(string|element|boolean)',\n    fallbackPlacement: '(string|array)',\n    boundary: '(string|element)',\n    customClass: '(string|function)',\n    sanitize: 'boolean',\n    sanitizeFn: '(null|function)',\n    whiteList: 'object',\n    popperConfig: '(null|object)'\n  };\n  var Event$1 = {\n    HIDE: \"hide\" + EVENT_KEY$4,\n    HIDDEN: \"hidden\" + EVENT_KEY$4,\n    SHOW: \"show\" + EVENT_KEY$4,\n    SHOWN: \"shown\" + EVENT_KEY$4,\n    INSERTED: \"inserted\" + EVENT_KEY$4,\n    CLICK: \"click\" + EVENT_KEY$4,\n    FOCUSIN: \"focusin\" + EVENT_KEY$4,\n    FOCUSOUT: \"focusout\" + EVENT_KEY$4,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY$4,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY$4\n  };\n  /**\n   * Class definition\n   */\n\n  var Tooltip = /*#__PURE__*/function () {\n    function Tooltip(element, config) {\n      if (typeof Popper__default[\"default\"] === 'undefined') {\n        throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n      } // Private\n\n\n      this._isEnabled = true;\n      this._timeout = 0;\n      this._hoverState = '';\n      this._activeTrigger = {};\n      this._popper = null; // Protected\n\n      this.element = element;\n      this.config = this._getConfig(config);\n      this.tip = null;\n\n      this._setListeners();\n    } // Getters\n\n\n    var _proto = Tooltip.prototype;\n\n    // Public\n    _proto.enable = function enable() {\n      this._isEnabled = true;\n    };\n\n    _proto.disable = function disable() {\n      this._isEnabled = false;\n    };\n\n    _proto.toggleEnabled = function toggleEnabled() {\n      this._isEnabled = !this._isEnabled;\n    };\n\n    _proto.toggle = function toggle(event) {\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (event) {\n        var dataKey = this.constructor.DATA_KEY;\n        var context = $__default[\"default\"](event.currentTarget).data(dataKey);\n\n        if (!context) {\n          context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n          $__default[\"default\"](event.currentTarget).data(dataKey, context);\n        }\n\n        context._activeTrigger.click = !context._activeTrigger.click;\n\n        if (context._isWithActiveTrigger()) {\n          context._enter(null, context);\n        } else {\n          context._leave(null, context);\n        }\n      } else {\n        if ($__default[\"default\"](this.getTipElement()).hasClass(CLASS_NAME_SHOW$3)) {\n          this._leave(null, this);\n\n          return;\n        }\n\n        this._enter(null, this);\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      clearTimeout(this._timeout);\n      $__default[\"default\"].removeData(this.element, this.constructor.DATA_KEY);\n      $__default[\"default\"](this.element).off(this.constructor.EVENT_KEY);\n      $__default[\"default\"](this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);\n\n      if (this.tip) {\n        $__default[\"default\"](this.tip).remove();\n      }\n\n      this._isEnabled = null;\n      this._timeout = null;\n      this._hoverState = null;\n      this._activeTrigger = null;\n\n      if (this._popper) {\n        this._popper.destroy();\n      }\n\n      this._popper = null;\n      this.element = null;\n      this.config = null;\n      this.tip = null;\n    };\n\n    _proto.show = function show() {\n      var _this = this;\n\n      if ($__default[\"default\"](this.element).css('display') === 'none') {\n        throw new Error('Please use show on visible elements');\n      }\n\n      var showEvent = $__default[\"default\"].Event(this.constructor.Event.SHOW);\n\n      if (this.isWithContent() && this._isEnabled) {\n        $__default[\"default\"](this.element).trigger(showEvent);\n        var shadowRoot = Util.findShadowRoot(this.element);\n        var isInTheDom = $__default[\"default\"].contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);\n\n        if (showEvent.isDefaultPrevented() || !isInTheDom) {\n          return;\n        }\n\n        var tip = this.getTipElement();\n        var tipId = Util.getUID(this.constructor.NAME);\n        tip.setAttribute('id', tipId);\n        this.element.setAttribute('aria-describedby', tipId);\n        this.setContent();\n\n        if (this.config.animation) {\n          $__default[\"default\"](tip).addClass(CLASS_NAME_FADE$3);\n        }\n\n        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\n\n        var attachment = this._getAttachment(placement);\n\n        this.addAttachmentClass(attachment);\n\n        var container = this._getContainer();\n\n        $__default[\"default\"](tip).data(this.constructor.DATA_KEY, this);\n\n        if (!$__default[\"default\"].contains(this.element.ownerDocument.documentElement, this.tip)) {\n          $__default[\"default\"](tip).appendTo(container);\n        }\n\n        $__default[\"default\"](this.element).trigger(this.constructor.Event.INSERTED);\n        this._popper = new Popper__default[\"default\"](this.element, tip, this._getPopperConfig(attachment));\n        $__default[\"default\"](tip).addClass(CLASS_NAME_SHOW$3);\n        $__default[\"default\"](tip).addClass(this.config.customClass); // If this is a touch-enabled device we add extra\n        // empty mouseover listeners to the body's immediate children;\n        // only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n        if ('ontouchstart' in document.documentElement) {\n          $__default[\"default\"](document.body).children().on('mouseover', null, $__default[\"default\"].noop);\n        }\n\n        var complete = function complete() {\n          if (_this.config.animation) {\n            _this._fixTransition();\n          }\n\n          var prevHoverState = _this._hoverState;\n          _this._hoverState = null;\n          $__default[\"default\"](_this.element).trigger(_this.constructor.Event.SHOWN);\n\n          if (prevHoverState === HOVER_STATE_OUT) {\n            _this._leave(null, _this);\n          }\n        };\n\n        if ($__default[\"default\"](this.tip).hasClass(CLASS_NAME_FADE$3)) {\n          var transitionDuration = Util.getTransitionDurationFromElement(this.tip);\n          $__default[\"default\"](this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n        } else {\n          complete();\n        }\n      }\n    };\n\n    _proto.hide = function hide(callback) {\n      var _this2 = this;\n\n      var tip = this.getTipElement();\n      var hideEvent = $__default[\"default\"].Event(this.constructor.Event.HIDE);\n\n      var complete = function complete() {\n        if (_this2._hoverState !== HOVER_STATE_SHOW && tip.parentNode) {\n          tip.parentNode.removeChild(tip);\n        }\n\n        _this2._cleanTipClass();\n\n        _this2.element.removeAttribute('aria-describedby');\n\n        $__default[\"default\"](_this2.element).trigger(_this2.constructor.Event.HIDDEN);\n\n        if (_this2._popper !== null) {\n          _this2._popper.destroy();\n        }\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      $__default[\"default\"](this.element).trigger(hideEvent);\n\n      if (hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      $__default[\"default\"](tip).removeClass(CLASS_NAME_SHOW$3); // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n      if ('ontouchstart' in document.documentElement) {\n        $__default[\"default\"](document.body).children().off('mouseover', null, $__default[\"default\"].noop);\n      }\n\n      this._activeTrigger[TRIGGER_CLICK] = false;\n      this._activeTrigger[TRIGGER_FOCUS] = false;\n      this._activeTrigger[TRIGGER_HOVER] = false;\n\n      if ($__default[\"default\"](this.tip).hasClass(CLASS_NAME_FADE$3)) {\n        var transitionDuration = Util.getTransitionDurationFromElement(tip);\n        $__default[\"default\"](tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n      } else {\n        complete();\n      }\n\n      this._hoverState = '';\n    };\n\n    _proto.update = function update() {\n      if (this._popper !== null) {\n        this._popper.scheduleUpdate();\n      }\n    } // Protected\n    ;\n\n    _proto.isWithContent = function isWithContent() {\n      return Boolean(this.getTitle());\n    };\n\n    _proto.addAttachmentClass = function addAttachmentClass(attachment) {\n      $__default[\"default\"](this.getTipElement()).addClass(CLASS_PREFIX$1 + \"-\" + attachment);\n    };\n\n    _proto.getTipElement = function getTipElement() {\n      this.tip = this.tip || $__default[\"default\"](this.config.template)[0];\n      return this.tip;\n    };\n\n    _proto.setContent = function setContent() {\n      var tip = this.getTipElement();\n      this.setElementContent($__default[\"default\"](tip.querySelectorAll(SELECTOR_TOOLTIP_INNER)), this.getTitle());\n      $__default[\"default\"](tip).removeClass(CLASS_NAME_FADE$3 + \" \" + CLASS_NAME_SHOW$3);\n    };\n\n    _proto.setElementContent = function setElementContent($element, content) {\n      if (typeof content === 'object' && (content.nodeType || content.jquery)) {\n        // Content is a DOM node or a jQuery\n        if (this.config.html) {\n          if (!$__default[\"default\"](content).parent().is($element)) {\n            $element.empty().append(content);\n          }\n        } else {\n          $element.text($__default[\"default\"](content).text());\n        }\n\n        return;\n      }\n\n      if (this.config.html) {\n        if (this.config.sanitize) {\n          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);\n        }\n\n        $element.html(content);\n      } else {\n        $element.text(content);\n      }\n    };\n\n    _proto.getTitle = function getTitle() {\n      var title = this.element.getAttribute('data-original-title');\n\n      if (!title) {\n        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\n      }\n\n      return title;\n    } // Private\n    ;\n\n    _proto._getPopperConfig = function _getPopperConfig(attachment) {\n      var _this3 = this;\n\n      var defaultBsConfig = {\n        placement: attachment,\n        modifiers: {\n          offset: this._getOffset(),\n          flip: {\n            behavior: this.config.fallbackPlacement\n          },\n          arrow: {\n            element: SELECTOR_ARROW\n          },\n          preventOverflow: {\n            boundariesElement: this.config.boundary\n          }\n        },\n        onCreate: function onCreate(data) {\n          if (data.originalPlacement !== data.placement) {\n            _this3._handlePopperPlacementChange(data);\n          }\n        },\n        onUpdate: function onUpdate(data) {\n          return _this3._handlePopperPlacementChange(data);\n        }\n      };\n      return _extends({}, defaultBsConfig, this.config.popperConfig);\n    };\n\n    _proto._getOffset = function _getOffset() {\n      var _this4 = this;\n\n      var offset = {};\n\n      if (typeof this.config.offset === 'function') {\n        offset.fn = function (data) {\n          data.offsets = _extends({}, data.offsets, _this4.config.offset(data.offsets, _this4.element));\n          return data;\n        };\n      } else {\n        offset.offset = this.config.offset;\n      }\n\n      return offset;\n    };\n\n    _proto._getContainer = function _getContainer() {\n      if (this.config.container === false) {\n        return document.body;\n      }\n\n      if (Util.isElement(this.config.container)) {\n        return $__default[\"default\"](this.config.container);\n      }\n\n      return $__default[\"default\"](document).find(this.config.container);\n    };\n\n    _proto._getAttachment = function _getAttachment(placement) {\n      return AttachmentMap[placement.toUpperCase()];\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this5 = this;\n\n      var triggers = this.config.trigger.split(' ');\n      triggers.forEach(function (trigger) {\n        if (trigger === 'click') {\n          $__default[\"default\"](_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {\n            return _this5.toggle(event);\n          });\n        } else if (trigger !== TRIGGER_MANUAL) {\n          var eventIn = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;\n          var eventOut = trigger === TRIGGER_HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;\n          $__default[\"default\"](_this5.element).on(eventIn, _this5.config.selector, function (event) {\n            return _this5._enter(event);\n          }).on(eventOut, _this5.config.selector, function (event) {\n            return _this5._leave(event);\n          });\n        }\n      });\n\n      this._hideModalHandler = function () {\n        if (_this5.element) {\n          _this5.hide();\n        }\n      };\n\n      $__default[\"default\"](this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);\n\n      if (this.config.selector) {\n        this.config = _extends({}, this.config, {\n          trigger: 'manual',\n          selector: ''\n        });\n      } else {\n        this._fixTitle();\n      }\n    };\n\n    _proto._fixTitle = function _fixTitle() {\n      var titleType = typeof this.element.getAttribute('data-original-title');\n\n      if (this.element.getAttribute('title') || titleType !== 'string') {\n        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\n        this.element.setAttribute('title', '');\n      }\n    };\n\n    _proto._enter = function _enter(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || $__default[\"default\"](event.currentTarget).data(dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n        $__default[\"default\"](event.currentTarget).data(dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n      }\n\n      if ($__default[\"default\"](context.getTipElement()).hasClass(CLASS_NAME_SHOW$3) || context._hoverState === HOVER_STATE_SHOW) {\n        context._hoverState = HOVER_STATE_SHOW;\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_SHOW;\n\n      if (!context.config.delay || !context.config.delay.show) {\n        context.show();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HOVER_STATE_SHOW) {\n          context.show();\n        }\n      }, context.config.delay.show);\n    };\n\n    _proto._leave = function _leave(event, context) {\n      var dataKey = this.constructor.DATA_KEY;\n      context = context || $__default[\"default\"](event.currentTarget).data(dataKey);\n\n      if (!context) {\n        context = new this.constructor(event.currentTarget, this._getDelegateConfig());\n        $__default[\"default\"](event.currentTarget).data(dataKey, context);\n      }\n\n      if (event) {\n        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = false;\n      }\n\n      if (context._isWithActiveTrigger()) {\n        return;\n      }\n\n      clearTimeout(context._timeout);\n      context._hoverState = HOVER_STATE_OUT;\n\n      if (!context.config.delay || !context.config.delay.hide) {\n        context.hide();\n        return;\n      }\n\n      context._timeout = setTimeout(function () {\n        if (context._hoverState === HOVER_STATE_OUT) {\n          context.hide();\n        }\n      }, context.config.delay.hide);\n    };\n\n    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {\n      for (var trigger in this._activeTrigger) {\n        if (this._activeTrigger[trigger]) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _proto._getConfig = function _getConfig(config) {\n      var dataAttributes = $__default[\"default\"](this.element).data();\n      Object.keys(dataAttributes).forEach(function (dataAttr) {\n        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {\n          delete dataAttributes[dataAttr];\n        }\n      });\n      config = _extends({}, this.constructor.Default, dataAttributes, typeof config === 'object' && config ? config : {});\n\n      if (typeof config.delay === 'number') {\n        config.delay = {\n          show: config.delay,\n          hide: config.delay\n        };\n      }\n\n      if (typeof config.title === 'number') {\n        config.title = config.title.toString();\n      }\n\n      if (typeof config.content === 'number') {\n        config.content = config.content.toString();\n      }\n\n      Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);\n\n      if (config.sanitize) {\n        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);\n      }\n\n      return config;\n    };\n\n    _proto._getDelegateConfig = function _getDelegateConfig() {\n      var config = {};\n\n      if (this.config) {\n        for (var key in this.config) {\n          if (this.constructor.Default[key] !== this.config[key]) {\n            config[key] = this.config[key];\n          }\n        }\n      }\n\n      return config;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var $tip = $__default[\"default\"](this.getTipElement());\n      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);\n\n      if (tabClass !== null && tabClass.length) {\n        $tip.removeClass(tabClass.join(''));\n      }\n    };\n\n    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {\n      this.tip = popperData.instance.popper;\n\n      this._cleanTipClass();\n\n      this.addAttachmentClass(this._getAttachment(popperData.placement));\n    };\n\n    _proto._fixTransition = function _fixTransition() {\n      var tip = this.getTipElement();\n      var initConfigAnimation = this.config.animation;\n\n      if (tip.getAttribute('x-placement') !== null) {\n        return;\n      }\n\n      $__default[\"default\"](tip).removeClass(CLASS_NAME_FADE$3);\n      this.config.animation = false;\n      this.hide();\n      this.show();\n      this.config.animation = initConfigAnimation;\n    } // Static\n    ;\n\n    Tooltip._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var $element = $__default[\"default\"](this);\n        var data = $element.data(DATA_KEY$4);\n\n        var _config = typeof config === 'object' && config;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Tooltip(this, _config);\n          $element.data(DATA_KEY$4, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Tooltip, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$4;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$3;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$4;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY$4;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event$1;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY$4;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$3;\n      }\n    }]);\n\n    return Tooltip;\n  }();\n  /**\n   * jQuery\n   */\n\n\n  $__default[\"default\"].fn[NAME$4] = Tooltip._jQueryInterface;\n  $__default[\"default\"].fn[NAME$4].Constructor = Tooltip;\n\n  $__default[\"default\"].fn[NAME$4].noConflict = function () {\n    $__default[\"default\"].fn[NAME$4] = JQUERY_NO_CONFLICT$4;\n    return Tooltip._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$3 = 'popover';\n  var VERSION$3 = '4.6.2';\n  var DATA_KEY$3 = 'bs.popover';\n  var EVENT_KEY$3 = \".\" + DATA_KEY$3;\n  var JQUERY_NO_CONFLICT$3 = $__default[\"default\"].fn[NAME$3];\n  var CLASS_PREFIX = 'bs-popover';\n  var BSCLS_PREFIX_REGEX = new RegExp(\"(^|\\\\s)\" + CLASS_PREFIX + \"\\\\S+\", 'g');\n  var CLASS_NAME_FADE$2 = 'fade';\n  var CLASS_NAME_SHOW$2 = 'show';\n  var SELECTOR_TITLE = '.popover-header';\n  var SELECTOR_CONTENT = '.popover-body';\n\n  var Default$2 = _extends({}, Tooltip.Default, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n  });\n\n  var DefaultType$2 = _extends({}, Tooltip.DefaultType, {\n    content: '(string|element|function)'\n  });\n\n  var Event = {\n    HIDE: \"hide\" + EVENT_KEY$3,\n    HIDDEN: \"hidden\" + EVENT_KEY$3,\n    SHOW: \"show\" + EVENT_KEY$3,\n    SHOWN: \"shown\" + EVENT_KEY$3,\n    INSERTED: \"inserted\" + EVENT_KEY$3,\n    CLICK: \"click\" + EVENT_KEY$3,\n    FOCUSIN: \"focusin\" + EVENT_KEY$3,\n    FOCUSOUT: \"focusout\" + EVENT_KEY$3,\n    MOUSEENTER: \"mouseenter\" + EVENT_KEY$3,\n    MOUSELEAVE: \"mouseleave\" + EVENT_KEY$3\n  };\n  /**\n   * Class definition\n   */\n\n  var Popover = /*#__PURE__*/function (_Tooltip) {\n    _inheritsLoose(Popover, _Tooltip);\n\n    function Popover() {\n      return _Tooltip.apply(this, arguments) || this;\n    }\n\n    var _proto = Popover.prototype;\n\n    // Overrides\n    _proto.isWithContent = function isWithContent() {\n      return this.getTitle() || this._getContent();\n    };\n\n    _proto.addAttachmentClass = function addAttachmentClass(attachment) {\n      $__default[\"default\"](this.getTipElement()).addClass(CLASS_PREFIX + \"-\" + attachment);\n    };\n\n    _proto.getTipElement = function getTipElement() {\n      this.tip = this.tip || $__default[\"default\"](this.config.template)[0];\n      return this.tip;\n    };\n\n    _proto.setContent = function setContent() {\n      var $tip = $__default[\"default\"](this.getTipElement()); // We use append for html objects to maintain js events\n\n      this.setElementContent($tip.find(SELECTOR_TITLE), this.getTitle());\n\n      var content = this._getContent();\n\n      if (typeof content === 'function') {\n        content = content.call(this.element);\n      }\n\n      this.setElementContent($tip.find(SELECTOR_CONTENT), content);\n      $tip.removeClass(CLASS_NAME_FADE$2 + \" \" + CLASS_NAME_SHOW$2);\n    } // Private\n    ;\n\n    _proto._getContent = function _getContent() {\n      return this.element.getAttribute('data-content') || this.config.content;\n    };\n\n    _proto._cleanTipClass = function _cleanTipClass() {\n      var $tip = $__default[\"default\"](this.getTipElement());\n      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n\n      if (tabClass !== null && tabClass.length > 0) {\n        $tip.removeClass(tabClass.join(''));\n      }\n    } // Static\n    ;\n\n    Popover._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var data = $__default[\"default\"](this).data(DATA_KEY$3);\n\n        var _config = typeof config === 'object' ? config : null;\n\n        if (!data && /dispose|hide/.test(config)) {\n          return;\n        }\n\n        if (!data) {\n          data = new Popover(this, _config);\n          $__default[\"default\"](this).data(DATA_KEY$3, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Popover, null, [{\n      key: \"VERSION\",\n      get: // Getters\n      function get() {\n        return VERSION$3;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$2;\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        return NAME$3;\n      }\n    }, {\n      key: \"DATA_KEY\",\n      get: function get() {\n        return DATA_KEY$3;\n      }\n    }, {\n      key: \"Event\",\n      get: function get() {\n        return Event;\n      }\n    }, {\n      key: \"EVENT_KEY\",\n      get: function get() {\n        return EVENT_KEY$3;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType$2;\n      }\n    }]);\n\n    return Popover;\n  }(Tooltip);\n  /**\n   * jQuery\n   */\n\n\n  $__default[\"default\"].fn[NAME$3] = Popover._jQueryInterface;\n  $__default[\"default\"].fn[NAME$3].Constructor = Popover;\n\n  $__default[\"default\"].fn[NAME$3].noConflict = function () {\n    $__default[\"default\"].fn[NAME$3] = JQUERY_NO_CONFLICT$3;\n    return Popover._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$2 = 'scrollspy';\n  var VERSION$2 = '4.6.2';\n  var DATA_KEY$2 = 'bs.scrollspy';\n  var EVENT_KEY$2 = \".\" + DATA_KEY$2;\n  var DATA_API_KEY$1 = '.data-api';\n  var JQUERY_NO_CONFLICT$2 = $__default[\"default\"].fn[NAME$2];\n  var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n  var CLASS_NAME_ACTIVE$1 = 'active';\n  var EVENT_ACTIVATE = \"activate\" + EVENT_KEY$2;\n  var EVENT_SCROLL = \"scroll\" + EVENT_KEY$2;\n  var EVENT_LOAD_DATA_API = \"load\" + EVENT_KEY$2 + DATA_API_KEY$1;\n  var METHOD_OFFSET = 'offset';\n  var METHOD_POSITION = 'position';\n  var SELECTOR_DATA_SPY = '[data-spy=\"scroll\"]';\n  var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';\n  var SELECTOR_NAV_LINKS = '.nav-link';\n  var SELECTOR_NAV_ITEMS = '.nav-item';\n  var SELECTOR_LIST_ITEMS = '.list-group-item';\n  var SELECTOR_DROPDOWN$1 = '.dropdown';\n  var SELECTOR_DROPDOWN_ITEMS = '.dropdown-item';\n  var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n  var Default$1 = {\n    offset: 10,\n    method: 'auto',\n    target: ''\n  };\n  var DefaultType$1 = {\n    offset: 'number',\n    method: 'string',\n    target: '(string|element)'\n  };\n  /**\n   * Class definition\n   */\n\n  var ScrollSpy = /*#__PURE__*/function () {\n    function ScrollSpy(element, config) {\n      var _this = this;\n\n      this._element = element;\n      this._scrollElement = element.tagName === 'BODY' ? window : element;\n      this._config = this._getConfig(config);\n      this._selector = this._config.target + \" \" + SELECTOR_NAV_LINKS + \",\" + (this._config.target + \" \" + SELECTOR_LIST_ITEMS + \",\") + (this._config.target + \" \" + SELECTOR_DROPDOWN_ITEMS);\n      this._offsets = [];\n      this._targets = [];\n      this._activeTarget = null;\n      this._scrollHeight = 0;\n      $__default[\"default\"](this._scrollElement).on(EVENT_SCROLL, function (event) {\n        return _this._process(event);\n      });\n      this.refresh();\n\n      this._process();\n    } // Getters\n\n\n    var _proto = ScrollSpy.prototype;\n\n    // Public\n    _proto.refresh = function refresh() {\n      var _this2 = this;\n\n      var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;\n      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\n      var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;\n      this._offsets = [];\n      this._targets = [];\n      this._scrollHeight = this._getScrollHeight();\n      var targets = [].slice.call(document.querySelectorAll(this._selector));\n      targets.map(function (element) {\n        var target;\n        var targetSelector = Util.getSelectorFromElement(element);\n\n        if (targetSelector) {\n          target = document.querySelector(targetSelector);\n        }\n\n        if (target) {\n          var targetBCR = target.getBoundingClientRect();\n\n          if (targetBCR.width || targetBCR.height) {\n            // TODO (fat): remove sketch reliance on jQuery position/offset\n            return [$__default[\"default\"](target)[offsetMethod]().top + offsetBase, targetSelector];\n          }\n        }\n\n        return null;\n      }).filter(Boolean).sort(function (a, b) {\n        return a[0] - b[0];\n      }).forEach(function (item) {\n        _this2._offsets.push(item[0]);\n\n        _this2._targets.push(item[1]);\n      });\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"].removeData(this._element, DATA_KEY$2);\n      $__default[\"default\"](this._scrollElement).off(EVENT_KEY$2);\n      this._element = null;\n      this._scrollElement = null;\n      this._config = null;\n      this._selector = null;\n      this._offsets = null;\n      this._targets = null;\n      this._activeTarget = null;\n      this._scrollHeight = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default$1, typeof config === 'object' && config ? config : {});\n\n      if (typeof config.target !== 'string' && Util.isElement(config.target)) {\n        var id = $__default[\"default\"](config.target).attr('id');\n\n        if (!id) {\n          id = Util.getUID(NAME$2);\n          $__default[\"default\"](config.target).attr('id', id);\n        }\n\n        config.target = \"#\" + id;\n      }\n\n      Util.typeCheckConfig(NAME$2, config, DefaultType$1);\n      return config;\n    };\n\n    _proto._getScrollTop = function _getScrollTop() {\n      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    };\n\n    _proto._getScrollHeight = function _getScrollHeight() {\n      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    };\n\n    _proto._getOffsetHeight = function _getOffsetHeight() {\n      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    };\n\n    _proto._process = function _process() {\n      var scrollTop = this._getScrollTop() + this._config.offset;\n\n      var scrollHeight = this._getScrollHeight();\n\n      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\n\n      if (this._scrollHeight !== scrollHeight) {\n        this.refresh();\n      }\n\n      if (scrollTop >= maxScroll) {\n        var target = this._targets[this._targets.length - 1];\n\n        if (this._activeTarget !== target) {\n          this._activate(target);\n        }\n\n        return;\n      }\n\n      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\n        this._activeTarget = null;\n\n        this._clear();\n\n        return;\n      }\n\n      for (var i = this._offsets.length; i--;) {\n        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\n\n        if (isActiveTarget) {\n          this._activate(this._targets[i]);\n        }\n      }\n    };\n\n    _proto._activate = function _activate(target) {\n      this._activeTarget = target;\n\n      this._clear();\n\n      var queries = this._selector.split(',').map(function (selector) {\n        return selector + \"[data-target=\\\"\" + target + \"\\\"],\" + selector + \"[href=\\\"\" + target + \"\\\"]\";\n      });\n\n      var $link = $__default[\"default\"]([].slice.call(document.querySelectorAll(queries.join(','))));\n\n      if ($link.hasClass(CLASS_NAME_DROPDOWN_ITEM)) {\n        $link.closest(SELECTOR_DROPDOWN$1).find(SELECTOR_DROPDOWN_TOGGLE$1).addClass(CLASS_NAME_ACTIVE$1);\n        $link.addClass(CLASS_NAME_ACTIVE$1);\n      } else {\n        // Set triggered link as active\n        $link.addClass(CLASS_NAME_ACTIVE$1); // Set triggered links parents as active\n        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n\n        $link.parents(SELECTOR_NAV_LIST_GROUP$1).prev(SELECTOR_NAV_LINKS + \", \" + SELECTOR_LIST_ITEMS).addClass(CLASS_NAME_ACTIVE$1); // Handle special case when .nav-link is inside .nav-item\n\n        $link.parents(SELECTOR_NAV_LIST_GROUP$1).prev(SELECTOR_NAV_ITEMS).children(SELECTOR_NAV_LINKS).addClass(CLASS_NAME_ACTIVE$1);\n      }\n\n      $__default[\"default\"](this._scrollElement).trigger(EVENT_ACTIVATE, {\n        relatedTarget: target\n      });\n    };\n\n    _proto._clear = function _clear() {\n      [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {\n        return node.classList.contains(CLASS_NAME_ACTIVE$1);\n      }).forEach(function (node) {\n        return node.classList.remove(CLASS_NAME_ACTIVE$1);\n      });\n    } // Static\n    ;\n\n    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var data = $__default[\"default\"](this).data(DATA_KEY$2);\n\n        var _config = typeof config === 'object' && config;\n\n        if (!data) {\n          data = new ScrollSpy(this, _config);\n          $__default[\"default\"](this).data(DATA_KEY$2, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(ScrollSpy, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$2;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default$1;\n      }\n    }]);\n\n    return ScrollSpy;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](window).on(EVENT_LOAD_DATA_API, function () {\n    var scrollSpys = [].slice.call(document.querySelectorAll(SELECTOR_DATA_SPY));\n    var scrollSpysLength = scrollSpys.length;\n\n    for (var i = scrollSpysLength; i--;) {\n      var $spy = $__default[\"default\"](scrollSpys[i]);\n\n      ScrollSpy._jQueryInterface.call($spy, $spy.data());\n    }\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$2] = ScrollSpy._jQueryInterface;\n  $__default[\"default\"].fn[NAME$2].Constructor = ScrollSpy;\n\n  $__default[\"default\"].fn[NAME$2].noConflict = function () {\n    $__default[\"default\"].fn[NAME$2] = JQUERY_NO_CONFLICT$2;\n    return ScrollSpy._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME$1 = 'tab';\n  var VERSION$1 = '4.6.2';\n  var DATA_KEY$1 = 'bs.tab';\n  var EVENT_KEY$1 = \".\" + DATA_KEY$1;\n  var DATA_API_KEY = '.data-api';\n  var JQUERY_NO_CONFLICT$1 = $__default[\"default\"].fn[NAME$1];\n  var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';\n  var CLASS_NAME_ACTIVE = 'active';\n  var CLASS_NAME_DISABLED = 'disabled';\n  var CLASS_NAME_FADE$1 = 'fade';\n  var CLASS_NAME_SHOW$1 = 'show';\n  var EVENT_HIDE$1 = \"hide\" + EVENT_KEY$1;\n  var EVENT_HIDDEN$1 = \"hidden\" + EVENT_KEY$1;\n  var EVENT_SHOW$1 = \"show\" + EVENT_KEY$1;\n  var EVENT_SHOWN$1 = \"shown\" + EVENT_KEY$1;\n  var EVENT_CLICK_DATA_API = \"click\" + EVENT_KEY$1 + DATA_API_KEY;\n  var SELECTOR_DROPDOWN = '.dropdown';\n  var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n  var SELECTOR_ACTIVE = '.active';\n  var SELECTOR_ACTIVE_UL = '> li > .active';\n  var SELECTOR_DATA_TOGGLE = '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]';\n  var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n  var SELECTOR_DROPDOWN_ACTIVE_CHILD = '> .dropdown-menu .active';\n  /**\n   * Class definition\n   */\n\n  var Tab = /*#__PURE__*/function () {\n    function Tab(element) {\n      this._element = element;\n    } // Getters\n\n\n    var _proto = Tab.prototype;\n\n    // Public\n    _proto.show = function show() {\n      var _this = this;\n\n      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $__default[\"default\"](this._element).hasClass(CLASS_NAME_ACTIVE) || $__default[\"default\"](this._element).hasClass(CLASS_NAME_DISABLED) || this._element.hasAttribute('disabled')) {\n        return;\n      }\n\n      var target;\n      var previous;\n      var listElement = $__default[\"default\"](this._element).closest(SELECTOR_NAV_LIST_GROUP)[0];\n      var selector = Util.getSelectorFromElement(this._element);\n\n      if (listElement) {\n        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;\n        previous = $__default[\"default\"].makeArray($__default[\"default\"](listElement).find(itemSelector));\n        previous = previous[previous.length - 1];\n      }\n\n      var hideEvent = $__default[\"default\"].Event(EVENT_HIDE$1, {\n        relatedTarget: this._element\n      });\n      var showEvent = $__default[\"default\"].Event(EVENT_SHOW$1, {\n        relatedTarget: previous\n      });\n\n      if (previous) {\n        $__default[\"default\"](previous).trigger(hideEvent);\n      }\n\n      $__default[\"default\"](this._element).trigger(showEvent);\n\n      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      if (selector) {\n        target = document.querySelector(selector);\n      }\n\n      this._activate(this._element, listElement);\n\n      var complete = function complete() {\n        var hiddenEvent = $__default[\"default\"].Event(EVENT_HIDDEN$1, {\n          relatedTarget: _this._element\n        });\n        var shownEvent = $__default[\"default\"].Event(EVENT_SHOWN$1, {\n          relatedTarget: previous\n        });\n        $__default[\"default\"](previous).trigger(hiddenEvent);\n        $__default[\"default\"](_this._element).trigger(shownEvent);\n      };\n\n      if (target) {\n        this._activate(target, target.parentNode, complete);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.dispose = function dispose() {\n      $__default[\"default\"].removeData(this._element, DATA_KEY$1);\n      this._element = null;\n    } // Private\n    ;\n\n    _proto._activate = function _activate(element, container, callback) {\n      var _this2 = this;\n\n      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $__default[\"default\"](container).find(SELECTOR_ACTIVE_UL) : $__default[\"default\"](container).children(SELECTOR_ACTIVE);\n      var active = activeElements[0];\n      var isTransitioning = callback && active && $__default[\"default\"](active).hasClass(CLASS_NAME_FADE$1);\n\n      var complete = function complete() {\n        return _this2._transitionComplete(element, active, callback);\n      };\n\n      if (active && isTransitioning) {\n        var transitionDuration = Util.getTransitionDurationFromElement(active);\n        $__default[\"default\"](active).removeClass(CLASS_NAME_SHOW$1).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto._transitionComplete = function _transitionComplete(element, active, callback) {\n      if (active) {\n        $__default[\"default\"](active).removeClass(CLASS_NAME_ACTIVE);\n        var dropdownChild = $__default[\"default\"](active.parentNode).find(SELECTOR_DROPDOWN_ACTIVE_CHILD)[0];\n\n        if (dropdownChild) {\n          $__default[\"default\"](dropdownChild).removeClass(CLASS_NAME_ACTIVE);\n        }\n\n        if (active.getAttribute('role') === 'tab') {\n          active.setAttribute('aria-selected', false);\n        }\n      }\n\n      $__default[\"default\"](element).addClass(CLASS_NAME_ACTIVE);\n\n      if (element.getAttribute('role') === 'tab') {\n        element.setAttribute('aria-selected', true);\n      }\n\n      Util.reflow(element);\n\n      if (element.classList.contains(CLASS_NAME_FADE$1)) {\n        element.classList.add(CLASS_NAME_SHOW$1);\n      }\n\n      var parent = element.parentNode;\n\n      if (parent && parent.nodeName === 'LI') {\n        parent = parent.parentNode;\n      }\n\n      if (parent && $__default[\"default\"](parent).hasClass(CLASS_NAME_DROPDOWN_MENU)) {\n        var dropdownElement = $__default[\"default\"](element).closest(SELECTOR_DROPDOWN)[0];\n\n        if (dropdownElement) {\n          var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(SELECTOR_DROPDOWN_TOGGLE));\n          $__default[\"default\"](dropdownToggleList).addClass(CLASS_NAME_ACTIVE);\n        }\n\n        element.setAttribute('aria-expanded', true);\n      }\n\n      if (callback) {\n        callback();\n      }\n    } // Static\n    ;\n\n    Tab._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var $this = $__default[\"default\"](this);\n        var data = $this.data(DATA_KEY$1);\n\n        if (!data) {\n          data = new Tab(this);\n          $this.data(DATA_KEY$1, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config]();\n        }\n      });\n    };\n\n    _createClass(Tab, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION$1;\n      }\n    }]);\n\n    return Tab;\n  }();\n  /**\n   * Data API implementation\n   */\n\n\n  $__default[\"default\"](document).on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n    event.preventDefault();\n\n    Tab._jQueryInterface.call($__default[\"default\"](this), 'show');\n  });\n  /**\n   * jQuery\n   */\n\n  $__default[\"default\"].fn[NAME$1] = Tab._jQueryInterface;\n  $__default[\"default\"].fn[NAME$1].Constructor = Tab;\n\n  $__default[\"default\"].fn[NAME$1].noConflict = function () {\n    $__default[\"default\"].fn[NAME$1] = JQUERY_NO_CONFLICT$1;\n    return Tab._jQueryInterface;\n  };\n\n  /**\n   * Constants\n   */\n\n  var NAME = 'toast';\n  var VERSION = '4.6.2';\n  var DATA_KEY = 'bs.toast';\n  var EVENT_KEY = \".\" + DATA_KEY;\n  var JQUERY_NO_CONFLICT = $__default[\"default\"].fn[NAME];\n  var CLASS_NAME_FADE = 'fade';\n  var CLASS_NAME_HIDE = 'hide';\n  var CLASS_NAME_SHOW = 'show';\n  var CLASS_NAME_SHOWING = 'showing';\n  var EVENT_CLICK_DISMISS = \"click.dismiss\" + EVENT_KEY;\n  var EVENT_HIDE = \"hide\" + EVENT_KEY;\n  var EVENT_HIDDEN = \"hidden\" + EVENT_KEY;\n  var EVENT_SHOW = \"show\" + EVENT_KEY;\n  var EVENT_SHOWN = \"shown\" + EVENT_KEY;\n  var SELECTOR_DATA_DISMISS = '[data-dismiss=\"toast\"]';\n  var Default = {\n    animation: true,\n    autohide: true,\n    delay: 500\n  };\n  var DefaultType = {\n    animation: 'boolean',\n    autohide: 'boolean',\n    delay: 'number'\n  };\n  /**\n   * Class definition\n   */\n\n  var Toast = /*#__PURE__*/function () {\n    function Toast(element, config) {\n      this._element = element;\n      this._config = this._getConfig(config);\n      this._timeout = null;\n\n      this._setListeners();\n    } // Getters\n\n\n    var _proto = Toast.prototype;\n\n    // Public\n    _proto.show = function show() {\n      var _this = this;\n\n      var showEvent = $__default[\"default\"].Event(EVENT_SHOW);\n      $__default[\"default\"](this._element).trigger(showEvent);\n\n      if (showEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._clearTimeout();\n\n      if (this._config.animation) {\n        this._element.classList.add(CLASS_NAME_FADE);\n      }\n\n      var complete = function complete() {\n        _this._element.classList.remove(CLASS_NAME_SHOWING);\n\n        _this._element.classList.add(CLASS_NAME_SHOW);\n\n        $__default[\"default\"](_this._element).trigger(EVENT_SHOWN);\n\n        if (_this._config.autohide) {\n          _this._timeout = setTimeout(function () {\n            _this.hide();\n          }, _this._config.delay);\n        }\n      };\n\n      this._element.classList.remove(CLASS_NAME_HIDE);\n\n      Util.reflow(this._element);\n\n      this._element.classList.add(CLASS_NAME_SHOWING);\n\n      if (this._config.animation) {\n        var transitionDuration = Util.getTransitionDurationFromElement(this._element);\n        $__default[\"default\"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto.hide = function hide() {\n      if (!this._element.classList.contains(CLASS_NAME_SHOW)) {\n        return;\n      }\n\n      var hideEvent = $__default[\"default\"].Event(EVENT_HIDE);\n      $__default[\"default\"](this._element).trigger(hideEvent);\n\n      if (hideEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      this._close();\n    };\n\n    _proto.dispose = function dispose() {\n      this._clearTimeout();\n\n      if (this._element.classList.contains(CLASS_NAME_SHOW)) {\n        this._element.classList.remove(CLASS_NAME_SHOW);\n      }\n\n      $__default[\"default\"](this._element).off(EVENT_CLICK_DISMISS);\n      $__default[\"default\"].removeData(this._element, DATA_KEY);\n      this._element = null;\n      this._config = null;\n    } // Private\n    ;\n\n    _proto._getConfig = function _getConfig(config) {\n      config = _extends({}, Default, $__default[\"default\"](this._element).data(), typeof config === 'object' && config ? config : {});\n      Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n      return config;\n    };\n\n    _proto._setListeners = function _setListeners() {\n      var _this2 = this;\n\n      $__default[\"default\"](this._element).on(EVENT_CLICK_DISMISS, SELECTOR_DATA_DISMISS, function () {\n        return _this2.hide();\n      });\n    };\n\n    _proto._close = function _close() {\n      var _this3 = this;\n\n      var complete = function complete() {\n        _this3._element.classList.add(CLASS_NAME_HIDE);\n\n        $__default[\"default\"](_this3._element).trigger(EVENT_HIDDEN);\n      };\n\n      this._element.classList.remove(CLASS_NAME_SHOW);\n\n      if (this._config.animation) {\n        var transitionDuration = Util.getTransitionDurationFromElement(this._element);\n        $__default[\"default\"](this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n      } else {\n        complete();\n      }\n    };\n\n    _proto._clearTimeout = function _clearTimeout() {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n    } // Static\n    ;\n\n    Toast._jQueryInterface = function _jQueryInterface(config) {\n      return this.each(function () {\n        var $element = $__default[\"default\"](this);\n        var data = $element.data(DATA_KEY);\n\n        var _config = typeof config === 'object' && config;\n\n        if (!data) {\n          data = new Toast(this, _config);\n          $element.data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string') {\n          if (typeof data[config] === 'undefined') {\n            throw new TypeError(\"No method named \\\"\" + config + \"\\\"\");\n          }\n\n          data[config](this);\n        }\n      });\n    };\n\n    _createClass(Toast, null, [{\n      key: \"VERSION\",\n      get: function get() {\n        return VERSION;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }]);\n\n    return Toast;\n  }();\n  /**\n   * jQuery\n   */\n\n\n  $__default[\"default\"].fn[NAME] = Toast._jQueryInterface;\n  $__default[\"default\"].fn[NAME].Constructor = Toast;\n\n  $__default[\"default\"].fn[NAME].noConflict = function () {\n    $__default[\"default\"].fn[NAME] = JQUERY_NO_CONFLICT;\n    return Toast._jQueryInterface;\n  };\n\n  exports.Alert = Alert;\n  exports.Button = Button;\n  exports.Carousel = Carousel;\n  exports.Collapse = Collapse;\n  exports.Dropdown = Dropdown;\n  exports.Modal = Modal;\n  exports.Popover = Popover;\n  exports.Scrollspy = ScrollSpy;\n  exports.Tab = Tab;\n  exports.Toast = Toast;\n  exports.Tooltip = Tooltip;\n  exports.Util = Util;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=bootstrap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap/dist/js/bootstrap.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = __webpack_require__.g.TYPED_ARRAY_SUPPORT !== undefined\n  ? __webpack_require__.g.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXOztBQUVwQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7O0FBRXBCO0FBQ0E7QUFDQSxTQUFTLFVBQVU7O0FBRW5CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz9lYmMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ ((module) => {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2I2OGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.7.1\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-08-28T13:37Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar version = \"3.7.1\",\n\n\trhtmlSuffix = /HTML$/i,\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\n\t// Retrieve the text value of an array of DOM nodes\n\ttext: function( elem ) {\n\t\tvar node,\n\t\t\tret = \"\",\n\t\t\ti = 0,\n\t\t\tnodeType = elem.nodeType;\n\n\t\tif ( !nodeType ) {\n\n\t\t\t// If no nodeType, this is expected to be an array\n\t\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t\t// Do not traverse comment nodes\n\t\t\t\tret += jQuery.text( node );\n\t\t\t}\n\t\t}\n\t\tif ( nodeType === 1 || nodeType === 11 ) {\n\t\t\treturn elem.textContent;\n\t\t}\n\t\tif ( nodeType === 9 ) {\n\t\t\treturn elem.documentElement.textContent;\n\t\t}\n\t\tif ( nodeType === 3 || nodeType === 4 ) {\n\t\t\treturn elem.nodeValue;\n\t\t}\n\n\t\t// Do not include comment or processing instruction nodes\n\n\t\treturn ret;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tisXMLDoc: function( elem ) {\n\t\tvar namespace = elem && elem.namespaceURI,\n\t\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t\t// Assume HTML when documentElement doesn't yet exist, such as inside\n\t\t// document fragments.\n\t\treturn !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar pop = arr.pop;\n\n\nvar sort = arr.sort;\n\n\nvar splice = arr.splice;\n\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n// Note: an element does not contain itself\njQuery.contains = function( a, b ) {\n\tvar bup = b && b.parentNode;\n\n\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE doesn't have `contains` on SVG.\n\t\ta.contains ?\n\t\t\ta.contains( bup ) :\n\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t) );\n};\n\n\n\n\n// CSS string/identifier serialization\n// https://drafts.csswg.org/cssom/#common-serializing-idioms\nvar rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n\nfunction fcssescape( ch, asCodePoint ) {\n\tif ( asCodePoint ) {\n\n\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\tif ( ch === \"\\0\" ) {\n\t\t\treturn \"\\uFFFD\";\n\t\t}\n\n\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t}\n\n\t// Other potentially-special ASCII characters get backslash-escaped\n\treturn \"\\\\\" + ch;\n}\n\njQuery.escapeSelector = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\n\n\n\nvar preferredDoc = document,\n\tpushNative = push;\n\n( function() {\n\nvar i,\n\tExpr,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\tpush = pushNative,\n\n\t// Local document vars\n\tdocument,\n\tdocumentElement,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\tmatches,\n\n\t// Instance-specific data\n\texpando = jQuery.expando,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|\" +\n\t\t\"loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trleadingCombinator = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" +\n\t\twhitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\tID: new RegExp( \"^#(\" + identifier + \")\" ),\n\t\tCLASS: new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\tTAG: new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\tATTR: new RegExp( \"^\" + attributes ),\n\t\tPSEUDO: new RegExp( \"^\" + pseudos ),\n\t\tCHILD: new RegExp(\n\t\t\t\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\tbool: new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\tneedsContext: new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\tif ( nonHex ) {\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\treturn nonHex;\n\t\t}\n\n\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t// Support: IE <=11+\n\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t// surrogate pair\n\t\treturn high < 0 ?\n\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes; see `setDocument`.\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE/Edge.\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && nodeName( elem, \"fieldset\" );\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android <=4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = {\n\t\tapply: function( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t},\n\t\tcall: function( target ) {\n\t\t\tpushNative.apply( target, slice.call( arguments, 1 ) );\n\t\t}\n\t};\n}\n\nfunction find( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tfind.contains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( !nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when\n\t\t\t\t\t// strict-comparing two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( newContext != context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = jQuery.escapeSelector( nid );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrimCSS, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties\n\t\t// (see https://github.com/jquery/sizzle/issues/157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by jQuery selector module\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn nodeName( elem, \"input\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\treturn ( nodeName( elem, \"input\" ) || nodeName( elem, \"button\" ) ) &&\n\t\t\telem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11+\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a jQuery selector context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [node] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nfunction setDocument( node ) {\n\tvar subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocumentElement = document.documentElement;\n\tdocumentIsHTML = !jQuery.isXMLDoc( document );\n\n\t// Support: iOS 7 only, IE 9 - 11+\n\t// Older browsers didn't support unprefixed `matches`.\n\tmatches = documentElement.matches ||\n\t\tdocumentElement.webkitMatchesSelector ||\n\t\tdocumentElement.msMatchesSelector;\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors\n\t// (see trac-13936).\n\t// Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,\n\t// all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.\n\tif ( documentElement.msMatchesSelector &&\n\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tpreferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t\tsubWindow.addEventListener( \"unload\", unloadHandler );\n\t}\n\n\t// Support: IE <10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocumentElement.appendChild( el ).id = jQuery.expando;\n\t\treturn !document.getElementsByName ||\n\t\t\t!document.getElementsByName( jQuery.expando ).length;\n\t} );\n\n\t// Support: IE 9 only\n\t// Check to see if it's possible to do matchesSelector\n\t// on a disconnected node.\n\tsupport.disconnectedMatch = assert( function( el ) {\n\t\treturn matches.call( el, \"*\" );\n\t} );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// IE/Edge don't support the :scope pseudo-class.\n\tsupport.scope = assert( function() {\n\t\treturn document.querySelectorAll( \":scope\" );\n\t} );\n\n\t// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\n\t// Make sure the `:has()` argument is parsed unforgivingly.\n\t// We include `*` in the test to detect buggy implementations that are\n\t// _selectively_ forgiving (specifically when the list includes at least\n\t// one valid selector).\n\t// Note that we treat complete lack of support for `:has()` as if it were\n\t// spec-compliant support, which is fine because use of `:has()` in such\n\t// environments will fail in the qSA path and fall back to jQuery traversal\n\t// anyway.\n\tsupport.cssHas = assert( function() {\n\t\ttry {\n\t\t\tdocument.querySelector( \":has(*,:jqfake)\" );\n\t\t\treturn false;\n\t\t} catch ( e ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter.ID = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter.ID =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find.ID = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find.TAG = function( tag, context ) {\n\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t// DocumentFragment nodes don't have gEBTN\n\t\t} else {\n\t\t\treturn context.querySelectorAll( tag );\n\t\t}\n\t};\n\n\t// Class\n\tExpr.find.CLASS = function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\trbuggyQSA = [];\n\n\t// Build QSA regex\n\t// Regex strategy adopted from Diego Perini\n\tassert( function( el ) {\n\n\t\tvar input;\n\n\t\tdocumentElement.appendChild( el ).innerHTML =\n\t\t\t\"<a id='\" + expando + \"' href='' disabled='disabled'></a>\" +\n\t\t\t\"<select id='\" + expando + \"-\\r\\\\' disabled='disabled'>\" +\n\t\t\t\"<option selected=''></option></select>\";\n\n\t\t// Support: iOS <=7 - 8 only\n\t\t// Boolean attributes and \"value\" are not treated correctly in some XML documents\n\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t}\n\n\t\t// Support: iOS <=7 - 8 only\n\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\trbuggyQSA.push( \"~=\" );\n\t\t}\n\n\t\t// Support: iOS 8 only\n\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t}\n\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\trbuggyQSA.push( \":checked\" );\n\t\t}\n\n\t\t// Support: Windows 8 Native Apps\n\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t// Support: IE 9 - 11+\n\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n\t\t// In some of the document kinds, these selectors wouldn't work natively.\n\t\t// This is probably OK but for backwards compatibility we want to maintain\n\t\t// handling them through jQuery traversal in jQuery 3.x.\n\t\tdocumentElement.appendChild( el ).disabled = true;\n\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t}\n\n\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t// Adding a temporary attribute to the document before the selection works\n\t\t// around the issue.\n\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\tinput = document.createElement( \"input\" );\n\t\tinput.setAttribute( \"name\", \"\" );\n\t\tel.appendChild( input );\n\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t}\n\t} );\n\n\tif ( !support.cssHas ) {\n\n\t\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t\t// Our regular `try-catch` mechanism fails to detect natively-unsupported\n\t\t// pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n\t\t// in browsers that parse the `:has()` argument as a forgiving selector list.\n\t\t// https://drafts.csswg.org/selectors/#relational now requires the argument\n\t\t// to be parsed unforgivingly, but browsers have not yet fully adjusted.\n\t\trbuggyQSA.push( \":has\" );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = function( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a === document || a.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b === document || b.ownerDocument == preferredDoc &&\n\t\t\t\tfind.contains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t};\n\n\treturn document;\n}\n\nfind.matches = function( expr, elements ) {\n\treturn find( expr, null, null, elements );\n};\n\nfind.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn find( expr, document, null, [ elem ] ).length > 0;\n};\n\nfind.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn jQuery.contains( context, elem );\n};\n\n\nfind.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (see trac-13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\tif ( val !== undefined ) {\n\t\treturn val;\n\t}\n\n\treturn elem.getAttribute( name );\n};\n\nfind.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\njQuery.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\t//\n\t// Support: Android <=4.0+\n\t// Testing for detecting duplicates is unpredictable so instead assume we can't\n\t// depend on duplicate detection in all browsers without a stable sort.\n\thasDuplicate = !support.sortStable;\n\tsortInput = !support.sortStable && slice.call( results, 0 );\n\tsort.call( results, sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tsplice.call( results, duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\njQuery.fn.uniqueSort = function() {\n\treturn this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );\n};\n\nExpr = jQuery.expr = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\tATTR: function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || \"\" )\n\t\t\t\t.replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\tCHILD: function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" )\n\t\t\t\t);\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tfind.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\tPSEUDO: function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr.CHILD.test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\tTAG: function( nodeNameSelector ) {\n\t\t\tvar expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn nodeName( elem, expectedNodeName );\n\t\t\t\t};\n\t\t},\n\n\t\tCLASS: function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace + \")\" + className +\n\t\t\t\t\t\"(\" + whitespace + \"|$)\" ) ) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\tATTR: function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = find.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\tif ( operator === \"=\" ) {\n\t\t\t\t\treturn result === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"!=\" ) {\n\t\t\t\t\treturn result !== check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"^=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) === 0;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"*=\" ) {\n\t\t\t\t\treturn check && result.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"$=\" ) {\n\t\t\t\t\treturn check && result.slice( -check.length ) === check;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"~=\" ) {\n\t\t\t\t\treturn ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" )\n\t\t\t\t\t\t.indexOf( check ) > -1;\n\t\t\t\t}\n\t\t\t\tif ( operator === \"|=\" ) {\n\t\t\t\t\treturn result === check || result.slice( 0, check.length + 1 ) === check + \"-\";\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t};\n\t\t},\n\n\t\tCHILD: function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\t\t\t\t\t\t\touterCache = parent[ expando ] || ( parent[ expando ] = {} );\n\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\t\t\t\t\t\t\t\tcache = outerCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnodeName( node, name ) :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\t\t\t\t\t\t\t\t\t\t\touterCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\tPSEUDO: function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// https://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tfind.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as jQuery does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf.call( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\tnot: markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrimCSS, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element\n\t\t\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\thas: markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn find( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\tcontains: markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// https://www.w3.org/TR/selectors/#lang-pseudo\n\t\tlang: markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tfind.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\ttarget: function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\troot: function( elem ) {\n\t\t\treturn elem === documentElement;\n\t\t},\n\n\t\tfocus: function( elem ) {\n\t\t\treturn elem === safeActiveElement() &&\n\t\t\t\tdocument.hasFocus() &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\tenabled: createDisabledPseudo( false ),\n\t\tdisabled: createDisabledPseudo( true ),\n\n\t\tchecked: function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\treturn ( nodeName( elem, \"input\" ) && !!elem.checked ) ||\n\t\t\t\t( nodeName( elem, \"option\" ) && !!elem.selected );\n\t\t},\n\n\t\tselected: function( elem ) {\n\n\t\t\t// Support: IE <=11+\n\t\t\t// Accessing the selectedIndex property\n\t\t\t// forces the browser to treat the default option as\n\t\t\t// selected when in an optgroup.\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\tempty: function( elem ) {\n\n\t\t\t// https://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tparent: function( elem ) {\n\t\t\treturn !Expr.pseudos.empty( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\theader: function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\tinput: function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\tbutton: function( elem ) {\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"button\" ||\n\t\t\t\tnodeName( elem, \"button\" );\n\t\t},\n\n\t\ttext: function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn nodeName( elem, \"input\" ) && elem.type === \"text\" &&\n\n\t\t\t\t// Support: IE <10 only\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear\n\t\t\t\t// with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\tfirst: createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\tlast: createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\teq: createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\teven: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\todd: createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tlt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i;\n\n\t\t\tif ( argument < 0 ) {\n\t\t\t\ti = argument + length;\n\t\t\t} else if ( argument > length ) {\n\t\t\t\ti = length;\n\t\t\t} else {\n\t\t\t\ti = argument;\n\t\t\t}\n\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\tgt: createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos.nth = Expr.pseudos.eq;\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\nfunction tokenize( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rleadingCombinator.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrimCSS, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\tif ( parseOnly ) {\n\t\treturn soFar.length;\n\t}\n\n\treturn soFar ?\n\t\tfind.error( selector ) :\n\n\t\t// Cache the tokens\n\t\ttokenCache( selector, groups ).slice( 0 );\n}\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\tif ( skip && nodeName( elem, skip ) ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = outerCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\touterCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tfind( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem, matcherOut,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed ||\n\t\t\t\tmultipleContexts( selector || \"*\",\n\t\t\t\t\tcontext.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems;\n\n\t\tif ( matcher ) {\n\n\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter\n\t\t\t// or preexisting results,\n\t\t\tmatcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults;\n\n\t\t\t// Find primary matches\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t} else {\n\t\t\tmatcherOut = matcherIn;\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf.call( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tvar ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element\n\t\t\t// (see https://github.com/jquery/sizzle/issues/299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 )\n\t\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrimCSS, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find.TAG( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: iOS <=7 - 9 only\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching\n\t\t\t// elements by id. (see trac-14142)\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tpush.call( results, elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tjQuery.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\nfunction compile( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n}\n\n/**\n * A low-level selection function that works with jQuery's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with jQuery selector compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nfunction select( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find.ID(\n\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\tcontext\n\t\t\t) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) &&\n\t\t\t\t\t\ttestContext( context.parentNode ) || context\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n}\n\n// One-time assignments\n\n// Support: Android <=4.0 - 4.1+\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Android <=4.0 - 4.1+\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\njQuery.find = find;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.unique = jQuery.uniqueSort;\n\n// These have always been private, but they used to be documented as part of\n// Sizzle so let's maintain them for now for backwards compatibility purposes.\nfind.compile = compile;\nfind.select = select;\nfind.setDocument = setDocument;\nfind.tokenize = tokenize;\n\nfind.escape = jQuery.escapeSelector;\nfind.getText = jQuery.text;\nfind.isXML = jQuery.isXMLDoc;\nfind.selectors = jQuery.expr;\nfind.support = jQuery.support;\nfind.uniqueSort = jQuery.uniqueSort;\n\n\t/* eslint-enable */\n\n} )();\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to jQuery#find\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.error );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the error, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getErrorHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getErrorHook();\n\n\t\t\t\t\t\t\t\t// The deprecated alias of the above. While the name suggests\n\t\t\t\t\t\t\t\t// returning the stack, not an error instance, jQuery just passes\n\t\t\t\t\t\t\t\t// it directly to `console.warn` so both will work; an instance\n\t\t\t\t\t\t\t\t// just better cooperates with source maps.\n\t\t\t\t\t\t\t\t} else if ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.error = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\n// captured before the async barrier to get the original error cause\n// which may otherwise be hidden.\njQuery.Deferred.exceptionHook = function( error, asyncError ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message,\n\t\t\terror.stack, asyncError );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", true );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, isSetup ) {\n\n\t// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !isSetup ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\tif ( !saved ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tdataPriv.set( this, type, false );\n\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering\n\t\t\t\t// the native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, jQuery.event.trigger(\n\t\t\t\t\tsaved[ 0 ],\n\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\tthis\n\t\t\t\t) );\n\n\t\t\t\t// Abort handling of the native event by all jQuery handlers while allowing\n\t\t\t\t// native handlers on the same element to run. On target, this is achieved\n\t\t\t\t// by stopping immediate propagation just on the jQuery event. However,\n\t\t\t\t// the native event is re-wrapped by a jQuery one on each level of the\n\t\t\t\t// propagation so the only way to stop it for jQuery is to stop it for\n\t\t\t\t// everyone via native `stopPropagation()`. This is not a problem for\n\t\t\t\t// focus/blur which don't bubble, but it does also stop click on checkboxes\n\t\t\t\t// and radios. We accept this limitation.\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.isImmediatePropagationStopped = returnTrue;\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\n\tfunction focusMappedHandler( nativeEvent ) {\n\t\tif ( document.documentMode ) {\n\n\t\t\t// Support: IE 11+\n\t\t\t// Attach a single focusin/focusout handler on the document while someone wants\n\t\t\t// focus/blur. This is because the former are synchronous in IE while the latter\n\t\t\t// are async. In other browsers, all those handlers are invoked synchronously.\n\n\t\t\t// `handle` from private data would already wrap the event, but we need\n\t\t\t// to change the `type` here.\n\t\t\tvar handle = dataPriv.get( this, \"handle\" ),\n\t\t\t\tevent = jQuery.event.fix( nativeEvent );\n\t\t\tevent.type = nativeEvent.type === \"focusin\" ? \"focus\" : \"blur\";\n\t\t\tevent.isSimulated = true;\n\n\t\t\t// First, handle focusin/focusout\n\t\t\thandle( nativeEvent );\n\n\t\t\t// ...then, handle focus/blur\n\t\t\t//\n\t\t\t// focus/blur don't bubble while focusin/focusout do; simulate the former by only\n\t\t\t// invoking the handler at the lower level.\n\t\t\tif ( event.target === event.currentTarget ) {\n\n\t\t\t\t// The setup part calls `leverageNative`, which, in turn, calls\n\t\t\t\t// `jQuery.event.add`, so event handle will already have been set\n\t\t\t\t// by this point.\n\t\t\t\thandle( event );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// For non-IE browsers, attach a single capturing handler on the document\n\t\t\t// while someone wants focusin/focusout.\n\t\t\tjQuery.event.simulate( delegateType, nativeEvent.target,\n\t\t\t\tjQuery.event.fix( nativeEvent ) );\n\t\t}\n\t}\n\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\tvar attaches;\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, true );\n\n\t\t\tif ( document.documentMode ) {\n\n\t\t\t\t// Support: IE 9 - 11+\n\t\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\t\tattaches = dataPriv.get( this, delegateType );\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t}\n\t\t\t\tdataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );\n\t\t\t} else {\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar attaches;\n\n\t\t\tif ( document.documentMode ) {\n\t\t\t\tattaches = dataPriv.get( this, delegateType ) - 1;\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t\tdataPriv.remove( this, delegateType );\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.set( this, delegateType, attaches );\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Return false to indicate standard teardown should be applied\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\t//\n\t// Support: IE 9 - 11+\n\t// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\n\t// attach a single handler for both events in IE.\n\tjQuery.event.special[ delegateType ] = {\n\t\tsetup: function() {\n\n\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType );\n\n\t\t\t// Support: IE 9 - 11+\n\t\t\t// We use the same native handler for focusin & focus (and focusout & blur)\n\t\t\t// so we need to coordinate setup & teardown parts between those events.\n\t\t\t// Use `delegateType` as the key as `type` is already used by `leverageNative`.\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.addEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.addEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );\n\t\t},\n\t\tteardown: function() {\n\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\tdataHolder = document.documentMode ? this : doc,\n\t\t\t\tattaches = dataPriv.get( dataHolder, delegateType ) - 1;\n\n\t\t\tif ( !attaches ) {\n\t\t\t\tif ( document.documentMode ) {\n\t\t\t\t\tthis.removeEventListener( delegateType, focusMappedHandler );\n\t\t\t\t} else {\n\t\t\t\t\tdoc.removeEventListener( type, focusMappedHandler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( dataHolder, delegateType );\n\t\t\t} else {\n\t\t\t\tdataPriv.set( dataHolder, delegateType, attaches );\n\t\t\t}\n\t\t}\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Re-enable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew jQuery#find here for performance reasons:\n\t\t\t// https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"box-sizing:content-box;border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is `display: block`\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0,\n\t\tmarginDelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\t// Count margin delta separately to only add it after scroll gutter adjustment.\n\t\t// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\n\t\tif ( box === \"margin\" ) {\n\t\t\tmarginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta + marginDelta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\tanimationIterationCount: true,\n\t\taspectRatio: true,\n\t\tborderImageSlice: true,\n\t\tcolumnCount: true,\n\t\tflexGrow: true,\n\t\tflexShrink: true,\n\t\tfontWeight: true,\n\t\tgridArea: true,\n\t\tgridColumn: true,\n\t\tgridColumnEnd: true,\n\t\tgridColumnStart: true,\n\t\tgridRow: true,\n\t\tgridRowEnd: true,\n\t\tgridRowStart: true,\n\t\tlineHeight: true,\n\t\topacity: true,\n\t\torder: true,\n\t\torphans: true,\n\t\tscale: true,\n\t\twidows: true,\n\t\tzIndex: true,\n\t\tzoom: true,\n\n\t\t// SVG-related\n\t\tfillOpacity: true,\n\t\tfloodOpacity: true,\n\t\tstopOpacity: true,\n\t\tstrokeMiterlimit: true,\n\t\tstrokeOpacity: true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this\n\t\t\t.on( \"mouseenter\", fnOver )\n\t\t\t.on( \"mouseleave\", fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/laravel-echo/dist/echo.js":
/*!************************************************!*\
  !*** ./node_modules/laravel-echo/dist/echo.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Channel: () => (/* binding */ Channel),\n/* harmony export */   Connector: () => (/* binding */ Connector),\n/* harmony export */   EventFormatter: () => (/* binding */ EventFormatter),\n/* harmony export */   \"default\": () => (/* binding */ Echo)\n/* harmony export */ });\n/* provided dependency */ var jQuery = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\n/**\r\n * This class represents a basic channel.\r\n */\nvar Channel = /*#__PURE__*/function () {\n  function Channel() {\n    _classCallCheck(this, Channel);\n  }\n\n  _createClass(Channel, [{\n    key: \"listenForWhisper\",\n    value:\n    /**\r\n     * Listen for a whisper event on the channel instance.\r\n     */\n    function listenForWhisper(event, callback) {\n      return this.listen('.client-' + event, callback);\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"notification\",\n    value: function notification(callback) {\n      return this.listen('.Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated', callback);\n    }\n    /**\r\n     * Stop listening for a whisper event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListeningForWhisper\",\n    value: function stopListeningForWhisper(event, callback) {\n      return this.stopListening('.client-' + event, callback);\n    }\n  }]);\n\n  return Channel;\n}();\n\n/**\r\n * Event name formatter\r\n */\nvar EventFormatter = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function EventFormatter(namespace) {\n    _classCallCheck(this, EventFormatter);\n\n    this.namespace = namespace; //\n  }\n  /**\r\n   * Format the given event name.\r\n   */\n\n\n  _createClass(EventFormatter, [{\n    key: \"format\",\n    value: function format(event) {\n      if (['.', '\\\\'].includes(event.charAt(0))) {\n        return event.substring(1);\n      } else if (this.namespace) {\n        event = this.namespace + '.' + event;\n      }\n\n      return event.replace(/\\./g, '\\\\');\n    }\n    /**\r\n     * Set the event namespace.\r\n     */\n\n  }, {\n    key: \"setNamespace\",\n    value: function setNamespace(value) {\n      this.namespace = value;\n    }\n  }]);\n\n  return EventFormatter;\n}();\n\n/**\r\n * This class represents a Pusher channel.\r\n */\n\nvar PusherChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(PusherChannel, _Channel);\n\n  var _super = _createSuper(PusherChannel);\n\n  /**\r\n   * Create a new class instance.\r\n   */\n  function PusherChannel(pusher, name, options) {\n    var _this;\n\n    _classCallCheck(this, PusherChannel);\n\n    _this = _super.call(this);\n    _this.name = name;\n    _this.pusher = pusher;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\r\n   * Subscribe to a Pusher channel.\r\n   */\n\n\n  _createClass(PusherChannel, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.subscription = this.pusher.subscribe(this.name);\n    }\n    /**\r\n     * Unsubscribe from a Pusher channel.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.pusher.unsubscribe(this.name);\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Listen for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"listenToAll\",\n    value: function listenToAll(callback) {\n      var _this2 = this;\n\n      this.subscription.bind_global(function (event, data) {\n        if (event.startsWith('pusher:')) {\n          return;\n        }\n\n        var namespace = _this2.options.namespace.replace(/\\./g, '\\\\');\n\n        var formattedEvent = event.startsWith(namespace) ? event.substring(namespace.length + 1) : '.' + event;\n        callback(formattedEvent, data);\n      });\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      if (callback) {\n        this.subscription.unbind(this.eventFormatter.format(event), callback);\n      } else {\n        this.subscription.unbind(this.eventFormatter.format(event));\n      }\n\n      return this;\n    }\n    /**\r\n     * Stop listening for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListeningToAll\",\n    value: function stopListeningToAll(callback) {\n      if (callback) {\n        this.subscription.unbind_global(callback);\n      } else {\n        this.subscription.unbind_global();\n      }\n\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      this.on('pusher:subscription_succeeded', function () {\n        callback();\n      });\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      this.on('pusher:subscription_error', function (status) {\n        callback(status);\n      });\n      return this;\n    }\n    /**\r\n     * Bind a channel to an event.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.subscription.bind(event, callback);\n      return this;\n    }\n  }]);\n\n  return PusherChannel;\n}(Channel);\n\n/**\r\n * This class represents a Pusher private channel.\r\n */\n\nvar PusherPrivateChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherPrivateChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherPrivateChannel);\n\n  function PusherPrivateChannel() {\n    _classCallCheck(this, PusherPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherPrivateChannel, [{\n    key: \"whisper\",\n    value:\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n    function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherPrivateChannel;\n}(PusherChannel);\n\n/**\r\n * This class represents a Pusher private channel.\r\n */\n\nvar PusherEncryptedPrivateChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherEncryptedPrivateChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherEncryptedPrivateChannel);\n\n  function PusherEncryptedPrivateChannel() {\n    _classCallCheck(this, PusherEncryptedPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherEncryptedPrivateChannel, [{\n    key: \"whisper\",\n    value:\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n    function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n  }]);\n\n  return PusherEncryptedPrivateChannel;\n}(PusherChannel);\n\n/**\r\n * This class represents a Pusher presence channel.\r\n */\n\nvar PusherPresenceChannel = /*#__PURE__*/function (_PusherChannel) {\n  _inherits(PusherPresenceChannel, _PusherChannel);\n\n  var _super = _createSuper(PusherPresenceChannel);\n\n  function PusherPresenceChannel() {\n    _classCallCheck(this, PusherPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PusherPresenceChannel, [{\n    key: \"here\",\n    value:\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    function here(callback) {\n      this.on('pusher:subscription_succeeded', function (data) {\n        callback(Object.keys(data.members).map(function (k) {\n          return data.members[k];\n        }));\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      this.on('pusher:member_added', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      this.pusher.channels.channels[this.name].trigger(\"client-\".concat(eventName), data);\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      this.on('pusher:member_removed', function (member) {\n        callback(member.info);\n      });\n      return this;\n    }\n  }]);\n\n  return PusherPresenceChannel;\n}(PusherChannel);\n\n/**\r\n * This class represents a Socket.io channel.\r\n */\n\nvar SocketIoChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(SocketIoChannel, _Channel);\n\n  var _super = _createSuper(SocketIoChannel);\n\n  /**\r\n   * Create a new class instance.\r\n   */\n  function SocketIoChannel(socket, name, options) {\n    var _this;\n\n    _classCallCheck(this, SocketIoChannel);\n\n    _this = _super.call(this);\n    /**\r\n     * The event callbacks applied to the socket.\r\n     */\n\n    _this.events = {};\n    /**\r\n     * User supplied callbacks for events on this channel.\r\n     */\n\n    _this.listeners = {};\n    _this.name = name;\n    _this.socket = socket;\n    _this.options = options;\n    _this.eventFormatter = new EventFormatter(_this.options.namespace);\n\n    _this.subscribe();\n\n    return _this;\n  }\n  /**\r\n   * Subscribe to a Socket.io channel.\r\n   */\n\n\n  _createClass(SocketIoChannel, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      this.socket.emit('subscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\r\n     * Unsubscribe from channel and ubind event callbacks.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.unbind();\n      this.socket.emit('unsubscribe', {\n        channel: this.name,\n        auth: this.options.auth || {}\n      });\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      this.on(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      this.unbindEvent(this.eventFormatter.format(event), callback);\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      this.on('connect', function (socket) {\n        callback(socket);\n      });\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime an error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      return this;\n    }\n    /**\r\n     * Bind the channel's socket to an event and store the callback.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var _this2 = this;\n\n      this.listeners[event] = this.listeners[event] || [];\n\n      if (!this.events[event]) {\n        this.events[event] = function (channel, data) {\n          if (_this2.name === channel && _this2.listeners[event]) {\n            _this2.listeners[event].forEach(function (cb) {\n              return cb(data);\n            });\n          }\n        };\n\n        this.socket.on(event, this.events[event]);\n      }\n\n      this.listeners[event].push(callback);\n      return this;\n    }\n    /**\r\n     * Unbind the channel's socket from all stored event callbacks.\r\n     */\n\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _this3 = this;\n\n      Object.keys(this.events).forEach(function (event) {\n        _this3.unbindEvent(event);\n      });\n    }\n    /**\r\n     * Unbind the listeners for the given event.\r\n     */\n\n  }, {\n    key: \"unbindEvent\",\n    value: function unbindEvent(event, callback) {\n      this.listeners[event] = this.listeners[event] || [];\n\n      if (callback) {\n        this.listeners[event] = this.listeners[event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n\n      if (!callback || this.listeners[event].length === 0) {\n        if (this.events[event]) {\n          this.socket.removeListener(event, this.events[event]);\n          delete this.events[event];\n        }\n\n        delete this.listeners[event];\n      }\n    }\n  }]);\n\n  return SocketIoChannel;\n}(Channel);\n\n/**\r\n * This class represents a Socket.io private channel.\r\n */\n\nvar SocketIoPrivateChannel = /*#__PURE__*/function (_SocketIoChannel) {\n  _inherits(SocketIoPrivateChannel, _SocketIoChannel);\n\n  var _super = _createSuper(SocketIoPrivateChannel);\n\n  function SocketIoPrivateChannel() {\n    _classCallCheck(this, SocketIoPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SocketIoPrivateChannel, [{\n    key: \"whisper\",\n    value:\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n    function whisper(eventName, data) {\n      this.socket.emit('client event', {\n        channel: this.name,\n        event: \"client-\".concat(eventName),\n        data: data\n      });\n      return this;\n    }\n  }]);\n\n  return SocketIoPrivateChannel;\n}(SocketIoChannel);\n\n/**\r\n * This class represents a Socket.io presence channel.\r\n */\n\nvar SocketIoPresenceChannel = /*#__PURE__*/function (_SocketIoPrivateChann) {\n  _inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);\n\n  var _super = _createSuper(SocketIoPresenceChannel);\n\n  function SocketIoPresenceChannel() {\n    _classCallCheck(this, SocketIoPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SocketIoPresenceChannel, [{\n    key: \"here\",\n    value:\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    function here(callback) {\n      this.on('presence:subscribed', function (members) {\n        callback(members.map(function (m) {\n          return m.user_info;\n        }));\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      this.on('presence:joining', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      this.socket.emit('client event', {\n        channel: this.name,\n        event: \"client-\".concat(eventName),\n        data: data\n      });\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      this.on('presence:leaving', function (member) {\n        return callback(member.user_info);\n      });\n      return this;\n    }\n  }]);\n\n  return SocketIoPresenceChannel;\n}(SocketIoPrivateChannel);\n\n/**\r\n * This class represents a null channel.\r\n */\n\nvar NullChannel = /*#__PURE__*/function (_Channel) {\n  _inherits(NullChannel, _Channel);\n\n  var _super = _createSuper(NullChannel);\n\n  function NullChannel() {\n    _classCallCheck(this, NullChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullChannel, [{\n    key: \"subscribe\",\n    value:\n    /**\r\n     * Subscribe to a channel.\r\n     */\n    function subscribe() {//\n    }\n    /**\r\n     * Unsubscribe from a channel.\r\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {//\n    }\n    /**\r\n     * Listen for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(event, callback) {\n      return this;\n    }\n    /**\r\n     * Listen for all events on the channel instance.\r\n     */\n\n  }, {\n    key: \"listenToAll\",\n    value: function listenToAll(callback) {\n      return this;\n    }\n    /**\r\n     * Stop listening for an event on the channel instance.\r\n     */\n\n  }, {\n    key: \"stopListening\",\n    value: function stopListening(event, callback) {\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime a subscription succeeds.\r\n     */\n\n  }, {\n    key: \"subscribed\",\n    value: function subscribed(callback) {\n      return this;\n    }\n    /**\r\n     * Register a callback to be called anytime an error occurs.\r\n     */\n\n  }, {\n    key: \"error\",\n    value: function error(callback) {\n      return this;\n    }\n    /**\r\n     * Bind a channel to an event.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      return this;\n    }\n  }]);\n\n  return NullChannel;\n}(Channel);\n\n/**\r\n * This class represents a null private channel.\r\n */\n\nvar NullPrivateChannel = /*#__PURE__*/function (_NullChannel) {\n  _inherits(NullPrivateChannel, _NullChannel);\n\n  var _super = _createSuper(NullPrivateChannel);\n\n  function NullPrivateChannel() {\n    _classCallCheck(this, NullPrivateChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullPrivateChannel, [{\n    key: \"whisper\",\n    value:\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n    function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n\n  return NullPrivateChannel;\n}(NullChannel);\n\n/**\r\n * This class represents a null presence channel.\r\n */\n\nvar NullPresenceChannel = /*#__PURE__*/function (_NullChannel) {\n  _inherits(NullPresenceChannel, _NullChannel);\n\n  var _super = _createSuper(NullPresenceChannel);\n\n  function NullPresenceChannel() {\n    _classCallCheck(this, NullPresenceChannel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NullPresenceChannel, [{\n    key: \"here\",\n    value:\n    /**\r\n     * Register a callback to be called anytime the member list changes.\r\n     */\n    function here(callback) {\n      return this;\n    }\n    /**\r\n     * Listen for someone joining the channel.\r\n     */\n\n  }, {\n    key: \"joining\",\n    value: function joining(callback) {\n      return this;\n    }\n    /**\r\n     * Send a whisper event to other clients in the channel.\r\n     */\n\n  }, {\n    key: \"whisper\",\n    value: function whisper(eventName, data) {\n      return this;\n    }\n    /**\r\n     * Listen for someone leaving the channel.\r\n     */\n\n  }, {\n    key: \"leaving\",\n    value: function leaving(callback) {\n      return this;\n    }\n  }]);\n\n  return NullPresenceChannel;\n}(NullChannel);\n\nvar Connector = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function Connector(options) {\n    _classCallCheck(this, Connector);\n\n    /**\r\n     * Default connector options.\r\n     */\n    this._defaultOptions = {\n      auth: {\n        headers: {}\n      },\n      authEndpoint: '/broadcasting/auth',\n      userAuthentication: {\n        endpoint: '/broadcasting/user-auth',\n        headers: {}\n      },\n      broadcaster: 'pusher',\n      csrfToken: null,\n      bearerToken: null,\n      host: null,\n      key: null,\n      namespace: 'App.Events'\n    };\n    this.setOptions(options);\n    this.connect();\n  }\n  /**\r\n   * Merge the custom options with the defaults.\r\n   */\n\n\n  _createClass(Connector, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _extends(this._defaultOptions, options);\n      var token = this.csrfToken();\n\n      if (token) {\n        this.options.auth.headers['X-CSRF-TOKEN'] = token;\n        this.options.userAuthentication.headers['X-CSRF-TOKEN'] = token;\n      }\n\n      token = this.options.bearerToken;\n\n      if (token) {\n        this.options.auth.headers['Authorization'] = 'Bearer ' + token;\n        this.options.userAuthentication.headers['Authorization'] = 'Bearer ' + token;\n      }\n\n      return options;\n    }\n    /**\r\n     * Extract the CSRF token from the page.\r\n     */\n\n  }, {\n    key: \"csrfToken\",\n    value: function csrfToken() {\n      var selector;\n\n      if (typeof window !== 'undefined' && window['Laravel'] && window['Laravel'].csrfToken) {\n        return window['Laravel'].csrfToken;\n      } else if (this.options.csrfToken) {\n        return this.options.csrfToken;\n      } else if (typeof document !== 'undefined' && typeof document.querySelector === 'function' && (selector = document.querySelector('meta[name=\"csrf-token\"]'))) {\n        return selector.getAttribute('content');\n      }\n\n      return null;\n    }\n  }]);\n\n  return Connector;\n}();\n\n/**\r\n * This class creates a connector to Pusher.\r\n */\n\nvar PusherConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(PusherConnector, _Connector);\n\n  var _super = _createSuper(PusherConnector);\n\n  function PusherConnector() {\n    var _this;\n\n    _classCallCheck(this, PusherConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh Pusher connection.\r\n   */\n\n\n  _createClass(PusherConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      if (typeof this.options.client !== 'undefined') {\n        this.pusher = this.options.client;\n      } else if (this.options.Pusher) {\n        this.pusher = new this.options.Pusher(this.options.key, this.options);\n      } else {\n        this.pusher = new Pusher(this.options.key, this.options);\n      }\n    }\n    /**\r\n     * Sign in the user via Pusher user authentication (https://pusher.com/docs/channels/using_channels/user-authentication/).\r\n     */\n\n  }, {\n    key: \"signin\",\n    value: function signin() {\n      this.pusher.signin();\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new PusherChannel(this.pusher, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new PusherPrivateChannel(this.pusher, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivateChannel\",\n    value: function encryptedPrivateChannel(name) {\n      if (!this.channels['private-encrypted-' + name]) {\n        this.channels['private-encrypted-' + name] = new PusherEncryptedPrivateChannel(this.pusher, 'private-encrypted-' + name, this.options);\n      }\n\n      return this.channels['private-encrypted-' + name];\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new PusherPresenceChannel(this.pusher, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {\n      var _this2 = this;\n\n      var channels = [name, 'private-' + name, 'private-encrypted-' + name, 'presence-' + name];\n      channels.forEach(function (name, index) {\n        _this2.leaveChannel(name);\n      });\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.pusher.connection.socket_id;\n    }\n    /**\r\n     * Disconnect Pusher connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.pusher.disconnect();\n    }\n  }]);\n\n  return PusherConnector;\n}(Connector);\n\n/**\r\n * This class creates a connnector to a Socket.io server.\r\n */\n\nvar SocketIoConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(SocketIoConnector, _Connector);\n\n  var _super = _createSuper(SocketIoConnector);\n\n  function SocketIoConnector() {\n    var _this;\n\n    _classCallCheck(this, SocketIoConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh Socket.io connection.\r\n   */\n\n\n  _createClass(SocketIoConnector, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var io = this.getSocketIO();\n      this.socket = io(this.options.host, this.options);\n      this.socket.on('reconnect', function () {\n        Object.values(_this2.channels).forEach(function (channel) {\n          channel.subscribe();\n        });\n      });\n      return this.socket;\n    }\n    /**\r\n     * Get socket.io module from global scope or options.\r\n     */\n\n  }, {\n    key: \"getSocketIO\",\n    value: function getSocketIO() {\n      if (typeof this.options.client !== 'undefined') {\n        return this.options.client;\n      }\n\n      if (typeof io !== 'undefined') {\n        return io;\n      }\n\n      throw new Error('Socket.io client not found. Should be globally available or passed via options.client');\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return this.channel(name).listen(event, callback);\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      if (!this.channels[name]) {\n        this.channels[name] = new SocketIoChannel(this.socket, name, this.options);\n      }\n\n      return this.channels[name];\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      if (!this.channels['private-' + name]) {\n        this.channels['private-' + name] = new SocketIoPrivateChannel(this.socket, 'private-' + name, this.options);\n      }\n\n      return this.channels['private-' + name];\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      if (!this.channels['presence-' + name]) {\n        this.channels['presence-' + name] = new SocketIoPresenceChannel(this.socket, 'presence-' + name, this.options);\n      }\n\n      return this.channels['presence-' + name];\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {\n      var _this3 = this;\n\n      var channels = [name, 'private-' + name, 'presence-' + name];\n      channels.forEach(function (name) {\n        _this3.leaveChannel(name);\n      });\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {\n      if (this.channels[name]) {\n        this.channels[name].unsubscribe();\n        delete this.channels[name];\n      }\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.socket.id;\n    }\n    /**\r\n     * Disconnect Socketio connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }]);\n\n  return SocketIoConnector;\n}(Connector);\n\n/**\r\n * This class creates a null connector.\r\n */\n\nvar NullConnector = /*#__PURE__*/function (_Connector) {\n  _inherits(NullConnector, _Connector);\n\n  var _super = _createSuper(NullConnector);\n\n  function NullConnector() {\n    var _this;\n\n    _classCallCheck(this, NullConnector);\n\n    _this = _super.apply(this, arguments);\n    /**\r\n     * All of the subscribed channel names.\r\n     */\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\r\n   * Create a fresh connection.\r\n   */\n\n\n  _createClass(NullConnector, [{\n    key: \"connect\",\n    value: function connect() {//\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(name, event, callback) {\n      return new NullChannel();\n    }\n    /**\r\n     * Get a channel instance by name.\r\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      return new NullChannel();\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"privateChannel\",\n    value: function privateChannel(name) {\n      return new NullPrivateChannel();\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivateChannel\",\n    value: function encryptedPrivateChannel(name) {\n      return new NullPrivateChannel();\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"presenceChannel\",\n    value: function presenceChannel(name) {\n      return new NullPresenceChannel();\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(name) {//\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(name) {//\n    }\n    /**\r\n     * Get the socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return 'fake-socket-id';\n    }\n    /**\r\n     * Disconnect the connection.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {//\n    }\n  }]);\n\n  return NullConnector;\n}(Connector);\n\n/**\r\n * This class is the primary API for interacting with broadcasting.\r\n */\n\nvar Echo = /*#__PURE__*/function () {\n  /**\r\n   * Create a new class instance.\r\n   */\n  function Echo(options) {\n    _classCallCheck(this, Echo);\n\n    this.options = options;\n    this.connect();\n\n    if (!this.options.withoutInterceptors) {\n      this.registerInterceptors();\n    }\n  }\n  /**\r\n   * Get a channel instance by name.\r\n   */\n\n\n  _createClass(Echo, [{\n    key: \"channel\",\n    value: function channel(_channel) {\n      return this.connector.channel(_channel);\n    }\n    /**\r\n     * Create a new connection.\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.options.broadcaster == 'reverb') {\n        this.connector = new PusherConnector(_extends(_extends({}, this.options), {\n          cluster: ''\n        }));\n      } else if (this.options.broadcaster == 'pusher') {\n        this.connector = new PusherConnector(this.options);\n      } else if (this.options.broadcaster == 'socket.io') {\n        this.connector = new SocketIoConnector(this.options);\n      } else if (this.options.broadcaster == 'null') {\n        this.connector = new NullConnector(this.options);\n      } else if (typeof this.options.broadcaster == 'function') {\n        this.connector = new this.options.broadcaster(this.options);\n      } else {\n        throw new Error(\"Broadcaster \".concat(_typeof(this.options.broadcaster), \" \").concat(this.options.broadcaster, \" is not supported.\"));\n      }\n    }\n    /**\r\n     * Disconnect from the Echo server.\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.connector.disconnect();\n    }\n    /**\r\n     * Get a presence channel instance by name.\r\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(channel) {\n      return this.connector.presenceChannel(channel);\n    }\n    /**\r\n     * Leave the given channel, as well as its private and presence variants.\r\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(channel) {\n      this.connector.leave(channel);\n    }\n    /**\r\n     * Leave the given channel.\r\n     */\n\n  }, {\n    key: \"leaveChannel\",\n    value: function leaveChannel(channel) {\n      this.connector.leaveChannel(channel);\n    }\n    /**\r\n     * Leave all channels.\r\n     */\n\n  }, {\n    key: \"leaveAllChannels\",\n    value: function leaveAllChannels() {\n      for (var channel in this.connector.channels) {\n        this.leaveChannel(channel);\n      }\n    }\n    /**\r\n     * Listen for an event on a channel instance.\r\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(channel, event, callback) {\n      return this.connector.listen(channel, event, callback);\n    }\n    /**\r\n     * Get a private channel instance by name.\r\n     */\n\n  }, {\n    key: \"private\",\n    value: function _private(channel) {\n      return this.connector.privateChannel(channel);\n    }\n    /**\r\n     * Get a private encrypted channel instance by name.\r\n     */\n\n  }, {\n    key: \"encryptedPrivate\",\n    value: function encryptedPrivate(channel) {\n      return this.connector.encryptedPrivateChannel(channel);\n    }\n    /**\r\n     * Get the Socket ID for the connection.\r\n     */\n\n  }, {\n    key: \"socketId\",\n    value: function socketId() {\n      return this.connector.socketId();\n    }\n    /**\r\n     * Register 3rd party request interceptiors. These are used to automatically\r\n     * send a connections socket id to a Laravel app with a X-Socket-Id header.\r\n     */\n\n  }, {\n    key: \"registerInterceptors\",\n    value: function registerInterceptors() {\n      if (typeof Vue === 'function' && Vue.http) {\n        this.registerVueRequestInterceptor();\n      }\n\n      if (typeof axios === 'function') {\n        this.registerAxiosRequestInterceptor();\n      }\n\n      if (typeof jQuery === 'function') {\n        this.registerjQueryAjaxSetup();\n      }\n\n      if ((typeof Turbo === \"undefined\" ? \"undefined\" : _typeof(Turbo)) === 'object') {\n        this.registerTurboRequestInterceptor();\n      }\n    }\n    /**\r\n     * Register a Vue HTTP interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerVueRequestInterceptor\",\n    value: function registerVueRequestInterceptor() {\n      var _this = this;\n\n      Vue.http.interceptors.push(function (request, next) {\n        if (_this.socketId()) {\n          request.headers.set('X-Socket-ID', _this.socketId());\n        }\n\n        next();\n      });\n    }\n    /**\r\n     * Register an Axios HTTP interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerAxiosRequestInterceptor\",\n    value: function registerAxiosRequestInterceptor() {\n      var _this2 = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this2.socketId()) {\n          config.headers['X-Socket-Id'] = _this2.socketId();\n        }\n\n        return config;\n      });\n    }\n    /**\r\n     * Register jQuery AjaxPrefilter to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerjQueryAjaxSetup\",\n    value: function registerjQueryAjaxSetup() {\n      var _this3 = this;\n\n      if (typeof jQuery.ajax != 'undefined') {\n        jQuery.ajaxPrefilter(function (options, originalOptions, xhr) {\n          if (_this3.socketId()) {\n            xhr.setRequestHeader('X-Socket-Id', _this3.socketId());\n          }\n        });\n      }\n    }\n    /**\r\n     * Register the Turbo Request interceptor to add the X-Socket-ID header.\r\n     */\n\n  }, {\n    key: \"registerTurboRequestInterceptor\",\n    value: function registerTurboRequestInterceptor() {\n      var _this4 = this;\n\n      document.addEventListener('turbo:before-fetch-request', function (event) {\n        event.detail.fetchOptions.headers['X-Socket-Id'] = _this4.socketId();\n      });\n    }\n  }]);\n\n  return Echo;\n}();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/laravel-echo/dist/echo.js\n");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popper);\n//# sourceMappingURL=popper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\n");

/***/ }),

/***/ "./node_modules/pusher-js/dist/web/pusher.js":
/*!***************************************************!*\
  !*** ./node_modules/pusher-js/dist/web/pusher.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*!\n * Pusher JavaScript Library v7.6.0\n * https://pusher.com/\n *\n * Copyright 2020, Pusher\n * Released under the MIT licence.\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_669__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_669__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_669__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_669__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_669__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_669__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_669__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_669__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_669__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_669__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_669__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_669__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_669__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_669__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_669__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_669__(__nested_webpack_require_669__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package base64 implements Base64 encoding and decoding.\n */\n// Invalid character used in decoding to indicate\n// that the character to decode is out of range of\n// alphabet and cannot be decoded.\nvar INVALID_BYTE = 256;\n/**\n * Implements standard Base64 encoding.\n *\n * Operates in constant time.\n */\nvar Coder = /** @class */ (function () {\n    // TODO(dchest): methods to encode chunk-by-chunk.\n    function Coder(_paddingCharacter) {\n        if (_paddingCharacter === void 0) { _paddingCharacter = \"=\"; }\n        this._paddingCharacter = _paddingCharacter;\n    }\n    Coder.prototype.encodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 8 + 5) / 6 | 0;\n        }\n        return (length + 2) / 3 * 4 | 0;\n    };\n    Coder.prototype.encode = function (data) {\n        var out = \"\";\n        var i = 0;\n        for (; i < data.length - 2; i += 3) {\n            var c = (data[i] << 16) | (data[i + 1] << 8) | (data[i + 2]);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            out += this._encodeByte((c >>> 1 * 6) & 63);\n            out += this._encodeByte((c >>> 0 * 6) & 63);\n        }\n        var left = data.length - i;\n        if (left > 0) {\n            var c = (data[i] << 16) | (left === 2 ? data[i + 1] << 8 : 0);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            if (left === 2) {\n                out += this._encodeByte((c >>> 1 * 6) & 63);\n            }\n            else {\n                out += this._paddingCharacter || \"\";\n            }\n            out += this._paddingCharacter || \"\";\n        }\n        return out;\n    };\n    Coder.prototype.maxDecodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 6 + 7) / 8 | 0;\n        }\n        return length / 4 * 3 | 0;\n    };\n    Coder.prototype.decodedLength = function (s) {\n        return this.maxDecodedLength(s.length - this._getPaddingLength(s));\n    };\n    Coder.prototype.decode = function (s) {\n        if (s.length === 0) {\n            return new Uint8Array(0);\n        }\n        var paddingLength = this._getPaddingLength(s);\n        var length = s.length - paddingLength;\n        var out = new Uint8Array(this.maxDecodedLength(length));\n        var op = 0;\n        var i = 0;\n        var haveBad = 0;\n        var v0 = 0, v1 = 0, v2 = 0, v3 = 0;\n        for (; i < length - 4; i += 4) {\n            v0 = this._decodeChar(s.charCodeAt(i + 0));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n            haveBad |= v2 & INVALID_BYTE;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (i < length - 1) {\n            v0 = this._decodeChar(s.charCodeAt(i));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n        }\n        if (i < length - 2) {\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            haveBad |= v2 & INVALID_BYTE;\n        }\n        if (i < length - 3) {\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (haveBad !== 0) {\n            throw new Error(\"Base64Coder: incorrect characters for decoding\");\n        }\n        return out;\n    };\n    // Standard encoding have the following encoded/decoded ranges,\n    // which we need to convert between.\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   43  47\n    //\n    // Encode 6 bits in b into a new character.\n    Coder.prototype._encodeByte = function (b) {\n        // Encoding uses constant time operations as follows:\n        //\n        // 1. Define comparison of A with B using (A - B) >>> 8:\n        //          if A > B, then result is positive integer\n        //          if A <= B, then result is 0\n        //\n        // 2. Define selection of C or 0 using bitwise AND: X & C:\n        //          if X == 0, then result is 0\n        //          if X != 0, then result is C\n        //\n        // 3. Start with the smallest comparison (b >= 0), which is always\n        //    true, so set the result to the starting ASCII value (65).\n        //\n        // 4. Continue comparing b to higher ASCII values, and selecting\n        //    zero if comparison isn't true, otherwise selecting a value\n        //    to add to result, which:\n        //\n        //          a) undoes the previous addition\n        //          b) provides new value to add\n        //\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 43);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 43) - 63 + 47);\n        return String.fromCharCode(result);\n    };\n    // Decode a character code into a byte.\n    // Must return 256 if character is out of alphabet range.\n    Coder.prototype._decodeChar = function (c) {\n        // Decoding works similar to encoding: using the same comparison\n        // function, but now it works on ranges: result is always incremented\n        // by value, but this value becomes zero if the range is not\n        // satisfied.\n        //\n        // Decoding starts with invalid value, 256, which is then\n        // subtracted when the range is satisfied. If none of the ranges\n        // apply, the function returns 256, which is then checked by\n        // the caller to throw error.\n        var result = INVALID_BYTE; // start with invalid character\n        // c == 43 (c > 42 and c < 44)\n        result += (((42 - c) & (c - 44)) >>> 8) & (-INVALID_BYTE + c - 43 + 62);\n        // c == 47 (c > 46 and c < 48)\n        result += (((46 - c) & (c - 48)) >>> 8) & (-INVALID_BYTE + c - 47 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    Coder.prototype._getPaddingLength = function (s) {\n        var paddingLength = 0;\n        if (this._paddingCharacter) {\n            for (var i = s.length - 1; i >= 0; i--) {\n                if (s[i] !== this._paddingCharacter) {\n                    break;\n                }\n                paddingLength++;\n            }\n            if (s.length < 4 || paddingLength > 2) {\n                throw new Error(\"Base64Coder: incorrect padding\");\n            }\n        }\n        return paddingLength;\n    };\n    return Coder;\n}());\nexports.Coder = Coder;\nvar stdCoder = new Coder();\nfunction encode(data) {\n    return stdCoder.encode(data);\n}\nexports.encode = encode;\nfunction decode(s) {\n    return stdCoder.decode(s);\n}\nexports.decode = decode;\n/**\n * Implements URL-safe Base64 encoding.\n * (Same as Base64, but '+' is replaced with '-', and '/' with '_').\n *\n * Operates in constant time.\n */\nvar URLSafeCoder = /** @class */ (function (_super) {\n    __extends(URLSafeCoder, _super);\n    function URLSafeCoder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // URL-safe encoding have the following encoded/decoded ranges:\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   45  95\n    //\n    URLSafeCoder.prototype._encodeByte = function (b) {\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 45);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 45) - 63 + 95);\n        return String.fromCharCode(result);\n    };\n    URLSafeCoder.prototype._decodeChar = function (c) {\n        var result = INVALID_BYTE;\n        // c == 45 (c > 44 and c < 46)\n        result += (((44 - c) & (c - 46)) >>> 8) & (-INVALID_BYTE + c - 45 + 62);\n        // c == 95 (c > 94 and c < 96)\n        result += (((94 - c) & (c - 96)) >>> 8) & (-INVALID_BYTE + c - 95 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    return URLSafeCoder;\n}(Coder));\nexports.URLSafeCoder = URLSafeCoder;\nvar urlSafeCoder = new URLSafeCoder();\nfunction encodeURLSafe(data) {\n    return urlSafeCoder.encode(data);\n}\nexports.encodeURLSafe = encodeURLSafe;\nfunction decodeURLSafe(s) {\n    return urlSafeCoder.decode(s);\n}\nexports.decodeURLSafe = decodeURLSafe;\nexports.encodedLength = function (length) {\n    return stdCoder.encodedLength(length);\n};\nexports.maxDecodedLength = function (length) {\n    return stdCoder.maxDecodedLength(length);\n};\nexports.decodedLength = function (s) {\n    return stdCoder.decodedLength(s);\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package utf8 implements UTF-8 encoding and decoding.\n */\nvar INVALID_UTF16 = \"utf8: invalid string\";\nvar INVALID_UTF8 = \"utf8: invalid source encoding\";\n/**\n * Encodes the given string into UTF-8 byte array.\n * Throws if the source string has invalid UTF-16 encoding.\n */\nfunction encode(s) {\n    // Calculate result length and allocate output array.\n    // encodedLength() also validates string and throws errors,\n    // so we don't need repeat validation here.\n    var arr = new Uint8Array(encodedLength(s));\n    var pos = 0;\n    for (var i = 0; i < s.length; i++) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            arr[pos++] = c;\n        }\n        else if (c < 0x800) {\n            arr[pos++] = 0xc0 | c >> 6;\n            arr[pos++] = 0x80 | c & 0x3f;\n        }\n        else if (c < 0xd800) {\n            arr[pos++] = 0xe0 | c >> 12;\n            arr[pos++] = 0x80 | (c >> 6) & 0x3f;\n            arr[pos++] = 0x80 | c & 0x3f;\n        }\n        else {\n            i++; // get one more character\n            c = (c & 0x3ff) << 10;\n            c |= s.charCodeAt(i) & 0x3ff;\n            c += 0x10000;\n            arr[pos++] = 0xf0 | c >> 18;\n            arr[pos++] = 0x80 | (c >> 12) & 0x3f;\n            arr[pos++] = 0x80 | (c >> 6) & 0x3f;\n            arr[pos++] = 0x80 | c & 0x3f;\n        }\n    }\n    return arr;\n}\nexports.encode = encode;\n/**\n * Returns the number of bytes required to encode the given string into UTF-8.\n * Throws if the source string has invalid UTF-16 encoding.\n */\nfunction encodedLength(s) {\n    var result = 0;\n    for (var i = 0; i < s.length; i++) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            result += 1;\n        }\n        else if (c < 0x800) {\n            result += 2;\n        }\n        else if (c < 0xd800) {\n            result += 3;\n        }\n        else if (c <= 0xdfff) {\n            if (i >= s.length - 1) {\n                throw new Error(INVALID_UTF16);\n            }\n            i++; // \"eat\" next character\n            result += 4;\n        }\n        else {\n            throw new Error(INVALID_UTF16);\n        }\n    }\n    return result;\n}\nexports.encodedLength = encodedLength;\n/**\n * Decodes the given byte array from UTF-8 into a string.\n * Throws if encoding is invalid.\n */\nfunction decode(arr) {\n    var chars = [];\n    for (var i = 0; i < arr.length; i++) {\n        var b = arr[i];\n        if (b & 0x80) {\n            var min = void 0;\n            if (b < 0xe0) {\n                // Need 1 more byte.\n                if (i >= arr.length) {\n                    throw new Error(INVALID_UTF8);\n                }\n                var n1 = arr[++i];\n                if ((n1 & 0xc0) !== 0x80) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b = (b & 0x1f) << 6 | (n1 & 0x3f);\n                min = 0x80;\n            }\n            else if (b < 0xf0) {\n                // Need 2 more bytes.\n                if (i >= arr.length - 1) {\n                    throw new Error(INVALID_UTF8);\n                }\n                var n1 = arr[++i];\n                var n2 = arr[++i];\n                if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b = (b & 0x0f) << 12 | (n1 & 0x3f) << 6 | (n2 & 0x3f);\n                min = 0x800;\n            }\n            else if (b < 0xf8) {\n                // Need 3 more bytes.\n                if (i >= arr.length - 2) {\n                    throw new Error(INVALID_UTF8);\n                }\n                var n1 = arr[++i];\n                var n2 = arr[++i];\n                var n3 = arr[++i];\n                if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80 || (n3 & 0xc0) !== 0x80) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b = (b & 0x0f) << 18 | (n1 & 0x3f) << 12 | (n2 & 0x3f) << 6 | (n3 & 0x3f);\n                min = 0x10000;\n            }\n            else {\n                throw new Error(INVALID_UTF8);\n            }\n            if (b < min || (b >= 0xd800 && b <= 0xdfff)) {\n                throw new Error(INVALID_UTF8);\n            }\n            if (b >= 0x10000) {\n                // Surrogate pair.\n                if (b > 0x10ffff) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b -= 0x10000;\n                chars.push(String.fromCharCode(0xd800 | (b >> 10)));\n                b = 0xdc00 | (b & 0x3ff);\n            }\n        }\n        chars.push(String.fromCharCode(b));\n    }\n    return chars.join(\"\");\n}\nexports.decode = decode;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __nested_webpack_require_19901__) {\n\n// required so we don't have to do require('pusher').default etc.\nmodule.exports = __nested_webpack_require_19901__(3).default;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __nested_webpack_exports__, __nested_webpack_require_20105__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__nested_webpack_require_20105__.r(__nested_webpack_exports__);\n\n// CONCATENATED MODULE: ./src/runtimes/web/dom/script_receiver_factory.ts\nvar ScriptReceiverFactory = (function () {\n    function ScriptReceiverFactory(prefix, name) {\n        this.lastId = 0;\n        this.prefix = prefix;\n        this.name = name;\n    }\n    ScriptReceiverFactory.prototype.create = function (callback) {\n        this.lastId++;\n        var number = this.lastId;\n        var id = this.prefix + number;\n        var name = this.name + '[' + number + ']';\n        var called = false;\n        var callbackWrapper = function () {\n            if (!called) {\n                callback.apply(null, arguments);\n                called = true;\n            }\n        };\n        this[number] = callbackWrapper;\n        return { number: number, id: id, name: name, callback: callbackWrapper };\n    };\n    ScriptReceiverFactory.prototype.remove = function (receiver) {\n        delete this[receiver.number];\n    };\n    return ScriptReceiverFactory;\n}());\n\nvar ScriptReceivers = new ScriptReceiverFactory('_pusher_script_', 'Pusher.ScriptReceivers');\n\n// CONCATENATED MODULE: ./src/core/defaults.ts\nvar Defaults = {\n    VERSION: \"7.6.0\",\n    PROTOCOL: 7,\n    wsPort: 80,\n    wssPort: 443,\n    wsPath: '',\n    httpHost: 'sockjs.pusher.com',\n    httpPort: 80,\n    httpsPort: 443,\n    httpPath: '/pusher',\n    stats_host: 'stats.pusher.com',\n    authEndpoint: '/pusher/auth',\n    authTransport: 'ajax',\n    activityTimeout: 120000,\n    pongTimeout: 30000,\n    unavailableTimeout: 10000,\n    cluster: 'mt1',\n    userAuthentication: {\n        endpoint: '/pusher/user-auth',\n        transport: 'ajax'\n    },\n    channelAuthorization: {\n        endpoint: '/pusher/auth',\n        transport: 'ajax'\n    },\n    cdn_http: \"http://js.pusher.com\",\n    cdn_https: \"https://js.pusher.com\",\n    dependency_suffix: \"\"\n};\n/* harmony default export */ var defaults = (Defaults);\n\n// CONCATENATED MODULE: ./src/runtimes/web/dom/dependency_loader.ts\n\n\nvar dependency_loader_DependencyLoader = (function () {\n    function DependencyLoader(options) {\n        this.options = options;\n        this.receivers = options.receivers || ScriptReceivers;\n        this.loading = {};\n    }\n    DependencyLoader.prototype.load = function (name, options, callback) {\n        var self = this;\n        if (self.loading[name] && self.loading[name].length > 0) {\n            self.loading[name].push(callback);\n        }\n        else {\n            self.loading[name] = [callback];\n            var request = runtime.createScriptRequest(self.getPath(name, options));\n            var receiver = self.receivers.create(function (error) {\n                self.receivers.remove(receiver);\n                if (self.loading[name]) {\n                    var callbacks = self.loading[name];\n                    delete self.loading[name];\n                    var successCallback = function (wasSuccessful) {\n                        if (!wasSuccessful) {\n                            request.cleanup();\n                        }\n                    };\n                    for (var i = 0; i < callbacks.length; i++) {\n                        callbacks[i](error, successCallback);\n                    }\n                }\n            });\n            request.send(receiver);\n        }\n    };\n    DependencyLoader.prototype.getRoot = function (options) {\n        var cdn;\n        var protocol = runtime.getDocument().location.protocol;\n        if ((options && options.useTLS) || protocol === 'https:') {\n            cdn = this.options.cdn_https;\n        }\n        else {\n            cdn = this.options.cdn_http;\n        }\n        return cdn.replace(/\\/*$/, '') + '/' + this.options.version;\n    };\n    DependencyLoader.prototype.getPath = function (name, options) {\n        return this.getRoot(options) + '/' + name + this.options.suffix + '.js';\n    };\n    return DependencyLoader;\n}());\n/* harmony default export */ var dependency_loader = (dependency_loader_DependencyLoader);\n\n// CONCATENATED MODULE: ./src/runtimes/web/dom/dependencies.ts\n\n\n\nvar DependenciesReceivers = new ScriptReceiverFactory('_pusher_dependencies', 'Pusher.DependenciesReceivers');\nvar Dependencies = new dependency_loader({\n    cdn_http: defaults.cdn_http,\n    cdn_https: defaults.cdn_https,\n    version: defaults.VERSION,\n    suffix: defaults.dependency_suffix,\n    receivers: DependenciesReceivers\n});\n\n// CONCATENATED MODULE: ./src/core/utils/url_store.ts\nvar urlStore = {\n    baseUrl: 'https://pusher.com',\n    urls: {\n        authenticationEndpoint: {\n            path: '/docs/channels/server_api/authenticating_users'\n        },\n        authorizationEndpoint: {\n            path: '/docs/channels/server_api/authorizing-users/'\n        },\n        javascriptQuickStart: {\n            path: '/docs/javascript_quick_start'\n        },\n        triggeringClientEvents: {\n            path: '/docs/client_api_guide/client_events#trigger-events'\n        },\n        encryptedChannelSupport: {\n            fullUrl: 'https://github.com/pusher/pusher-js/tree/cc491015371a4bde5743d1c87a0fbac0feb53195#encrypted-channel-support'\n        }\n    }\n};\nvar buildLogSuffix = function (key) {\n    var urlPrefix = 'See:';\n    var urlObj = urlStore.urls[key];\n    if (!urlObj)\n        return '';\n    var url;\n    if (urlObj.fullUrl) {\n        url = urlObj.fullUrl;\n    }\n    else if (urlObj.path) {\n        url = urlStore.baseUrl + urlObj.path;\n    }\n    if (!url)\n        return '';\n    return urlPrefix + \" \" + url;\n};\n/* harmony default export */ var url_store = ({ buildLogSuffix: buildLogSuffix });\n\n// CONCATENATED MODULE: ./src/core/auth/options.ts\nvar AuthRequestType;\n(function (AuthRequestType) {\n    AuthRequestType[\"UserAuthentication\"] = \"user-authentication\";\n    AuthRequestType[\"ChannelAuthorization\"] = \"channel-authorization\";\n})(AuthRequestType || (AuthRequestType = {}));\n\n// CONCATENATED MODULE: ./src/core/errors.ts\nvar __extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar BadEventName = (function (_super) {\n    __extends(BadEventName, _super);\n    function BadEventName(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return BadEventName;\n}(Error));\n\nvar BadChannelName = (function (_super) {\n    __extends(BadChannelName, _super);\n    function BadChannelName(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return BadChannelName;\n}(Error));\n\nvar RequestTimedOut = (function (_super) {\n    __extends(RequestTimedOut, _super);\n    function RequestTimedOut(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return RequestTimedOut;\n}(Error));\n\nvar TransportPriorityTooLow = (function (_super) {\n    __extends(TransportPriorityTooLow, _super);\n    function TransportPriorityTooLow(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return TransportPriorityTooLow;\n}(Error));\n\nvar TransportClosed = (function (_super) {\n    __extends(TransportClosed, _super);\n    function TransportClosed(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return TransportClosed;\n}(Error));\n\nvar UnsupportedFeature = (function (_super) {\n    __extends(UnsupportedFeature, _super);\n    function UnsupportedFeature(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return UnsupportedFeature;\n}(Error));\n\nvar UnsupportedTransport = (function (_super) {\n    __extends(UnsupportedTransport, _super);\n    function UnsupportedTransport(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return UnsupportedTransport;\n}(Error));\n\nvar UnsupportedStrategy = (function (_super) {\n    __extends(UnsupportedStrategy, _super);\n    function UnsupportedStrategy(msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return UnsupportedStrategy;\n}(Error));\n\nvar HTTPAuthError = (function (_super) {\n    __extends(HTTPAuthError, _super);\n    function HTTPAuthError(status, msg) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, msg) || this;\n        _this.status = status;\n        Object.setPrototypeOf(_this, _newTarget.prototype);\n        return _this;\n    }\n    return HTTPAuthError;\n}(Error));\n\n\n// CONCATENATED MODULE: ./src/runtimes/isomorphic/auth/xhr_auth.ts\n\n\n\n\nvar ajax = function (context, query, authOptions, authRequestType, callback) {\n    var xhr = runtime.createXHR();\n    xhr.open('POST', authOptions.endpoint, true);\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    for (var headerName in authOptions.headers) {\n        xhr.setRequestHeader(headerName, authOptions.headers[headerName]);\n    }\n    if (authOptions.headersProvider != null) {\n        var dynamicHeaders = authOptions.headersProvider();\n        for (var headerName in dynamicHeaders) {\n            xhr.setRequestHeader(headerName, dynamicHeaders[headerName]);\n        }\n    }\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                var data = void 0;\n                var parsed = false;\n                try {\n                    data = JSON.parse(xhr.responseText);\n                    parsed = true;\n                }\n                catch (e) {\n                    callback(new HTTPAuthError(200, \"JSON returned from \" + authRequestType.toString() + \" endpoint was invalid, yet status code was 200. Data was: \" + xhr.responseText), null);\n                }\n                if (parsed) {\n                    callback(null, data);\n                }\n            }\n            else {\n                var suffix = '';\n                switch (authRequestType) {\n                    case AuthRequestType.UserAuthentication:\n                        suffix = url_store.buildLogSuffix('authenticationEndpoint');\n                        break;\n                    case AuthRequestType.ChannelAuthorization:\n                        suffix = \"Clients must be authorized to join private or presence channels. \" + url_store.buildLogSuffix('authorizationEndpoint');\n                        break;\n                }\n                callback(new HTTPAuthError(xhr.status, \"Unable to retrieve auth string from \" + authRequestType.toString() + \" endpoint - \" +\n                    (\"received status: \" + xhr.status + \" from \" + authOptions.endpoint + \". \" + suffix)), null);\n            }\n        }\n    };\n    xhr.send(query);\n    return xhr;\n};\n/* harmony default export */ var xhr_auth = (ajax);\n\n// CONCATENATED MODULE: ./src/core/base64.ts\nfunction encode(s) {\n    return btoa(utob(s));\n}\nvar fromCharCode = String.fromCharCode;\nvar b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nvar b64tab = {};\nfor (var base64_i = 0, l = b64chars.length; base64_i < l; base64_i++) {\n    b64tab[b64chars.charAt(base64_i)] = base64_i;\n}\nvar cb_utob = function (c) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80\n        ? c\n        : cc < 0x800\n            ? fromCharCode(0xc0 | (cc >>> 6)) + fromCharCode(0x80 | (cc & 0x3f))\n            : fromCharCode(0xe0 | ((cc >>> 12) & 0x0f)) +\n                fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) +\n                fromCharCode(0x80 | (cc & 0x3f));\n};\nvar utob = function (u) {\n    return u.replace(/[^\\x00-\\x7F]/g, cb_utob);\n};\nvar cb_encode = function (ccc) {\n    var padlen = [0, 2, 1][ccc.length % 3];\n    var ord = (ccc.charCodeAt(0) << 16) |\n        ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8) |\n        (ccc.length > 2 ? ccc.charCodeAt(2) : 0);\n    var chars = [\n        b64chars.charAt(ord >>> 18),\n        b64chars.charAt((ord >>> 12) & 63),\n        padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n        padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n    ];\n    return chars.join('');\n};\nvar btoa = window.btoa ||\n    function (b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n\n// CONCATENATED MODULE: ./src/core/utils/timers/abstract_timer.ts\nvar Timer = (function () {\n    function Timer(set, clear, delay, callback) {\n        var _this = this;\n        this.clear = clear;\n        this.timer = set(function () {\n            if (_this.timer) {\n                _this.timer = callback(_this.timer);\n            }\n        }, delay);\n    }\n    Timer.prototype.isRunning = function () {\n        return this.timer !== null;\n    };\n    Timer.prototype.ensureAborted = function () {\n        if (this.timer) {\n            this.clear(this.timer);\n            this.timer = null;\n        }\n    };\n    return Timer;\n}());\n/* harmony default export */ var abstract_timer = (Timer);\n\n// CONCATENATED MODULE: ./src/core/utils/timers/index.ts\nvar timers_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nfunction timers_clearTimeout(timer) {\n    window.clearTimeout(timer);\n}\nfunction timers_clearInterval(timer) {\n    window.clearInterval(timer);\n}\nvar OneOffTimer = (function (_super) {\n    timers_extends(OneOffTimer, _super);\n    function OneOffTimer(delay, callback) {\n        return _super.call(this, setTimeout, timers_clearTimeout, delay, function (timer) {\n            callback();\n            return null;\n        }) || this;\n    }\n    return OneOffTimer;\n}(abstract_timer));\n\nvar PeriodicTimer = (function (_super) {\n    timers_extends(PeriodicTimer, _super);\n    function PeriodicTimer(delay, callback) {\n        return _super.call(this, setInterval, timers_clearInterval, delay, function (timer) {\n            callback();\n            return timer;\n        }) || this;\n    }\n    return PeriodicTimer;\n}(abstract_timer));\n\n\n// CONCATENATED MODULE: ./src/core/util.ts\n\nvar Util = {\n    now: function () {\n        if (Date.now) {\n            return Date.now();\n        }\n        else {\n            return new Date().valueOf();\n        }\n    },\n    defer: function (callback) {\n        return new OneOffTimer(0, callback);\n    },\n    method: function (name) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var boundArguments = Array.prototype.slice.call(arguments, 1);\n        return function (object) {\n            return object[name].apply(object, boundArguments.concat(arguments));\n        };\n    }\n};\n/* harmony default export */ var util = (Util);\n\n// CONCATENATED MODULE: ./src/core/utils/collections.ts\n\n\nfunction extend(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < sources.length; i++) {\n        var extensions = sources[i];\n        for (var property in extensions) {\n            if (extensions[property] &&\n                extensions[property].constructor &&\n                extensions[property].constructor === Object) {\n                target[property] = extend(target[property] || {}, extensions[property]);\n            }\n            else {\n                target[property] = extensions[property];\n            }\n        }\n    }\n    return target;\n}\nfunction stringify() {\n    var m = ['Pusher'];\n    for (var i = 0; i < arguments.length; i++) {\n        if (typeof arguments[i] === 'string') {\n            m.push(arguments[i]);\n        }\n        else {\n            m.push(safeJSONStringify(arguments[i]));\n        }\n    }\n    return m.join(' : ');\n}\nfunction arrayIndexOf(array, item) {\n    var nativeIndexOf = Array.prototype.indexOf;\n    if (array === null) {\n        return -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) {\n        return array.indexOf(item);\n    }\n    for (var i = 0, l = array.length; i < l; i++) {\n        if (array[i] === item) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction objectApply(object, f) {\n    for (var key in object) {\n        if (Object.prototype.hasOwnProperty.call(object, key)) {\n            f(object[key], key, object);\n        }\n    }\n}\nfunction keys(object) {\n    var keys = [];\n    objectApply(object, function (_, key) {\n        keys.push(key);\n    });\n    return keys;\n}\nfunction values(object) {\n    var values = [];\n    objectApply(object, function (value) {\n        values.push(value);\n    });\n    return values;\n}\nfunction apply(array, f, context) {\n    for (var i = 0; i < array.length; i++) {\n        f.call(context || window, array[i], i, array);\n    }\n}\nfunction map(array, f) {\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n        result.push(f(array[i], i, array, result));\n    }\n    return result;\n}\nfunction mapObject(object, f) {\n    var result = {};\n    objectApply(object, function (value, key) {\n        result[key] = f(value);\n    });\n    return result;\n}\nfunction filter(array, test) {\n    test =\n        test ||\n            function (value) {\n                return !!value;\n            };\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n        if (test(array[i], i, array, result)) {\n            result.push(array[i]);\n        }\n    }\n    return result;\n}\nfunction filterObject(object, test) {\n    var result = {};\n    objectApply(object, function (value, key) {\n        if ((test && test(value, key, object, result)) || Boolean(value)) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\nfunction flatten(object) {\n    var result = [];\n    objectApply(object, function (value, key) {\n        result.push([key, value]);\n    });\n    return result;\n}\nfunction any(array, test) {\n    for (var i = 0; i < array.length; i++) {\n        if (test(array[i], i, array)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction collections_all(array, test) {\n    for (var i = 0; i < array.length; i++) {\n        if (!test(array[i], i, array)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction encodeParamsObject(data) {\n    return mapObject(data, function (value) {\n        if (typeof value === 'object') {\n            value = safeJSONStringify(value);\n        }\n        return encodeURIComponent(encode(value.toString()));\n    });\n}\nfunction buildQueryString(data) {\n    var params = filterObject(data, function (value) {\n        return value !== undefined;\n    });\n    var query = map(flatten(encodeParamsObject(params)), util.method('join', '=')).join('&');\n    return query;\n}\nfunction decycleObject(object) {\n    var objects = [], paths = [];\n    return (function derez(value, path) {\n        var i, name, nu;\n        switch (typeof value) {\n            case 'object':\n                if (!value) {\n                    return null;\n                }\n                for (i = 0; i < objects.length; i += 1) {\n                    if (objects[i] === value) {\n                        return { $ref: paths[i] };\n                    }\n                }\n                objects.push(value);\n                paths.push(path);\n                if (Object.prototype.toString.apply(value) === '[object Array]') {\n                    nu = [];\n                    for (i = 0; i < value.length; i += 1) {\n                        nu[i] = derez(value[i], path + '[' + i + ']');\n                    }\n                }\n                else {\n                    nu = {};\n                    for (name in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, name)) {\n                            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n                        }\n                    }\n                }\n                return nu;\n            case 'number':\n            case 'string':\n            case 'boolean':\n                return value;\n        }\n    })(object, '$');\n}\nfunction safeJSONStringify(source) {\n    try {\n        return JSON.stringify(source);\n    }\n    catch (e) {\n        return JSON.stringify(decycleObject(source));\n    }\n}\n\n// CONCATENATED MODULE: ./src/core/logger.ts\n\n\nvar logger_Logger = (function () {\n    function Logger() {\n        this.globalLog = function (message) {\n            if (window.console && window.console.log) {\n                window.console.log(message);\n            }\n        };\n    }\n    Logger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.log(this.globalLog, args);\n    };\n    Logger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.log(this.globalLogWarn, args);\n    };\n    Logger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.log(this.globalLogError, args);\n    };\n    Logger.prototype.globalLogWarn = function (message) {\n        if (window.console && window.console.warn) {\n            window.console.warn(message);\n        }\n        else {\n            this.globalLog(message);\n        }\n    };\n    Logger.prototype.globalLogError = function (message) {\n        if (window.console && window.console.error) {\n            window.console.error(message);\n        }\n        else {\n            this.globalLogWarn(message);\n        }\n    };\n    Logger.prototype.log = function (defaultLoggingFunction) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var message = stringify.apply(this, arguments);\n        if (core_pusher.log) {\n            core_pusher.log(message);\n        }\n        else if (core_pusher.logToConsole) {\n            var log = defaultLoggingFunction.bind(this);\n            log(message);\n        }\n    };\n    return Logger;\n}());\n/* harmony default export */ var logger = (new logger_Logger());\n\n// CONCATENATED MODULE: ./src/runtimes/web/auth/jsonp_auth.ts\n\nvar jsonp = function (context, query, authOptions, authRequestType, callback) {\n    if (authOptions.headers !== undefined ||\n        authOptions.headersProvider != null) {\n        logger.warn(\"To send headers with the \" + authRequestType.toString() + \" request, you must use AJAX, rather than JSONP.\");\n    }\n    var callbackName = context.nextAuthCallbackID.toString();\n    context.nextAuthCallbackID++;\n    var document = context.getDocument();\n    var script = document.createElement('script');\n    context.auth_callbacks[callbackName] = function (data) {\n        callback(null, data);\n    };\n    var callback_name = \"Pusher.auth_callbacks['\" + callbackName + \"']\";\n    script.src =\n        authOptions.endpoint +\n            '?callback=' +\n            encodeURIComponent(callback_name) +\n            '&' +\n            query;\n    var head = document.getElementsByTagName('head')[0] || document.documentElement;\n    head.insertBefore(script, head.firstChild);\n};\n/* harmony default export */ var jsonp_auth = (jsonp);\n\n// CONCATENATED MODULE: ./src/runtimes/web/dom/script_request.ts\nvar ScriptRequest = (function () {\n    function ScriptRequest(src) {\n        this.src = src;\n    }\n    ScriptRequest.prototype.send = function (receiver) {\n        var self = this;\n        var errorString = 'Error loading ' + self.src;\n        self.script = document.createElement('script');\n        self.script.id = receiver.id;\n        self.script.src = self.src;\n        self.script.type = 'text/javascript';\n        self.script.charset = 'UTF-8';\n        if (self.script.addEventListener) {\n            self.script.onerror = function () {\n                receiver.callback(errorString);\n            };\n            self.script.onload = function () {\n                receiver.callback(null);\n            };\n        }\n        else {\n            self.script.onreadystatechange = function () {\n                if (self.script.readyState === 'loaded' ||\n                    self.script.readyState === 'complete') {\n                    receiver.callback(null);\n                }\n            };\n        }\n        if (self.script.async === undefined &&\n            document.attachEvent &&\n            /opera/i.test(navigator.userAgent)) {\n            self.errorScript = document.createElement('script');\n            self.errorScript.id = receiver.id + '_error';\n            self.errorScript.text = receiver.name + \"('\" + errorString + \"');\";\n            self.script.async = self.errorScript.async = false;\n        }\n        else {\n            self.script.async = true;\n        }\n        var head = document.getElementsByTagName('head')[0];\n        head.insertBefore(self.script, head.firstChild);\n        if (self.errorScript) {\n            head.insertBefore(self.errorScript, self.script.nextSibling);\n        }\n    };\n    ScriptRequest.prototype.cleanup = function () {\n        if (this.script) {\n            this.script.onload = this.script.onerror = null;\n            this.script.onreadystatechange = null;\n        }\n        if (this.script && this.script.parentNode) {\n            this.script.parentNode.removeChild(this.script);\n        }\n        if (this.errorScript && this.errorScript.parentNode) {\n            this.errorScript.parentNode.removeChild(this.errorScript);\n        }\n        this.script = null;\n        this.errorScript = null;\n    };\n    return ScriptRequest;\n}());\n/* harmony default export */ var script_request = (ScriptRequest);\n\n// CONCATENATED MODULE: ./src/runtimes/web/dom/jsonp_request.ts\n\n\nvar jsonp_request_JSONPRequest = (function () {\n    function JSONPRequest(url, data) {\n        this.url = url;\n        this.data = data;\n    }\n    JSONPRequest.prototype.send = function (receiver) {\n        if (this.request) {\n            return;\n        }\n        var query = buildQueryString(this.data);\n        var url = this.url + '/' + receiver.number + '?' + query;\n        this.request = runtime.createScriptRequest(url);\n        this.request.send(receiver);\n    };\n    JSONPRequest.prototype.cleanup = function () {\n        if (this.request) {\n            this.request.cleanup();\n        }\n    };\n    return JSONPRequest;\n}());\n/* harmony default export */ var jsonp_request = (jsonp_request_JSONPRequest);\n\n// CONCATENATED MODULE: ./src/runtimes/web/timeline/jsonp_timeline.ts\n\n\nvar getAgent = function (sender, useTLS) {\n    return function (data, callback) {\n        var scheme = 'http' + (useTLS ? 's' : '') + '://';\n        var url = scheme + (sender.host || sender.options.host) + sender.options.path;\n        var request = runtime.createJSONPRequest(url, data);\n        var receiver = runtime.ScriptReceivers.create(function (error, result) {\n            ScriptReceivers.remove(receiver);\n            request.cleanup();\n            if (result && result.host) {\n                sender.host = result.host;\n            }\n            if (callback) {\n                callback(error, result);\n            }\n        });\n        request.send(receiver);\n    };\n};\nvar jsonp_timeline_jsonp = {\n    name: 'jsonp',\n    getAgent: getAgent\n};\n/* harmony default export */ var jsonp_timeline = (jsonp_timeline_jsonp);\n\n// CONCATENATED MODULE: ./src/core/transports/url_schemes.ts\n\nfunction getGenericURL(baseScheme, params, path) {\n    var scheme = baseScheme + (params.useTLS ? 's' : '');\n    var host = params.useTLS ? params.hostTLS : params.hostNonTLS;\n    return scheme + '://' + host + path;\n}\nfunction getGenericPath(key, queryString) {\n    var path = '/app/' + key;\n    var query = '?protocol=' +\n        defaults.PROTOCOL +\n        '&client=js' +\n        '&version=' +\n        defaults.VERSION +\n        (queryString ? '&' + queryString : '');\n    return path + query;\n}\nvar ws = {\n    getInitial: function (key, params) {\n        var path = (params.httpPath || '') + getGenericPath(key, 'flash=false');\n        return getGenericURL('ws', params, path);\n    }\n};\nvar http = {\n    getInitial: function (key, params) {\n        var path = (params.httpPath || '/pusher') + getGenericPath(key);\n        return getGenericURL('http', params, path);\n    }\n};\nvar sockjs = {\n    getInitial: function (key, params) {\n        return getGenericURL('http', params, params.httpPath || '/pusher');\n    },\n    getPath: function (key, params) {\n        return getGenericPath(key);\n    }\n};\n\n// CONCATENATED MODULE: ./src/core/events/callback_registry.ts\n\nvar callback_registry_CallbackRegistry = (function () {\n    function CallbackRegistry() {\n        this._callbacks = {};\n    }\n    CallbackRegistry.prototype.get = function (name) {\n        return this._callbacks[prefix(name)];\n    };\n    CallbackRegistry.prototype.add = function (name, callback, context) {\n        var prefixedEventName = prefix(name);\n        this._callbacks[prefixedEventName] =\n            this._callbacks[prefixedEventName] || [];\n        this._callbacks[prefixedEventName].push({\n            fn: callback,\n            context: context\n        });\n    };\n    CallbackRegistry.prototype.remove = function (name, callback, context) {\n        if (!name && !callback && !context) {\n            this._callbacks = {};\n            return;\n        }\n        var names = name ? [prefix(name)] : keys(this._callbacks);\n        if (callback || context) {\n            this.removeCallback(names, callback, context);\n        }\n        else {\n            this.removeAllCallbacks(names);\n        }\n    };\n    CallbackRegistry.prototype.removeCallback = function (names, callback, context) {\n        apply(names, function (name) {\n            this._callbacks[name] = filter(this._callbacks[name] || [], function (binding) {\n                return ((callback && callback !== binding.fn) ||\n                    (context && context !== binding.context));\n            });\n            if (this._callbacks[name].length === 0) {\n                delete this._callbacks[name];\n            }\n        }, this);\n    };\n    CallbackRegistry.prototype.removeAllCallbacks = function (names) {\n        apply(names, function (name) {\n            delete this._callbacks[name];\n        }, this);\n    };\n    return CallbackRegistry;\n}());\n/* harmony default export */ var callback_registry = (callback_registry_CallbackRegistry);\nfunction prefix(name) {\n    return '_' + name;\n}\n\n// CONCATENATED MODULE: ./src/core/events/dispatcher.ts\n\n\nvar dispatcher_Dispatcher = (function () {\n    function Dispatcher(failThrough) {\n        this.callbacks = new callback_registry();\n        this.global_callbacks = [];\n        this.failThrough = failThrough;\n    }\n    Dispatcher.prototype.bind = function (eventName, callback, context) {\n        this.callbacks.add(eventName, callback, context);\n        return this;\n    };\n    Dispatcher.prototype.bind_global = function (callback) {\n        this.global_callbacks.push(callback);\n        return this;\n    };\n    Dispatcher.prototype.unbind = function (eventName, callback, context) {\n        this.callbacks.remove(eventName, callback, context);\n        return this;\n    };\n    Dispatcher.prototype.unbind_global = function (callback) {\n        if (!callback) {\n            this.global_callbacks = [];\n            return this;\n        }\n        this.global_callbacks = filter(this.global_callbacks || [], function (c) { return c !== callback; });\n        return this;\n    };\n    Dispatcher.prototype.unbind_all = function () {\n        this.unbind();\n        this.unbind_global();\n        return this;\n    };\n    Dispatcher.prototype.emit = function (eventName, data, metadata) {\n        for (var i = 0; i < this.global_callbacks.length; i++) {\n            this.global_callbacks[i](eventName, data);\n        }\n        var callbacks = this.callbacks.get(eventName);\n        var args = [];\n        if (metadata) {\n            args.push(data, metadata);\n        }\n        else if (data) {\n            args.push(data);\n        }\n        if (callbacks && callbacks.length > 0) {\n            for (var i = 0; i < callbacks.length; i++) {\n                callbacks[i].fn.apply(callbacks[i].context || window, args);\n            }\n        }\n        else if (this.failThrough) {\n            this.failThrough(eventName, data);\n        }\n        return this;\n    };\n    return Dispatcher;\n}());\n/* harmony default export */ var dispatcher = (dispatcher_Dispatcher);\n\n// CONCATENATED MODULE: ./src/core/transports/transport_connection.ts\nvar transport_connection_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar transport_connection_TransportConnection = (function (_super) {\n    transport_connection_extends(TransportConnection, _super);\n    function TransportConnection(hooks, name, priority, key, options) {\n        var _this = _super.call(this) || this;\n        _this.initialize = runtime.transportConnectionInitializer;\n        _this.hooks = hooks;\n        _this.name = name;\n        _this.priority = priority;\n        _this.key = key;\n        _this.options = options;\n        _this.state = 'new';\n        _this.timeline = options.timeline;\n        _this.activityTimeout = options.activityTimeout;\n        _this.id = _this.timeline.generateUniqueID();\n        return _this;\n    }\n    TransportConnection.prototype.handlesActivityChecks = function () {\n        return Boolean(this.hooks.handlesActivityChecks);\n    };\n    TransportConnection.prototype.supportsPing = function () {\n        return Boolean(this.hooks.supportsPing);\n    };\n    TransportConnection.prototype.connect = function () {\n        var _this = this;\n        if (this.socket || this.state !== 'initialized') {\n            return false;\n        }\n        var url = this.hooks.urls.getInitial(this.key, this.options);\n        try {\n            this.socket = this.hooks.getSocket(url, this.options);\n        }\n        catch (e) {\n            util.defer(function () {\n                _this.onError(e);\n                _this.changeState('closed');\n            });\n            return false;\n        }\n        this.bindListeners();\n        logger.debug('Connecting', { transport: this.name, url: url });\n        this.changeState('connecting');\n        return true;\n    };\n    TransportConnection.prototype.close = function () {\n        if (this.socket) {\n            this.socket.close();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TransportConnection.prototype.send = function (data) {\n        var _this = this;\n        if (this.state === 'open') {\n            util.defer(function () {\n                if (_this.socket) {\n                    _this.socket.send(data);\n                }\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TransportConnection.prototype.ping = function () {\n        if (this.state === 'open' && this.supportsPing()) {\n            this.socket.ping();\n        }\n    };\n    TransportConnection.prototype.onOpen = function () {\n        if (this.hooks.beforeOpen) {\n            this.hooks.beforeOpen(this.socket, this.hooks.urls.getPath(this.key, this.options));\n        }\n        this.changeState('open');\n        this.socket.onopen = undefined;\n    };\n    TransportConnection.prototype.onError = function (error) {\n        this.emit('error', { type: 'WebSocketError', error: error });\n        this.timeline.error(this.buildTimelineMessage({ error: error.toString() }));\n    };\n    TransportConnection.prototype.onClose = function (closeEvent) {\n        if (closeEvent) {\n            this.changeState('closed', {\n                code: closeEvent.code,\n                reason: closeEvent.reason,\n                wasClean: closeEvent.wasClean\n            });\n        }\n        else {\n            this.changeState('closed');\n        }\n        this.unbindListeners();\n        this.socket = undefined;\n    };\n    TransportConnection.prototype.onMessage = function (message) {\n        this.emit('message', message);\n    };\n    TransportConnection.prototype.onActivity = function () {\n        this.emit('activity');\n    };\n    TransportConnection.prototype.bindListeners = function () {\n        var _this = this;\n        this.socket.onopen = function () {\n            _this.onOpen();\n        };\n        this.socket.onerror = function (error) {\n            _this.onError(error);\n        };\n        this.socket.onclose = function (closeEvent) {\n            _this.onClose(closeEvent);\n        };\n        this.socket.onmessage = function (message) {\n            _this.onMessage(message);\n        };\n        if (this.supportsPing()) {\n            this.socket.onactivity = function () {\n                _this.onActivity();\n            };\n        }\n    };\n    TransportConnection.prototype.unbindListeners = function () {\n        if (this.socket) {\n            this.socket.onopen = undefined;\n            this.socket.onerror = undefined;\n            this.socket.onclose = undefined;\n            this.socket.onmessage = undefined;\n            if (this.supportsPing()) {\n                this.socket.onactivity = undefined;\n            }\n        }\n    };\n    TransportConnection.prototype.changeState = function (state, params) {\n        this.state = state;\n        this.timeline.info(this.buildTimelineMessage({\n            state: state,\n            params: params\n        }));\n        this.emit(state, params);\n    };\n    TransportConnection.prototype.buildTimelineMessage = function (message) {\n        return extend({ cid: this.id }, message);\n    };\n    return TransportConnection;\n}(dispatcher));\n/* harmony default export */ var transport_connection = (transport_connection_TransportConnection);\n\n// CONCATENATED MODULE: ./src/core/transports/transport.ts\n\nvar transport_Transport = (function () {\n    function Transport(hooks) {\n        this.hooks = hooks;\n    }\n    Transport.prototype.isSupported = function (environment) {\n        return this.hooks.isSupported(environment);\n    };\n    Transport.prototype.createConnection = function (name, priority, key, options) {\n        return new transport_connection(this.hooks, name, priority, key, options);\n    };\n    return Transport;\n}());\n/* harmony default export */ var transports_transport = (transport_Transport);\n\n// CONCATENATED MODULE: ./src/runtimes/isomorphic/transports/transports.ts\n\n\n\n\nvar WSTransport = new transports_transport({\n    urls: ws,\n    handlesActivityChecks: false,\n    supportsPing: false,\n    isInitialized: function () {\n        return Boolean(runtime.getWebSocketAPI());\n    },\n    isSupported: function () {\n        return Boolean(runtime.getWebSocketAPI());\n    },\n    getSocket: function (url) {\n        return runtime.createWebSocket(url);\n    }\n});\nvar httpConfiguration = {\n    urls: http,\n    handlesActivityChecks: false,\n    supportsPing: true,\n    isInitialized: function () {\n        return true;\n    }\n};\nvar streamingConfiguration = extend({\n    getSocket: function (url) {\n        return runtime.HTTPFactory.createStreamingSocket(url);\n    }\n}, httpConfiguration);\nvar pollingConfiguration = extend({\n    getSocket: function (url) {\n        return runtime.HTTPFactory.createPollingSocket(url);\n    }\n}, httpConfiguration);\nvar xhrConfiguration = {\n    isSupported: function () {\n        return runtime.isXHRSupported();\n    }\n};\nvar XHRStreamingTransport = new transports_transport((extend({}, streamingConfiguration, xhrConfiguration)));\nvar XHRPollingTransport = new transports_transport(extend({}, pollingConfiguration, xhrConfiguration));\nvar Transports = {\n    ws: WSTransport,\n    xhr_streaming: XHRStreamingTransport,\n    xhr_polling: XHRPollingTransport\n};\n/* harmony default export */ var transports = (Transports);\n\n// CONCATENATED MODULE: ./src/runtimes/web/transports/transports.ts\n\n\n\n\n\n\nvar SockJSTransport = new transports_transport({\n    file: 'sockjs',\n    urls: sockjs,\n    handlesActivityChecks: true,\n    supportsPing: false,\n    isSupported: function () {\n        return true;\n    },\n    isInitialized: function () {\n        return window.SockJS !== undefined;\n    },\n    getSocket: function (url, options) {\n        return new window.SockJS(url, null, {\n            js_path: Dependencies.getPath('sockjs', {\n                useTLS: options.useTLS\n            }),\n            ignore_null_origin: options.ignoreNullOrigin\n        });\n    },\n    beforeOpen: function (socket, path) {\n        socket.send(JSON.stringify({\n            path: path\n        }));\n    }\n});\nvar xdrConfiguration = {\n    isSupported: function (environment) {\n        var yes = runtime.isXDRSupported(environment.useTLS);\n        return yes;\n    }\n};\nvar XDRStreamingTransport = new transports_transport((extend({}, streamingConfiguration, xdrConfiguration)));\nvar XDRPollingTransport = new transports_transport(extend({}, pollingConfiguration, xdrConfiguration));\ntransports.xdr_streaming = XDRStreamingTransport;\ntransports.xdr_polling = XDRPollingTransport;\ntransports.sockjs = SockJSTransport;\n/* harmony default export */ var transports_transports = (transports);\n\n// CONCATENATED MODULE: ./src/runtimes/web/net_info.ts\nvar net_info_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar NetInfo = (function (_super) {\n    net_info_extends(NetInfo, _super);\n    function NetInfo() {\n        var _this = _super.call(this) || this;\n        var self = _this;\n        if (window.addEventListener !== undefined) {\n            window.addEventListener('online', function () {\n                self.emit('online');\n            }, false);\n            window.addEventListener('offline', function () {\n                self.emit('offline');\n            }, false);\n        }\n        return _this;\n    }\n    NetInfo.prototype.isOnline = function () {\n        if (window.navigator.onLine === undefined) {\n            return true;\n        }\n        else {\n            return window.navigator.onLine;\n        }\n    };\n    return NetInfo;\n}(dispatcher));\n\nvar net_info_Network = new NetInfo();\n\n// CONCATENATED MODULE: ./src/core/transports/assistant_to_the_transport_manager.ts\n\n\nvar assistant_to_the_transport_manager_AssistantToTheTransportManager = (function () {\n    function AssistantToTheTransportManager(manager, transport, options) {\n        this.manager = manager;\n        this.transport = transport;\n        this.minPingDelay = options.minPingDelay;\n        this.maxPingDelay = options.maxPingDelay;\n        this.pingDelay = undefined;\n    }\n    AssistantToTheTransportManager.prototype.createConnection = function (name, priority, key, options) {\n        var _this = this;\n        options = extend({}, options, {\n            activityTimeout: this.pingDelay\n        });\n        var connection = this.transport.createConnection(name, priority, key, options);\n        var openTimestamp = null;\n        var onOpen = function () {\n            connection.unbind('open', onOpen);\n            connection.bind('closed', onClosed);\n            openTimestamp = util.now();\n        };\n        var onClosed = function (closeEvent) {\n            connection.unbind('closed', onClosed);\n            if (closeEvent.code === 1002 || closeEvent.code === 1003) {\n                _this.manager.reportDeath();\n            }\n            else if (!closeEvent.wasClean && openTimestamp) {\n                var lifespan = util.now() - openTimestamp;\n                if (lifespan < 2 * _this.maxPingDelay) {\n                    _this.manager.reportDeath();\n                    _this.pingDelay = Math.max(lifespan / 2, _this.minPingDelay);\n                }\n            }\n        };\n        connection.bind('open', onOpen);\n        return connection;\n    };\n    AssistantToTheTransportManager.prototype.isSupported = function (environment) {\n        return this.manager.isAlive() && this.transport.isSupported(environment);\n    };\n    return AssistantToTheTransportManager;\n}());\n/* harmony default export */ var assistant_to_the_transport_manager = (assistant_to_the_transport_manager_AssistantToTheTransportManager);\n\n// CONCATENATED MODULE: ./src/core/connection/protocol/protocol.ts\nvar Protocol = {\n    decodeMessage: function (messageEvent) {\n        try {\n            var messageData = JSON.parse(messageEvent.data);\n            var pusherEventData = messageData.data;\n            if (typeof pusherEventData === 'string') {\n                try {\n                    pusherEventData = JSON.parse(messageData.data);\n                }\n                catch (e) { }\n            }\n            var pusherEvent = {\n                event: messageData.event,\n                channel: messageData.channel,\n                data: pusherEventData\n            };\n            if (messageData.user_id) {\n                pusherEvent.user_id = messageData.user_id;\n            }\n            return pusherEvent;\n        }\n        catch (e) {\n            throw { type: 'MessageParseError', error: e, data: messageEvent.data };\n        }\n    },\n    encodeMessage: function (event) {\n        return JSON.stringify(event);\n    },\n    processHandshake: function (messageEvent) {\n        var message = Protocol.decodeMessage(messageEvent);\n        if (message.event === 'pusher:connection_established') {\n            if (!message.data.activity_timeout) {\n                throw 'No activity timeout specified in handshake';\n            }\n            return {\n                action: 'connected',\n                id: message.data.socket_id,\n                activityTimeout: message.data.activity_timeout * 1000\n            };\n        }\n        else if (message.event === 'pusher:error') {\n            return {\n                action: this.getCloseAction(message.data),\n                error: this.getCloseError(message.data)\n            };\n        }\n        else {\n            throw 'Invalid handshake';\n        }\n    },\n    getCloseAction: function (closeEvent) {\n        if (closeEvent.code < 4000) {\n            if (closeEvent.code >= 1002 && closeEvent.code <= 1004) {\n                return 'backoff';\n            }\n            else {\n                return null;\n            }\n        }\n        else if (closeEvent.code === 4000) {\n            return 'tls_only';\n        }\n        else if (closeEvent.code < 4100) {\n            return 'refused';\n        }\n        else if (closeEvent.code < 4200) {\n            return 'backoff';\n        }\n        else if (closeEvent.code < 4300) {\n            return 'retry';\n        }\n        else {\n            return 'refused';\n        }\n    },\n    getCloseError: function (closeEvent) {\n        if (closeEvent.code !== 1000 && closeEvent.code !== 1001) {\n            return {\n                type: 'PusherError',\n                data: {\n                    code: closeEvent.code,\n                    message: closeEvent.reason || closeEvent.message\n                }\n            };\n        }\n        else {\n            return null;\n        }\n    }\n};\n/* harmony default export */ var protocol_protocol = (Protocol);\n\n// CONCATENATED MODULE: ./src/core/connection/connection.ts\nvar connection_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\nvar connection_Connection = (function (_super) {\n    connection_extends(Connection, _super);\n    function Connection(id, transport) {\n        var _this = _super.call(this) || this;\n        _this.id = id;\n        _this.transport = transport;\n        _this.activityTimeout = transport.activityTimeout;\n        _this.bindListeners();\n        return _this;\n    }\n    Connection.prototype.handlesActivityChecks = function () {\n        return this.transport.handlesActivityChecks();\n    };\n    Connection.prototype.send = function (data) {\n        return this.transport.send(data);\n    };\n    Connection.prototype.send_event = function (name, data, channel) {\n        var event = { event: name, data: data };\n        if (channel) {\n            event.channel = channel;\n        }\n        logger.debug('Event sent', event);\n        return this.send(protocol_protocol.encodeMessage(event));\n    };\n    Connection.prototype.ping = function () {\n        if (this.transport.supportsPing()) {\n            this.transport.ping();\n        }\n        else {\n            this.send_event('pusher:ping', {});\n        }\n    };\n    Connection.prototype.close = function () {\n        this.transport.close();\n    };\n    Connection.prototype.bindListeners = function () {\n        var _this = this;\n        var listeners = {\n            message: function (messageEvent) {\n                var pusherEvent;\n                try {\n                    pusherEvent = protocol_protocol.decodeMessage(messageEvent);\n                }\n                catch (e) {\n                    _this.emit('error', {\n                        type: 'MessageParseError',\n                        error: e,\n                        data: messageEvent.data\n                    });\n                }\n                if (pusherEvent !== undefined) {\n                    logger.debug('Event recd', pusherEvent);\n                    switch (pusherEvent.event) {\n                        case 'pusher:error':\n                            _this.emit('error', {\n                                type: 'PusherError',\n                                data: pusherEvent.data\n                            });\n                            break;\n                        case 'pusher:ping':\n                            _this.emit('ping');\n                            break;\n                        case 'pusher:pong':\n                            _this.emit('pong');\n                            break;\n                    }\n                    _this.emit('message', pusherEvent);\n                }\n            },\n            activity: function () {\n                _this.emit('activity');\n            },\n            error: function (error) {\n                _this.emit('error', error);\n            },\n            closed: function (closeEvent) {\n                unbindListeners();\n                if (closeEvent && closeEvent.code) {\n                    _this.handleCloseEvent(closeEvent);\n                }\n                _this.transport = null;\n                _this.emit('closed');\n            }\n        };\n        var unbindListeners = function () {\n            objectApply(listeners, function (listener, event) {\n                _this.transport.unbind(event, listener);\n            });\n        };\n        objectApply(listeners, function (listener, event) {\n            _this.transport.bind(event, listener);\n        });\n    };\n    Connection.prototype.handleCloseEvent = function (closeEvent) {\n        var action = protocol_protocol.getCloseAction(closeEvent);\n        var error = protocol_protocol.getCloseError(closeEvent);\n        if (error) {\n            this.emit('error', error);\n        }\n        if (action) {\n            this.emit(action, { action: action, error: error });\n        }\n    };\n    return Connection;\n}(dispatcher));\n/* harmony default export */ var connection_connection = (connection_Connection);\n\n// CONCATENATED MODULE: ./src/core/connection/handshake/index.ts\n\n\n\nvar handshake_Handshake = (function () {\n    function Handshake(transport, callback) {\n        this.transport = transport;\n        this.callback = callback;\n        this.bindListeners();\n    }\n    Handshake.prototype.close = function () {\n        this.unbindListeners();\n        this.transport.close();\n    };\n    Handshake.prototype.bindListeners = function () {\n        var _this = this;\n        this.onMessage = function (m) {\n            _this.unbindListeners();\n            var result;\n            try {\n                result = protocol_protocol.processHandshake(m);\n            }\n            catch (e) {\n                _this.finish('error', { error: e });\n                _this.transport.close();\n                return;\n            }\n            if (result.action === 'connected') {\n                _this.finish('connected', {\n                    connection: new connection_connection(result.id, _this.transport),\n                    activityTimeout: result.activityTimeout\n                });\n            }\n            else {\n                _this.finish(result.action, { error: result.error });\n                _this.transport.close();\n            }\n        };\n        this.onClosed = function (closeEvent) {\n            _this.unbindListeners();\n            var action = protocol_protocol.getCloseAction(closeEvent) || 'backoff';\n            var error = protocol_protocol.getCloseError(closeEvent);\n            _this.finish(action, { error: error });\n        };\n        this.transport.bind('message', this.onMessage);\n        this.transport.bind('closed', this.onClosed);\n    };\n    Handshake.prototype.unbindListeners = function () {\n        this.transport.unbind('message', this.onMessage);\n        this.transport.unbind('closed', this.onClosed);\n    };\n    Handshake.prototype.finish = function (action, params) {\n        this.callback(extend({ transport: this.transport, action: action }, params));\n    };\n    return Handshake;\n}());\n/* harmony default export */ var connection_handshake = (handshake_Handshake);\n\n// CONCATENATED MODULE: ./src/core/timeline/timeline_sender.ts\n\nvar timeline_sender_TimelineSender = (function () {\n    function TimelineSender(timeline, options) {\n        this.timeline = timeline;\n        this.options = options || {};\n    }\n    TimelineSender.prototype.send = function (useTLS, callback) {\n        if (this.timeline.isEmpty()) {\n            return;\n        }\n        this.timeline.send(runtime.TimelineTransport.getAgent(this, useTLS), callback);\n    };\n    return TimelineSender;\n}());\n/* harmony default export */ var timeline_sender = (timeline_sender_TimelineSender);\n\n// CONCATENATED MODULE: ./src/core/channels/channel.ts\nvar channel_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar channel_Channel = (function (_super) {\n    channel_extends(Channel, _super);\n    function Channel(name, pusher) {\n        var _this = _super.call(this, function (event, data) {\n            logger.debug('No callbacks on ' + name + ' for ' + event);\n        }) || this;\n        _this.name = name;\n        _this.pusher = pusher;\n        _this.subscribed = false;\n        _this.subscriptionPending = false;\n        _this.subscriptionCancelled = false;\n        return _this;\n    }\n    Channel.prototype.authorize = function (socketId, callback) {\n        return callback(null, { auth: '' });\n    };\n    Channel.prototype.trigger = function (event, data) {\n        if (event.indexOf('client-') !== 0) {\n            throw new BadEventName(\"Event '\" + event + \"' does not start with 'client-'\");\n        }\n        if (!this.subscribed) {\n            var suffix = url_store.buildLogSuffix('triggeringClientEvents');\n            logger.warn(\"Client event triggered before channel 'subscription_succeeded' event . \" + suffix);\n        }\n        return this.pusher.send_event(event, data, this.name);\n    };\n    Channel.prototype.disconnect = function () {\n        this.subscribed = false;\n        this.subscriptionPending = false;\n    };\n    Channel.prototype.handleEvent = function (event) {\n        var eventName = event.event;\n        var data = event.data;\n        if (eventName === 'pusher_internal:subscription_succeeded') {\n            this.handleSubscriptionSucceededEvent(event);\n        }\n        else if (eventName === 'pusher_internal:subscription_count') {\n            this.handleSubscriptionCountEvent(event);\n        }\n        else if (eventName.indexOf('pusher_internal:') !== 0) {\n            var metadata = {};\n            this.emit(eventName, data, metadata);\n        }\n    };\n    Channel.prototype.handleSubscriptionSucceededEvent = function (event) {\n        this.subscriptionPending = false;\n        this.subscribed = true;\n        if (this.subscriptionCancelled) {\n            this.pusher.unsubscribe(this.name);\n        }\n        else {\n            this.emit('pusher:subscription_succeeded', event.data);\n        }\n    };\n    Channel.prototype.handleSubscriptionCountEvent = function (event) {\n        if (event.data.subscription_count) {\n            this.subscriptionCount = event.data.subscription_count;\n        }\n        this.emit('pusher:subscription_count', event.data);\n    };\n    Channel.prototype.subscribe = function () {\n        var _this = this;\n        if (this.subscribed) {\n            return;\n        }\n        this.subscriptionPending = true;\n        this.subscriptionCancelled = false;\n        this.authorize(this.pusher.connection.socket_id, function (error, data) {\n            if (error) {\n                _this.subscriptionPending = false;\n                logger.error(error.toString());\n                _this.emit('pusher:subscription_error', Object.assign({}, {\n                    type: 'AuthError',\n                    error: error.message\n                }, error instanceof HTTPAuthError ? { status: error.status } : {}));\n            }\n            else {\n                _this.pusher.send_event('pusher:subscribe', {\n                    auth: data.auth,\n                    channel_data: data.channel_data,\n                    channel: _this.name\n                });\n            }\n        });\n    };\n    Channel.prototype.unsubscribe = function () {\n        this.subscribed = false;\n        this.pusher.send_event('pusher:unsubscribe', {\n            channel: this.name\n        });\n    };\n    Channel.prototype.cancelSubscription = function () {\n        this.subscriptionCancelled = true;\n    };\n    Channel.prototype.reinstateSubscription = function () {\n        this.subscriptionCancelled = false;\n    };\n    return Channel;\n}(dispatcher));\n/* harmony default export */ var channels_channel = (channel_Channel);\n\n// CONCATENATED MODULE: ./src/core/channels/private_channel.ts\nvar private_channel_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar PrivateChannel = (function (_super) {\n    private_channel_extends(PrivateChannel, _super);\n    function PrivateChannel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PrivateChannel.prototype.authorize = function (socketId, callback) {\n        return this.pusher.config.channelAuthorizer({\n            channelName: this.name,\n            socketId: socketId\n        }, callback);\n    };\n    return PrivateChannel;\n}(channels_channel));\n/* harmony default export */ var private_channel = (PrivateChannel);\n\n// CONCATENATED MODULE: ./src/core/channels/members.ts\n\nvar members_Members = (function () {\n    function Members() {\n        this.reset();\n    }\n    Members.prototype.get = function (id) {\n        if (Object.prototype.hasOwnProperty.call(this.members, id)) {\n            return {\n                id: id,\n                info: this.members[id]\n            };\n        }\n        else {\n            return null;\n        }\n    };\n    Members.prototype.each = function (callback) {\n        var _this = this;\n        objectApply(this.members, function (member, id) {\n            callback(_this.get(id));\n        });\n    };\n    Members.prototype.setMyID = function (id) {\n        this.myID = id;\n    };\n    Members.prototype.onSubscription = function (subscriptionData) {\n        this.members = subscriptionData.presence.hash;\n        this.count = subscriptionData.presence.count;\n        this.me = this.get(this.myID);\n    };\n    Members.prototype.addMember = function (memberData) {\n        if (this.get(memberData.user_id) === null) {\n            this.count++;\n        }\n        this.members[memberData.user_id] = memberData.user_info;\n        return this.get(memberData.user_id);\n    };\n    Members.prototype.removeMember = function (memberData) {\n        var member = this.get(memberData.user_id);\n        if (member) {\n            delete this.members[memberData.user_id];\n            this.count--;\n        }\n        return member;\n    };\n    Members.prototype.reset = function () {\n        this.members = {};\n        this.count = 0;\n        this.myID = null;\n        this.me = null;\n    };\n    return Members;\n}());\n/* harmony default export */ var members = (members_Members);\n\n// CONCATENATED MODULE: ./src/core/channels/presence_channel.ts\nvar presence_channel_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = ( false) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\nvar presence_channel_PresenceChannel = (function (_super) {\n    presence_channel_extends(PresenceChannel, _super);\n    function PresenceChannel(name, pusher) {\n        var _this = _super.call(this, name, pusher) || this;\n        _this.members = new members();\n        return _this;\n    }\n    PresenceChannel.prototype.authorize = function (socketId, callback) {\n        var _this = this;\n        _super.prototype.authorize.call(this, socketId, function (error, authData) { return __awaiter(_this, void 0, void 0, function () {\n            var channelData, suffix;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!error) return [3, 3];\n                        authData = authData;\n                        if (!(authData.channel_data != null)) return [3, 1];\n                        channelData = JSON.parse(authData.channel_data);\n                        this.members.setMyID(channelData.user_id);\n                        return [3, 3];\n                    case 1: return [4, this.pusher.user.signinDonePromise];\n                    case 2:\n                        _a.sent();\n                        if (this.pusher.user.user_data != null) {\n                            this.members.setMyID(this.pusher.user.user_data.id);\n                        }\n                        else {\n                            suffix = url_store.buildLogSuffix('authorizationEndpoint');\n                            logger.error(\"Invalid auth response for channel '\" + this.name + \"', \" +\n                                (\"expected 'channel_data' field. \" + suffix + \", \") +\n                                \"or the user should be signed in.\");\n                            callback('Invalid auth response');\n                            return [2];\n                        }\n                        _a.label = 3;\n                    case 3:\n                        callback(error, authData);\n                        return [2];\n                }\n            });\n        }); });\n    };\n    PresenceChannel.prototype.handleEvent = function (event) {\n        var eventName = event.event;\n        if (eventName.indexOf('pusher_internal:') === 0) {\n            this.handleInternalEvent(event);\n        }\n        else {\n            var data = event.data;\n            var metadata = {};\n            if (event.user_id) {\n                metadata.user_id = event.user_id;\n            }\n            this.emit(eventName, data, metadata);\n        }\n    };\n    PresenceChannel.prototype.handleInternalEvent = function (event) {\n        var eventName = event.event;\n        var data = event.data;\n        switch (eventName) {\n            case 'pusher_internal:subscription_succeeded':\n                this.handleSubscriptionSucceededEvent(event);\n                break;\n            case 'pusher_internal:subscription_count':\n                this.handleSubscriptionCountEvent(event);\n                break;\n            case 'pusher_internal:member_added':\n                var addedMember = this.members.addMember(data);\n                this.emit('pusher:member_added', addedMember);\n                break;\n            case 'pusher_internal:member_removed':\n                var removedMember = this.members.removeMember(data);\n                if (removedMember) {\n                    this.emit('pusher:member_removed', removedMember);\n                }\n                break;\n        }\n    };\n    PresenceChannel.prototype.handleSubscriptionSucceededEvent = function (event) {\n        this.subscriptionPending = false;\n        this.subscribed = true;\n        if (this.subscriptionCancelled) {\n            this.pusher.unsubscribe(this.name);\n        }\n        else {\n            this.members.onSubscription(event.data);\n            this.emit('pusher:subscription_succeeded', this.members);\n        }\n    };\n    PresenceChannel.prototype.disconnect = function () {\n        this.members.reset();\n        _super.prototype.disconnect.call(this);\n    };\n    return PresenceChannel;\n}(private_channel));\n/* harmony default export */ var presence_channel = (presence_channel_PresenceChannel);\n\n// EXTERNAL MODULE: ./node_modules/@stablelib/utf8/lib/utf8.js\nvar utf8 = __nested_webpack_require_20105__(1);\n\n// EXTERNAL MODULE: ./node_modules/@stablelib/base64/lib/base64.js\nvar base64 = __nested_webpack_require_20105__(0);\n\n// CONCATENATED MODULE: ./src/core/channels/encrypted_channel.ts\nvar encrypted_channel_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar encrypted_channel_EncryptedChannel = (function (_super) {\n    encrypted_channel_extends(EncryptedChannel, _super);\n    function EncryptedChannel(name, pusher, nacl) {\n        var _this = _super.call(this, name, pusher) || this;\n        _this.key = null;\n        _this.nacl = nacl;\n        return _this;\n    }\n    EncryptedChannel.prototype.authorize = function (socketId, callback) {\n        var _this = this;\n        _super.prototype.authorize.call(this, socketId, function (error, authData) {\n            if (error) {\n                callback(error, authData);\n                return;\n            }\n            var sharedSecret = authData['shared_secret'];\n            if (!sharedSecret) {\n                callback(new Error(\"No shared_secret key in auth payload for encrypted channel: \" + _this.name), null);\n                return;\n            }\n            _this.key = Object(base64[\"decode\"])(sharedSecret);\n            delete authData['shared_secret'];\n            callback(null, authData);\n        });\n    };\n    EncryptedChannel.prototype.trigger = function (event, data) {\n        throw new UnsupportedFeature('Client events are not currently supported for encrypted channels');\n    };\n    EncryptedChannel.prototype.handleEvent = function (event) {\n        var eventName = event.event;\n        var data = event.data;\n        if (eventName.indexOf('pusher_internal:') === 0 ||\n            eventName.indexOf('pusher:') === 0) {\n            _super.prototype.handleEvent.call(this, event);\n            return;\n        }\n        this.handleEncryptedEvent(eventName, data);\n    };\n    EncryptedChannel.prototype.handleEncryptedEvent = function (event, data) {\n        var _this = this;\n        if (!this.key) {\n            logger.debug('Received encrypted event before key has been retrieved from the authEndpoint');\n            return;\n        }\n        if (!data.ciphertext || !data.nonce) {\n            logger.error('Unexpected format for encrypted event, expected object with `ciphertext` and `nonce` fields, got: ' +\n                data);\n            return;\n        }\n        var cipherText = Object(base64[\"decode\"])(data.ciphertext);\n        if (cipherText.length < this.nacl.secretbox.overheadLength) {\n            logger.error(\"Expected encrypted event ciphertext length to be \" + this.nacl.secretbox.overheadLength + \", got: \" + cipherText.length);\n            return;\n        }\n        var nonce = Object(base64[\"decode\"])(data.nonce);\n        if (nonce.length < this.nacl.secretbox.nonceLength) {\n            logger.error(\"Expected encrypted event nonce length to be \" + this.nacl.secretbox.nonceLength + \", got: \" + nonce.length);\n            return;\n        }\n        var bytes = this.nacl.secretbox.open(cipherText, nonce, this.key);\n        if (bytes === null) {\n            logger.debug('Failed to decrypt an event, probably because it was encrypted with a different key. Fetching a new key from the authEndpoint...');\n            this.authorize(this.pusher.connection.socket_id, function (error, authData) {\n                if (error) {\n                    logger.error(\"Failed to make a request to the authEndpoint: \" + authData + \". Unable to fetch new key, so dropping encrypted event\");\n                    return;\n                }\n                bytes = _this.nacl.secretbox.open(cipherText, nonce, _this.key);\n                if (bytes === null) {\n                    logger.error(\"Failed to decrypt event with new key. Dropping encrypted event\");\n                    return;\n                }\n                _this.emit(event, _this.getDataToEmit(bytes));\n                return;\n            });\n            return;\n        }\n        this.emit(event, this.getDataToEmit(bytes));\n    };\n    EncryptedChannel.prototype.getDataToEmit = function (bytes) {\n        var raw = Object(utf8[\"decode\"])(bytes);\n        try {\n            return JSON.parse(raw);\n        }\n        catch (_a) {\n            return raw;\n        }\n    };\n    return EncryptedChannel;\n}(private_channel));\n/* harmony default export */ var encrypted_channel = (encrypted_channel_EncryptedChannel);\n\n// CONCATENATED MODULE: ./src/core/connection/connection_manager.ts\nvar connection_manager_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar connection_manager_ConnectionManager = (function (_super) {\n    connection_manager_extends(ConnectionManager, _super);\n    function ConnectionManager(key, options) {\n        var _this = _super.call(this) || this;\n        _this.state = 'initialized';\n        _this.connection = null;\n        _this.key = key;\n        _this.options = options;\n        _this.timeline = _this.options.timeline;\n        _this.usingTLS = _this.options.useTLS;\n        _this.errorCallbacks = _this.buildErrorCallbacks();\n        _this.connectionCallbacks = _this.buildConnectionCallbacks(_this.errorCallbacks);\n        _this.handshakeCallbacks = _this.buildHandshakeCallbacks(_this.errorCallbacks);\n        var Network = runtime.getNetwork();\n        Network.bind('online', function () {\n            _this.timeline.info({ netinfo: 'online' });\n            if (_this.state === 'connecting' || _this.state === 'unavailable') {\n                _this.retryIn(0);\n            }\n        });\n        Network.bind('offline', function () {\n            _this.timeline.info({ netinfo: 'offline' });\n            if (_this.connection) {\n                _this.sendActivityCheck();\n            }\n        });\n        _this.updateStrategy();\n        return _this;\n    }\n    ConnectionManager.prototype.connect = function () {\n        if (this.connection || this.runner) {\n            return;\n        }\n        if (!this.strategy.isSupported()) {\n            this.updateState('failed');\n            return;\n        }\n        this.updateState('connecting');\n        this.startConnecting();\n        this.setUnavailableTimer();\n    };\n    ConnectionManager.prototype.send = function (data) {\n        if (this.connection) {\n            return this.connection.send(data);\n        }\n        else {\n            return false;\n        }\n    };\n    ConnectionManager.prototype.send_event = function (name, data, channel) {\n        if (this.connection) {\n            return this.connection.send_event(name, data, channel);\n        }\n        else {\n            return false;\n        }\n    };\n    ConnectionManager.prototype.disconnect = function () {\n        this.disconnectInternally();\n        this.updateState('disconnected');\n    };\n    ConnectionManager.prototype.isUsingTLS = function () {\n        return this.usingTLS;\n    };\n    ConnectionManager.prototype.startConnecting = function () {\n        var _this = this;\n        var callback = function (error, handshake) {\n            if (error) {\n                _this.runner = _this.strategy.connect(0, callback);\n            }\n            else {\n                if (handshake.action === 'error') {\n                    _this.emit('error', {\n                        type: 'HandshakeError',\n                        error: handshake.error\n                    });\n                    _this.timeline.error({ handshakeError: handshake.error });\n                }\n                else {\n                    _this.abortConnecting();\n                    _this.handshakeCallbacks[handshake.action](handshake);\n                }\n            }\n        };\n        this.runner = this.strategy.connect(0, callback);\n    };\n    ConnectionManager.prototype.abortConnecting = function () {\n        if (this.runner) {\n            this.runner.abort();\n            this.runner = null;\n        }\n    };\n    ConnectionManager.prototype.disconnectInternally = function () {\n        this.abortConnecting();\n        this.clearRetryTimer();\n        this.clearUnavailableTimer();\n        if (this.connection) {\n            var connection = this.abandonConnection();\n            connection.close();\n        }\n    };\n    ConnectionManager.prototype.updateStrategy = function () {\n        this.strategy = this.options.getStrategy({\n            key: this.key,\n            timeline: this.timeline,\n            useTLS: this.usingTLS\n        });\n    };\n    ConnectionManager.prototype.retryIn = function (delay) {\n        var _this = this;\n        this.timeline.info({ action: 'retry', delay: delay });\n        if (delay > 0) {\n            this.emit('connecting_in', Math.round(delay / 1000));\n        }\n        this.retryTimer = new OneOffTimer(delay || 0, function () {\n            _this.disconnectInternally();\n            _this.connect();\n        });\n    };\n    ConnectionManager.prototype.clearRetryTimer = function () {\n        if (this.retryTimer) {\n            this.retryTimer.ensureAborted();\n            this.retryTimer = null;\n        }\n    };\n    ConnectionManager.prototype.setUnavailableTimer = function () {\n        var _this = this;\n        this.unavailableTimer = new OneOffTimer(this.options.unavailableTimeout, function () {\n            _this.updateState('unavailable');\n        });\n    };\n    ConnectionManager.prototype.clearUnavailableTimer = function () {\n        if (this.unavailableTimer) {\n            this.unavailableTimer.ensureAborted();\n        }\n    };\n    ConnectionManager.prototype.sendActivityCheck = function () {\n        var _this = this;\n        this.stopActivityCheck();\n        this.connection.ping();\n        this.activityTimer = new OneOffTimer(this.options.pongTimeout, function () {\n            _this.timeline.error({ pong_timed_out: _this.options.pongTimeout });\n            _this.retryIn(0);\n        });\n    };\n    ConnectionManager.prototype.resetActivityCheck = function () {\n        var _this = this;\n        this.stopActivityCheck();\n        if (this.connection && !this.connection.handlesActivityChecks()) {\n            this.activityTimer = new OneOffTimer(this.activityTimeout, function () {\n                _this.sendActivityCheck();\n            });\n        }\n    };\n    ConnectionManager.prototype.stopActivityCheck = function () {\n        if (this.activityTimer) {\n            this.activityTimer.ensureAborted();\n        }\n    };\n    ConnectionManager.prototype.buildConnectionCallbacks = function (errorCallbacks) {\n        var _this = this;\n        return extend({}, errorCallbacks, {\n            message: function (message) {\n                _this.resetActivityCheck();\n                _this.emit('message', message);\n            },\n            ping: function () {\n                _this.send_event('pusher:pong', {});\n            },\n            activity: function () {\n                _this.resetActivityCheck();\n            },\n            error: function (error) {\n                _this.emit('error', error);\n            },\n            closed: function () {\n                _this.abandonConnection();\n                if (_this.shouldRetry()) {\n                    _this.retryIn(1000);\n                }\n            }\n        });\n    };\n    ConnectionManager.prototype.buildHandshakeCallbacks = function (errorCallbacks) {\n        var _this = this;\n        return extend({}, errorCallbacks, {\n            connected: function (handshake) {\n                _this.activityTimeout = Math.min(_this.options.activityTimeout, handshake.activityTimeout, handshake.connection.activityTimeout || Infinity);\n                _this.clearUnavailableTimer();\n                _this.setConnection(handshake.connection);\n                _this.socket_id = _this.connection.id;\n                _this.updateState('connected', { socket_id: _this.socket_id });\n            }\n        });\n    };\n    ConnectionManager.prototype.buildErrorCallbacks = function () {\n        var _this = this;\n        var withErrorEmitted = function (callback) {\n            return function (result) {\n                if (result.error) {\n                    _this.emit('error', { type: 'WebSocketError', error: result.error });\n                }\n                callback(result);\n            };\n        };\n        return {\n            tls_only: withErrorEmitted(function () {\n                _this.usingTLS = true;\n                _this.updateStrategy();\n                _this.retryIn(0);\n            }),\n            refused: withErrorEmitted(function () {\n                _this.disconnect();\n            }),\n            backoff: withErrorEmitted(function () {\n                _this.retryIn(1000);\n            }),\n            retry: withErrorEmitted(function () {\n                _this.retryIn(0);\n            })\n        };\n    };\n    ConnectionManager.prototype.setConnection = function (connection) {\n        this.connection = connection;\n        for (var event in this.connectionCallbacks) {\n            this.connection.bind(event, this.connectionCallbacks[event]);\n        }\n        this.resetActivityCheck();\n    };\n    ConnectionManager.prototype.abandonConnection = function () {\n        if (!this.connection) {\n            return;\n        }\n        this.stopActivityCheck();\n        for (var event in this.connectionCallbacks) {\n            this.connection.unbind(event, this.connectionCallbacks[event]);\n        }\n        var connection = this.connection;\n        this.connection = null;\n        return connection;\n    };\n    ConnectionManager.prototype.updateState = function (newState, data) {\n        var previousState = this.state;\n        this.state = newState;\n        if (previousState !== newState) {\n            var newStateDescription = newState;\n            if (newStateDescription === 'connected') {\n                newStateDescription += ' with new socket ID ' + data.socket_id;\n            }\n            logger.debug('State changed', previousState + ' -> ' + newStateDescription);\n            this.timeline.info({ state: newState, params: data });\n            this.emit('state_change', { previous: previousState, current: newState });\n            this.emit(newState, data);\n        }\n    };\n    ConnectionManager.prototype.shouldRetry = function () {\n        return this.state === 'connecting' || this.state === 'connected';\n    };\n    return ConnectionManager;\n}(dispatcher));\n/* harmony default export */ var connection_manager = (connection_manager_ConnectionManager);\n\n// CONCATENATED MODULE: ./src/core/channels/channels.ts\n\n\n\n\nvar channels_Channels = (function () {\n    function Channels() {\n        this.channels = {};\n    }\n    Channels.prototype.add = function (name, pusher) {\n        if (!this.channels[name]) {\n            this.channels[name] = createChannel(name, pusher);\n        }\n        return this.channels[name];\n    };\n    Channels.prototype.all = function () {\n        return values(this.channels);\n    };\n    Channels.prototype.find = function (name) {\n        return this.channels[name];\n    };\n    Channels.prototype.remove = function (name) {\n        var channel = this.channels[name];\n        delete this.channels[name];\n        return channel;\n    };\n    Channels.prototype.disconnect = function () {\n        objectApply(this.channels, function (channel) {\n            channel.disconnect();\n        });\n    };\n    return Channels;\n}());\n/* harmony default export */ var channels = (channels_Channels);\nfunction createChannel(name, pusher) {\n    if (name.indexOf('private-encrypted-') === 0) {\n        if (pusher.config.nacl) {\n            return factory.createEncryptedChannel(name, pusher, pusher.config.nacl);\n        }\n        var errMsg = 'Tried to subscribe to a private-encrypted- channel but no nacl implementation available';\n        var suffix = url_store.buildLogSuffix('encryptedChannelSupport');\n        throw new UnsupportedFeature(errMsg + \". \" + suffix);\n    }\n    else if (name.indexOf('private-') === 0) {\n        return factory.createPrivateChannel(name, pusher);\n    }\n    else if (name.indexOf('presence-') === 0) {\n        return factory.createPresenceChannel(name, pusher);\n    }\n    else if (name.indexOf('#') === 0) {\n        throw new BadChannelName('Cannot create a channel with name \"' + name + '\".');\n    }\n    else {\n        return factory.createChannel(name, pusher);\n    }\n}\n\n// CONCATENATED MODULE: ./src/core/utils/factory.ts\n\n\n\n\n\n\n\n\n\nvar Factory = {\n    createChannels: function () {\n        return new channels();\n    },\n    createConnectionManager: function (key, options) {\n        return new connection_manager(key, options);\n    },\n    createChannel: function (name, pusher) {\n        return new channels_channel(name, pusher);\n    },\n    createPrivateChannel: function (name, pusher) {\n        return new private_channel(name, pusher);\n    },\n    createPresenceChannel: function (name, pusher) {\n        return new presence_channel(name, pusher);\n    },\n    createEncryptedChannel: function (name, pusher, nacl) {\n        return new encrypted_channel(name, pusher, nacl);\n    },\n    createTimelineSender: function (timeline, options) {\n        return new timeline_sender(timeline, options);\n    },\n    createHandshake: function (transport, callback) {\n        return new connection_handshake(transport, callback);\n    },\n    createAssistantToTheTransportManager: function (manager, transport, options) {\n        return new assistant_to_the_transport_manager(manager, transport, options);\n    }\n};\n/* harmony default export */ var factory = (Factory);\n\n// CONCATENATED MODULE: ./src/core/transports/transport_manager.ts\n\nvar transport_manager_TransportManager = (function () {\n    function TransportManager(options) {\n        this.options = options || {};\n        this.livesLeft = this.options.lives || Infinity;\n    }\n    TransportManager.prototype.getAssistant = function (transport) {\n        return factory.createAssistantToTheTransportManager(this, transport, {\n            minPingDelay: this.options.minPingDelay,\n            maxPingDelay: this.options.maxPingDelay\n        });\n    };\n    TransportManager.prototype.isAlive = function () {\n        return this.livesLeft > 0;\n    };\n    TransportManager.prototype.reportDeath = function () {\n        this.livesLeft -= 1;\n    };\n    return TransportManager;\n}());\n/* harmony default export */ var transport_manager = (transport_manager_TransportManager);\n\n// CONCATENATED MODULE: ./src/core/strategies/sequential_strategy.ts\n\n\n\nvar sequential_strategy_SequentialStrategy = (function () {\n    function SequentialStrategy(strategies, options) {\n        this.strategies = strategies;\n        this.loop = Boolean(options.loop);\n        this.failFast = Boolean(options.failFast);\n        this.timeout = options.timeout;\n        this.timeoutLimit = options.timeoutLimit;\n    }\n    SequentialStrategy.prototype.isSupported = function () {\n        return any(this.strategies, util.method('isSupported'));\n    };\n    SequentialStrategy.prototype.connect = function (minPriority, callback) {\n        var _this = this;\n        var strategies = this.strategies;\n        var current = 0;\n        var timeout = this.timeout;\n        var runner = null;\n        var tryNextStrategy = function (error, handshake) {\n            if (handshake) {\n                callback(null, handshake);\n            }\n            else {\n                current = current + 1;\n                if (_this.loop) {\n                    current = current % strategies.length;\n                }\n                if (current < strategies.length) {\n                    if (timeout) {\n                        timeout = timeout * 2;\n                        if (_this.timeoutLimit) {\n                            timeout = Math.min(timeout, _this.timeoutLimit);\n                        }\n                    }\n                    runner = _this.tryStrategy(strategies[current], minPriority, { timeout: timeout, failFast: _this.failFast }, tryNextStrategy);\n                }\n                else {\n                    callback(true);\n                }\n            }\n        };\n        runner = this.tryStrategy(strategies[current], minPriority, { timeout: timeout, failFast: this.failFast }, tryNextStrategy);\n        return {\n            abort: function () {\n                runner.abort();\n            },\n            forceMinPriority: function (p) {\n                minPriority = p;\n                if (runner) {\n                    runner.forceMinPriority(p);\n                }\n            }\n        };\n    };\n    SequentialStrategy.prototype.tryStrategy = function (strategy, minPriority, options, callback) {\n        var timer = null;\n        var runner = null;\n        if (options.timeout > 0) {\n            timer = new OneOffTimer(options.timeout, function () {\n                runner.abort();\n                callback(true);\n            });\n        }\n        runner = strategy.connect(minPriority, function (error, handshake) {\n            if (error && timer && timer.isRunning() && !options.failFast) {\n                return;\n            }\n            if (timer) {\n                timer.ensureAborted();\n            }\n            callback(error, handshake);\n        });\n        return {\n            abort: function () {\n                if (timer) {\n                    timer.ensureAborted();\n                }\n                runner.abort();\n            },\n            forceMinPriority: function (p) {\n                runner.forceMinPriority(p);\n            }\n        };\n    };\n    return SequentialStrategy;\n}());\n/* harmony default export */ var sequential_strategy = (sequential_strategy_SequentialStrategy);\n\n// CONCATENATED MODULE: ./src/core/strategies/best_connected_ever_strategy.ts\n\n\nvar best_connected_ever_strategy_BestConnectedEverStrategy = (function () {\n    function BestConnectedEverStrategy(strategies) {\n        this.strategies = strategies;\n    }\n    BestConnectedEverStrategy.prototype.isSupported = function () {\n        return any(this.strategies, util.method('isSupported'));\n    };\n    BestConnectedEverStrategy.prototype.connect = function (minPriority, callback) {\n        return connect(this.strategies, minPriority, function (i, runners) {\n            return function (error, handshake) {\n                runners[i].error = error;\n                if (error) {\n                    if (allRunnersFailed(runners)) {\n                        callback(true);\n                    }\n                    return;\n                }\n                apply(runners, function (runner) {\n                    runner.forceMinPriority(handshake.transport.priority);\n                });\n                callback(null, handshake);\n            };\n        });\n    };\n    return BestConnectedEverStrategy;\n}());\n/* harmony default export */ var best_connected_ever_strategy = (best_connected_ever_strategy_BestConnectedEverStrategy);\nfunction connect(strategies, minPriority, callbackBuilder) {\n    var runners = map(strategies, function (strategy, i, _, rs) {\n        return strategy.connect(minPriority, callbackBuilder(i, rs));\n    });\n    return {\n        abort: function () {\n            apply(runners, abortRunner);\n        },\n        forceMinPriority: function (p) {\n            apply(runners, function (runner) {\n                runner.forceMinPriority(p);\n            });\n        }\n    };\n}\nfunction allRunnersFailed(runners) {\n    return collections_all(runners, function (runner) {\n        return Boolean(runner.error);\n    });\n}\nfunction abortRunner(runner) {\n    if (!runner.error && !runner.aborted) {\n        runner.abort();\n        runner.aborted = true;\n    }\n}\n\n// CONCATENATED MODULE: ./src/core/strategies/cached_strategy.ts\n\n\n\n\nvar cached_strategy_CachedStrategy = (function () {\n    function CachedStrategy(strategy, transports, options) {\n        this.strategy = strategy;\n        this.transports = transports;\n        this.ttl = options.ttl || 1800 * 1000;\n        this.usingTLS = options.useTLS;\n        this.timeline = options.timeline;\n    }\n    CachedStrategy.prototype.isSupported = function () {\n        return this.strategy.isSupported();\n    };\n    CachedStrategy.prototype.connect = function (minPriority, callback) {\n        var usingTLS = this.usingTLS;\n        var info = fetchTransportCache(usingTLS);\n        var strategies = [this.strategy];\n        if (info && info.timestamp + this.ttl >= util.now()) {\n            var transport = this.transports[info.transport];\n            if (transport) {\n                this.timeline.info({\n                    cached: true,\n                    transport: info.transport,\n                    latency: info.latency\n                });\n                strategies.push(new sequential_strategy([transport], {\n                    timeout: info.latency * 2 + 1000,\n                    failFast: true\n                }));\n            }\n        }\n        var startTimestamp = util.now();\n        var runner = strategies\n            .pop()\n            .connect(minPriority, function cb(error, handshake) {\n            if (error) {\n                flushTransportCache(usingTLS);\n                if (strategies.length > 0) {\n                    startTimestamp = util.now();\n                    runner = strategies.pop().connect(minPriority, cb);\n                }\n                else {\n                    callback(error);\n                }\n            }\n            else {\n                storeTransportCache(usingTLS, handshake.transport.name, util.now() - startTimestamp);\n                callback(null, handshake);\n            }\n        });\n        return {\n            abort: function () {\n                runner.abort();\n            },\n            forceMinPriority: function (p) {\n                minPriority = p;\n                if (runner) {\n                    runner.forceMinPriority(p);\n                }\n            }\n        };\n    };\n    return CachedStrategy;\n}());\n/* harmony default export */ var cached_strategy = (cached_strategy_CachedStrategy);\nfunction getTransportCacheKey(usingTLS) {\n    return 'pusherTransport' + (usingTLS ? 'TLS' : 'NonTLS');\n}\nfunction fetchTransportCache(usingTLS) {\n    var storage = runtime.getLocalStorage();\n    if (storage) {\n        try {\n            var serializedCache = storage[getTransportCacheKey(usingTLS)];\n            if (serializedCache) {\n                return JSON.parse(serializedCache);\n            }\n        }\n        catch (e) {\n            flushTransportCache(usingTLS);\n        }\n    }\n    return null;\n}\nfunction storeTransportCache(usingTLS, transport, latency) {\n    var storage = runtime.getLocalStorage();\n    if (storage) {\n        try {\n            storage[getTransportCacheKey(usingTLS)] = safeJSONStringify({\n                timestamp: util.now(),\n                transport: transport,\n                latency: latency\n            });\n        }\n        catch (e) {\n        }\n    }\n}\nfunction flushTransportCache(usingTLS) {\n    var storage = runtime.getLocalStorage();\n    if (storage) {\n        try {\n            delete storage[getTransportCacheKey(usingTLS)];\n        }\n        catch (e) {\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/core/strategies/delayed_strategy.ts\n\nvar delayed_strategy_DelayedStrategy = (function () {\n    function DelayedStrategy(strategy, _a) {\n        var number = _a.delay;\n        this.strategy = strategy;\n        this.options = { delay: number };\n    }\n    DelayedStrategy.prototype.isSupported = function () {\n        return this.strategy.isSupported();\n    };\n    DelayedStrategy.prototype.connect = function (minPriority, callback) {\n        var strategy = this.strategy;\n        var runner;\n        var timer = new OneOffTimer(this.options.delay, function () {\n            runner = strategy.connect(minPriority, callback);\n        });\n        return {\n            abort: function () {\n                timer.ensureAborted();\n                if (runner) {\n                    runner.abort();\n                }\n            },\n            forceMinPriority: function (p) {\n                minPriority = p;\n                if (runner) {\n                    runner.forceMinPriority(p);\n                }\n            }\n        };\n    };\n    return DelayedStrategy;\n}());\n/* harmony default export */ var delayed_strategy = (delayed_strategy_DelayedStrategy);\n\n// CONCATENATED MODULE: ./src/core/strategies/if_strategy.ts\nvar IfStrategy = (function () {\n    function IfStrategy(test, trueBranch, falseBranch) {\n        this.test = test;\n        this.trueBranch = trueBranch;\n        this.falseBranch = falseBranch;\n    }\n    IfStrategy.prototype.isSupported = function () {\n        var branch = this.test() ? this.trueBranch : this.falseBranch;\n        return branch.isSupported();\n    };\n    IfStrategy.prototype.connect = function (minPriority, callback) {\n        var branch = this.test() ? this.trueBranch : this.falseBranch;\n        return branch.connect(minPriority, callback);\n    };\n    return IfStrategy;\n}());\n/* harmony default export */ var if_strategy = (IfStrategy);\n\n// CONCATENATED MODULE: ./src/core/strategies/first_connected_strategy.ts\nvar FirstConnectedStrategy = (function () {\n    function FirstConnectedStrategy(strategy) {\n        this.strategy = strategy;\n    }\n    FirstConnectedStrategy.prototype.isSupported = function () {\n        return this.strategy.isSupported();\n    };\n    FirstConnectedStrategy.prototype.connect = function (minPriority, callback) {\n        var runner = this.strategy.connect(minPriority, function (error, handshake) {\n            if (handshake) {\n                runner.abort();\n            }\n            callback(error, handshake);\n        });\n        return runner;\n    };\n    return FirstConnectedStrategy;\n}());\n/* harmony default export */ var first_connected_strategy = (FirstConnectedStrategy);\n\n// CONCATENATED MODULE: ./src/runtimes/web/default_strategy.ts\n\n\n\n\n\n\n\nfunction testSupportsStrategy(strategy) {\n    return function () {\n        return strategy.isSupported();\n    };\n}\nvar getDefaultStrategy = function (config, baseOptions, defineTransport) {\n    var definedTransports = {};\n    function defineTransportStrategy(name, type, priority, options, manager) {\n        var transport = defineTransport(config, name, type, priority, options, manager);\n        definedTransports[name] = transport;\n        return transport;\n    }\n    var ws_options = Object.assign({}, baseOptions, {\n        hostNonTLS: config.wsHost + ':' + config.wsPort,\n        hostTLS: config.wsHost + ':' + config.wssPort,\n        httpPath: config.wsPath\n    });\n    var wss_options = Object.assign({}, ws_options, {\n        useTLS: true\n    });\n    var sockjs_options = Object.assign({}, baseOptions, {\n        hostNonTLS: config.httpHost + ':' + config.httpPort,\n        hostTLS: config.httpHost + ':' + config.httpsPort,\n        httpPath: config.httpPath\n    });\n    var timeouts = {\n        loop: true,\n        timeout: 15000,\n        timeoutLimit: 60000\n    };\n    var ws_manager = new transport_manager({\n        lives: 2,\n        minPingDelay: 10000,\n        maxPingDelay: config.activityTimeout\n    });\n    var streaming_manager = new transport_manager({\n        lives: 2,\n        minPingDelay: 10000,\n        maxPingDelay: config.activityTimeout\n    });\n    var ws_transport = defineTransportStrategy('ws', 'ws', 3, ws_options, ws_manager);\n    var wss_transport = defineTransportStrategy('wss', 'ws', 3, wss_options, ws_manager);\n    var sockjs_transport = defineTransportStrategy('sockjs', 'sockjs', 1, sockjs_options);\n    var xhr_streaming_transport = defineTransportStrategy('xhr_streaming', 'xhr_streaming', 1, sockjs_options, streaming_manager);\n    var xdr_streaming_transport = defineTransportStrategy('xdr_streaming', 'xdr_streaming', 1, sockjs_options, streaming_manager);\n    var xhr_polling_transport = defineTransportStrategy('xhr_polling', 'xhr_polling', 1, sockjs_options);\n    var xdr_polling_transport = defineTransportStrategy('xdr_polling', 'xdr_polling', 1, sockjs_options);\n    var ws_loop = new sequential_strategy([ws_transport], timeouts);\n    var wss_loop = new sequential_strategy([wss_transport], timeouts);\n    var sockjs_loop = new sequential_strategy([sockjs_transport], timeouts);\n    var streaming_loop = new sequential_strategy([\n        new if_strategy(testSupportsStrategy(xhr_streaming_transport), xhr_streaming_transport, xdr_streaming_transport)\n    ], timeouts);\n    var polling_loop = new sequential_strategy([\n        new if_strategy(testSupportsStrategy(xhr_polling_transport), xhr_polling_transport, xdr_polling_transport)\n    ], timeouts);\n    var http_loop = new sequential_strategy([\n        new if_strategy(testSupportsStrategy(streaming_loop), new best_connected_ever_strategy([\n            streaming_loop,\n            new delayed_strategy(polling_loop, { delay: 4000 })\n        ]), polling_loop)\n    ], timeouts);\n    var http_fallback_loop = new if_strategy(testSupportsStrategy(http_loop), http_loop, sockjs_loop);\n    var wsStrategy;\n    if (baseOptions.useTLS) {\n        wsStrategy = new best_connected_ever_strategy([\n            ws_loop,\n            new delayed_strategy(http_fallback_loop, { delay: 2000 })\n        ]);\n    }\n    else {\n        wsStrategy = new best_connected_ever_strategy([\n            ws_loop,\n            new delayed_strategy(wss_loop, { delay: 2000 }),\n            new delayed_strategy(http_fallback_loop, { delay: 5000 })\n        ]);\n    }\n    return new cached_strategy(new first_connected_strategy(new if_strategy(testSupportsStrategy(ws_transport), wsStrategy, http_fallback_loop)), definedTransports, {\n        ttl: 1800000,\n        timeline: baseOptions.timeline,\n        useTLS: baseOptions.useTLS\n    });\n};\n/* harmony default export */ var default_strategy = (getDefaultStrategy);\n\n// CONCATENATED MODULE: ./src/runtimes/web/transports/transport_connection_initializer.ts\n\n/* harmony default export */ var transport_connection_initializer = (function () {\n    var self = this;\n    self.timeline.info(self.buildTimelineMessage({\n        transport: self.name + (self.options.useTLS ? 's' : '')\n    }));\n    if (self.hooks.isInitialized()) {\n        self.changeState('initialized');\n    }\n    else if (self.hooks.file) {\n        self.changeState('initializing');\n        Dependencies.load(self.hooks.file, { useTLS: self.options.useTLS }, function (error, callback) {\n            if (self.hooks.isInitialized()) {\n                self.changeState('initialized');\n                callback(true);\n            }\n            else {\n                if (error) {\n                    self.onError(error);\n                }\n                self.onClose();\n                callback(false);\n            }\n        });\n    }\n    else {\n        self.onClose();\n    }\n});\n\n// CONCATENATED MODULE: ./src/runtimes/web/http/http_xdomain_request.ts\n\nvar http_xdomain_request_hooks = {\n    getRequest: function (socket) {\n        var xdr = new window.XDomainRequest();\n        xdr.ontimeout = function () {\n            socket.emit('error', new RequestTimedOut());\n            socket.close();\n        };\n        xdr.onerror = function (e) {\n            socket.emit('error', e);\n            socket.close();\n        };\n        xdr.onprogress = function () {\n            if (xdr.responseText && xdr.responseText.length > 0) {\n                socket.onChunk(200, xdr.responseText);\n            }\n        };\n        xdr.onload = function () {\n            if (xdr.responseText && xdr.responseText.length > 0) {\n                socket.onChunk(200, xdr.responseText);\n            }\n            socket.emit('finished', 200);\n            socket.close();\n        };\n        return xdr;\n    },\n    abortRequest: function (xdr) {\n        xdr.ontimeout = xdr.onerror = xdr.onprogress = xdr.onload = null;\n        xdr.abort();\n    }\n};\n/* harmony default export */ var http_xdomain_request = (http_xdomain_request_hooks);\n\n// CONCATENATED MODULE: ./src/core/http/http_request.ts\nvar http_request_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar MAX_BUFFER_LENGTH = 256 * 1024;\nvar http_request_HTTPRequest = (function (_super) {\n    http_request_extends(HTTPRequest, _super);\n    function HTTPRequest(hooks, method, url) {\n        var _this = _super.call(this) || this;\n        _this.hooks = hooks;\n        _this.method = method;\n        _this.url = url;\n        return _this;\n    }\n    HTTPRequest.prototype.start = function (payload) {\n        var _this = this;\n        this.position = 0;\n        this.xhr = this.hooks.getRequest(this);\n        this.unloader = function () {\n            _this.close();\n        };\n        runtime.addUnloadListener(this.unloader);\n        this.xhr.open(this.method, this.url, true);\n        if (this.xhr.setRequestHeader) {\n            this.xhr.setRequestHeader('Content-Type', 'application/json');\n        }\n        this.xhr.send(payload);\n    };\n    HTTPRequest.prototype.close = function () {\n        if (this.unloader) {\n            runtime.removeUnloadListener(this.unloader);\n            this.unloader = null;\n        }\n        if (this.xhr) {\n            this.hooks.abortRequest(this.xhr);\n            this.xhr = null;\n        }\n    };\n    HTTPRequest.prototype.onChunk = function (status, data) {\n        while (true) {\n            var chunk = this.advanceBuffer(data);\n            if (chunk) {\n                this.emit('chunk', { status: status, data: chunk });\n            }\n            else {\n                break;\n            }\n        }\n        if (this.isBufferTooLong(data)) {\n            this.emit('buffer_too_long');\n        }\n    };\n    HTTPRequest.prototype.advanceBuffer = function (buffer) {\n        var unreadData = buffer.slice(this.position);\n        var endOfLinePosition = unreadData.indexOf('\\n');\n        if (endOfLinePosition !== -1) {\n            this.position += endOfLinePosition + 1;\n            return unreadData.slice(0, endOfLinePosition);\n        }\n        else {\n            return null;\n        }\n    };\n    HTTPRequest.prototype.isBufferTooLong = function (buffer) {\n        return this.position === buffer.length && buffer.length > MAX_BUFFER_LENGTH;\n    };\n    return HTTPRequest;\n}(dispatcher));\n/* harmony default export */ var http_request = (http_request_HTTPRequest);\n\n// CONCATENATED MODULE: ./src/core/http/state.ts\nvar State;\n(function (State) {\n    State[State[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    State[State[\"OPEN\"] = 1] = \"OPEN\";\n    State[State[\"CLOSED\"] = 3] = \"CLOSED\";\n})(State || (State = {}));\n/* harmony default export */ var state = (State);\n\n// CONCATENATED MODULE: ./src/core/http/http_socket.ts\n\n\n\nvar autoIncrement = 1;\nvar http_socket_HTTPSocket = (function () {\n    function HTTPSocket(hooks, url) {\n        this.hooks = hooks;\n        this.session = randomNumber(1000) + '/' + randomString(8);\n        this.location = getLocation(url);\n        this.readyState = state.CONNECTING;\n        this.openStream();\n    }\n    HTTPSocket.prototype.send = function (payload) {\n        return this.sendRaw(JSON.stringify([payload]));\n    };\n    HTTPSocket.prototype.ping = function () {\n        this.hooks.sendHeartbeat(this);\n    };\n    HTTPSocket.prototype.close = function (code, reason) {\n        this.onClose(code, reason, true);\n    };\n    HTTPSocket.prototype.sendRaw = function (payload) {\n        if (this.readyState === state.OPEN) {\n            try {\n                runtime.createSocketRequest('POST', getUniqueURL(getSendURL(this.location, this.session))).start(payload);\n                return true;\n            }\n            catch (e) {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    HTTPSocket.prototype.reconnect = function () {\n        this.closeStream();\n        this.openStream();\n    };\n    HTTPSocket.prototype.onClose = function (code, reason, wasClean) {\n        this.closeStream();\n        this.readyState = state.CLOSED;\n        if (this.onclose) {\n            this.onclose({\n                code: code,\n                reason: reason,\n                wasClean: wasClean\n            });\n        }\n    };\n    HTTPSocket.prototype.onChunk = function (chunk) {\n        if (chunk.status !== 200) {\n            return;\n        }\n        if (this.readyState === state.OPEN) {\n            this.onActivity();\n        }\n        var payload;\n        var type = chunk.data.slice(0, 1);\n        switch (type) {\n            case 'o':\n                payload = JSON.parse(chunk.data.slice(1) || '{}');\n                this.onOpen(payload);\n                break;\n            case 'a':\n                payload = JSON.parse(chunk.data.slice(1) || '[]');\n                for (var i = 0; i < payload.length; i++) {\n                    this.onEvent(payload[i]);\n                }\n                break;\n            case 'm':\n                payload = JSON.parse(chunk.data.slice(1) || 'null');\n                this.onEvent(payload);\n                break;\n            case 'h':\n                this.hooks.onHeartbeat(this);\n                break;\n            case 'c':\n                payload = JSON.parse(chunk.data.slice(1) || '[]');\n                this.onClose(payload[0], payload[1], true);\n                break;\n        }\n    };\n    HTTPSocket.prototype.onOpen = function (options) {\n        if (this.readyState === state.CONNECTING) {\n            if (options && options.hostname) {\n                this.location.base = replaceHost(this.location.base, options.hostname);\n            }\n            this.readyState = state.OPEN;\n            if (this.onopen) {\n                this.onopen();\n            }\n        }\n        else {\n            this.onClose(1006, 'Server lost session', true);\n        }\n    };\n    HTTPSocket.prototype.onEvent = function (event) {\n        if (this.readyState === state.OPEN && this.onmessage) {\n            this.onmessage({ data: event });\n        }\n    };\n    HTTPSocket.prototype.onActivity = function () {\n        if (this.onactivity) {\n            this.onactivity();\n        }\n    };\n    HTTPSocket.prototype.onError = function (error) {\n        if (this.onerror) {\n            this.onerror(error);\n        }\n    };\n    HTTPSocket.prototype.openStream = function () {\n        var _this = this;\n        this.stream = runtime.createSocketRequest('POST', getUniqueURL(this.hooks.getReceiveURL(this.location, this.session)));\n        this.stream.bind('chunk', function (chunk) {\n            _this.onChunk(chunk);\n        });\n        this.stream.bind('finished', function (status) {\n            _this.hooks.onFinished(_this, status);\n        });\n        this.stream.bind('buffer_too_long', function () {\n            _this.reconnect();\n        });\n        try {\n            this.stream.start();\n        }\n        catch (error) {\n            util.defer(function () {\n                _this.onError(error);\n                _this.onClose(1006, 'Could not start streaming', false);\n            });\n        }\n    };\n    HTTPSocket.prototype.closeStream = function () {\n        if (this.stream) {\n            this.stream.unbind_all();\n            this.stream.close();\n            this.stream = null;\n        }\n    };\n    return HTTPSocket;\n}());\nfunction getLocation(url) {\n    var parts = /([^\\?]*)\\/*(\\??.*)/.exec(url);\n    return {\n        base: parts[1],\n        queryString: parts[2]\n    };\n}\nfunction getSendURL(url, session) {\n    return url.base + '/' + session + '/xhr_send';\n}\nfunction getUniqueURL(url) {\n    var separator = url.indexOf('?') === -1 ? '?' : '&';\n    return url + separator + 't=' + +new Date() + '&n=' + autoIncrement++;\n}\nfunction replaceHost(url, hostname) {\n    var urlParts = /(https?:\\/\\/)([^\\/:]+)((\\/|:)?.*)/.exec(url);\n    return urlParts[1] + hostname + urlParts[3];\n}\nfunction randomNumber(max) {\n    return runtime.randomInt(max);\n}\nfunction randomString(length) {\n    var result = [];\n    for (var i = 0; i < length; i++) {\n        result.push(randomNumber(32).toString(32));\n    }\n    return result.join('');\n}\n/* harmony default export */ var http_socket = (http_socket_HTTPSocket);\n\n// CONCATENATED MODULE: ./src/core/http/http_streaming_socket.ts\nvar http_streaming_socket_hooks = {\n    getReceiveURL: function (url, session) {\n        return url.base + '/' + session + '/xhr_streaming' + url.queryString;\n    },\n    onHeartbeat: function (socket) {\n        socket.sendRaw('[]');\n    },\n    sendHeartbeat: function (socket) {\n        socket.sendRaw('[]');\n    },\n    onFinished: function (socket, status) {\n        socket.onClose(1006, 'Connection interrupted (' + status + ')', false);\n    }\n};\n/* harmony default export */ var http_streaming_socket = (http_streaming_socket_hooks);\n\n// CONCATENATED MODULE: ./src/core/http/http_polling_socket.ts\nvar http_polling_socket_hooks = {\n    getReceiveURL: function (url, session) {\n        return url.base + '/' + session + '/xhr' + url.queryString;\n    },\n    onHeartbeat: function () {\n    },\n    sendHeartbeat: function (socket) {\n        socket.sendRaw('[]');\n    },\n    onFinished: function (socket, status) {\n        if (status === 200) {\n            socket.reconnect();\n        }\n        else {\n            socket.onClose(1006, 'Connection interrupted (' + status + ')', false);\n        }\n    }\n};\n/* harmony default export */ var http_polling_socket = (http_polling_socket_hooks);\n\n// CONCATENATED MODULE: ./src/runtimes/isomorphic/http/http_xhr_request.ts\n\nvar http_xhr_request_hooks = {\n    getRequest: function (socket) {\n        var Constructor = runtime.getXHRAPI();\n        var xhr = new Constructor();\n        xhr.onreadystatechange = xhr.onprogress = function () {\n            switch (xhr.readyState) {\n                case 3:\n                    if (xhr.responseText && xhr.responseText.length > 0) {\n                        socket.onChunk(xhr.status, xhr.responseText);\n                    }\n                    break;\n                case 4:\n                    if (xhr.responseText && xhr.responseText.length > 0) {\n                        socket.onChunk(xhr.status, xhr.responseText);\n                    }\n                    socket.emit('finished', xhr.status);\n                    socket.close();\n                    break;\n            }\n        };\n        return xhr;\n    },\n    abortRequest: function (xhr) {\n        xhr.onreadystatechange = null;\n        xhr.abort();\n    }\n};\n/* harmony default export */ var http_xhr_request = (http_xhr_request_hooks);\n\n// CONCATENATED MODULE: ./src/runtimes/isomorphic/http/http.ts\n\n\n\n\n\nvar HTTP = {\n    createStreamingSocket: function (url) {\n        return this.createSocket(http_streaming_socket, url);\n    },\n    createPollingSocket: function (url) {\n        return this.createSocket(http_polling_socket, url);\n    },\n    createSocket: function (hooks, url) {\n        return new http_socket(hooks, url);\n    },\n    createXHR: function (method, url) {\n        return this.createRequest(http_xhr_request, method, url);\n    },\n    createRequest: function (hooks, method, url) {\n        return new http_request(hooks, method, url);\n    }\n};\n/* harmony default export */ var http_http = (HTTP);\n\n// CONCATENATED MODULE: ./src/runtimes/web/http/http.ts\n\n\nhttp_http.createXDR = function (method, url) {\n    return this.createRequest(http_xdomain_request, method, url);\n};\n/* harmony default export */ var web_http_http = (http_http);\n\n// CONCATENATED MODULE: ./src/runtimes/web/runtime.ts\n\n\n\n\n\n\n\n\n\n\n\n\nvar Runtime = {\n    nextAuthCallbackID: 1,\n    auth_callbacks: {},\n    ScriptReceivers: ScriptReceivers,\n    DependenciesReceivers: DependenciesReceivers,\n    getDefaultStrategy: default_strategy,\n    Transports: transports_transports,\n    transportConnectionInitializer: transport_connection_initializer,\n    HTTPFactory: web_http_http,\n    TimelineTransport: jsonp_timeline,\n    getXHRAPI: function () {\n        return window.XMLHttpRequest;\n    },\n    getWebSocketAPI: function () {\n        return window.WebSocket || window.MozWebSocket;\n    },\n    setup: function (PusherClass) {\n        var _this = this;\n        window.Pusher = PusherClass;\n        var initializeOnDocumentBody = function () {\n            _this.onDocumentBody(PusherClass.ready);\n        };\n        if (!window.JSON) {\n            Dependencies.load('json2', {}, initializeOnDocumentBody);\n        }\n        else {\n            initializeOnDocumentBody();\n        }\n    },\n    getDocument: function () {\n        return document;\n    },\n    getProtocol: function () {\n        return this.getDocument().location.protocol;\n    },\n    getAuthorizers: function () {\n        return { ajax: xhr_auth, jsonp: jsonp_auth };\n    },\n    onDocumentBody: function (callback) {\n        var _this = this;\n        if (document.body) {\n            callback();\n        }\n        else {\n            setTimeout(function () {\n                _this.onDocumentBody(callback);\n            }, 0);\n        }\n    },\n    createJSONPRequest: function (url, data) {\n        return new jsonp_request(url, data);\n    },\n    createScriptRequest: function (src) {\n        return new script_request(src);\n    },\n    getLocalStorage: function () {\n        try {\n            return window.localStorage;\n        }\n        catch (e) {\n            return undefined;\n        }\n    },\n    createXHR: function () {\n        if (this.getXHRAPI()) {\n            return this.createXMLHttpRequest();\n        }\n        else {\n            return this.createMicrosoftXHR();\n        }\n    },\n    createXMLHttpRequest: function () {\n        var Constructor = this.getXHRAPI();\n        return new Constructor();\n    },\n    createMicrosoftXHR: function () {\n        return new ActiveXObject('Microsoft.XMLHTTP');\n    },\n    getNetwork: function () {\n        return net_info_Network;\n    },\n    createWebSocket: function (url) {\n        var Constructor = this.getWebSocketAPI();\n        return new Constructor(url);\n    },\n    createSocketRequest: function (method, url) {\n        if (this.isXHRSupported()) {\n            return this.HTTPFactory.createXHR(method, url);\n        }\n        else if (this.isXDRSupported(url.indexOf('https:') === 0)) {\n            return this.HTTPFactory.createXDR(method, url);\n        }\n        else {\n            throw 'Cross-origin HTTP requests are not supported';\n        }\n    },\n    isXHRSupported: function () {\n        var Constructor = this.getXHRAPI();\n        return (Boolean(Constructor) && new Constructor().withCredentials !== undefined);\n    },\n    isXDRSupported: function (useTLS) {\n        var protocol = useTLS ? 'https:' : 'http:';\n        var documentProtocol = this.getProtocol();\n        return (Boolean(window['XDomainRequest']) && documentProtocol === protocol);\n    },\n    addUnloadListener: function (listener) {\n        if (window.addEventListener !== undefined) {\n            window.addEventListener('unload', listener, false);\n        }\n        else if (window.attachEvent !== undefined) {\n            window.attachEvent('onunload', listener);\n        }\n    },\n    removeUnloadListener: function (listener) {\n        if (window.addEventListener !== undefined) {\n            window.removeEventListener('unload', listener, false);\n        }\n        else if (window.detachEvent !== undefined) {\n            window.detachEvent('onunload', listener);\n        }\n    },\n    randomInt: function (max) {\n        var random = function () {\n            var crypto = window.crypto || window['msCrypto'];\n            var random = crypto.getRandomValues(new Uint32Array(1))[0];\n            return random / Math.pow(2, 32);\n        };\n        return Math.floor(random() * max);\n    }\n};\n/* harmony default export */ var runtime = (Runtime);\n\n// CONCATENATED MODULE: ./src/core/timeline/level.ts\nvar TimelineLevel;\n(function (TimelineLevel) {\n    TimelineLevel[TimelineLevel[\"ERROR\"] = 3] = \"ERROR\";\n    TimelineLevel[TimelineLevel[\"INFO\"] = 6] = \"INFO\";\n    TimelineLevel[TimelineLevel[\"DEBUG\"] = 7] = \"DEBUG\";\n})(TimelineLevel || (TimelineLevel = {}));\n/* harmony default export */ var timeline_level = (TimelineLevel);\n\n// CONCATENATED MODULE: ./src/core/timeline/timeline.ts\n\n\n\nvar timeline_Timeline = (function () {\n    function Timeline(key, session, options) {\n        this.key = key;\n        this.session = session;\n        this.events = [];\n        this.options = options || {};\n        this.sent = 0;\n        this.uniqueID = 0;\n    }\n    Timeline.prototype.log = function (level, event) {\n        if (level <= this.options.level) {\n            this.events.push(extend({}, event, { timestamp: util.now() }));\n            if (this.options.limit && this.events.length > this.options.limit) {\n                this.events.shift();\n            }\n        }\n    };\n    Timeline.prototype.error = function (event) {\n        this.log(timeline_level.ERROR, event);\n    };\n    Timeline.prototype.info = function (event) {\n        this.log(timeline_level.INFO, event);\n    };\n    Timeline.prototype.debug = function (event) {\n        this.log(timeline_level.DEBUG, event);\n    };\n    Timeline.prototype.isEmpty = function () {\n        return this.events.length === 0;\n    };\n    Timeline.prototype.send = function (sendfn, callback) {\n        var _this = this;\n        var data = extend({\n            session: this.session,\n            bundle: this.sent + 1,\n            key: this.key,\n            lib: 'js',\n            version: this.options.version,\n            cluster: this.options.cluster,\n            features: this.options.features,\n            timeline: this.events\n        }, this.options.params);\n        this.events = [];\n        sendfn(data, function (error, result) {\n            if (!error) {\n                _this.sent++;\n            }\n            if (callback) {\n                callback(error, result);\n            }\n        });\n        return true;\n    };\n    Timeline.prototype.generateUniqueID = function () {\n        this.uniqueID++;\n        return this.uniqueID;\n    };\n    return Timeline;\n}());\n/* harmony default export */ var timeline_timeline = (timeline_Timeline);\n\n// CONCATENATED MODULE: ./src/core/strategies/transport_strategy.ts\n\n\n\n\nvar transport_strategy_TransportStrategy = (function () {\n    function TransportStrategy(name, priority, transport, options) {\n        this.name = name;\n        this.priority = priority;\n        this.transport = transport;\n        this.options = options || {};\n    }\n    TransportStrategy.prototype.isSupported = function () {\n        return this.transport.isSupported({\n            useTLS: this.options.useTLS\n        });\n    };\n    TransportStrategy.prototype.connect = function (minPriority, callback) {\n        var _this = this;\n        if (!this.isSupported()) {\n            return failAttempt(new UnsupportedStrategy(), callback);\n        }\n        else if (this.priority < minPriority) {\n            return failAttempt(new TransportPriorityTooLow(), callback);\n        }\n        var connected = false;\n        var transport = this.transport.createConnection(this.name, this.priority, this.options.key, this.options);\n        var handshake = null;\n        var onInitialized = function () {\n            transport.unbind('initialized', onInitialized);\n            transport.connect();\n        };\n        var onOpen = function () {\n            handshake = factory.createHandshake(transport, function (result) {\n                connected = true;\n                unbindListeners();\n                callback(null, result);\n            });\n        };\n        var onError = function (error) {\n            unbindListeners();\n            callback(error);\n        };\n        var onClosed = function () {\n            unbindListeners();\n            var serializedTransport;\n            serializedTransport = safeJSONStringify(transport);\n            callback(new TransportClosed(serializedTransport));\n        };\n        var unbindListeners = function () {\n            transport.unbind('initialized', onInitialized);\n            transport.unbind('open', onOpen);\n            transport.unbind('error', onError);\n            transport.unbind('closed', onClosed);\n        };\n        transport.bind('initialized', onInitialized);\n        transport.bind('open', onOpen);\n        transport.bind('error', onError);\n        transport.bind('closed', onClosed);\n        transport.initialize();\n        return {\n            abort: function () {\n                if (connected) {\n                    return;\n                }\n                unbindListeners();\n                if (handshake) {\n                    handshake.close();\n                }\n                else {\n                    transport.close();\n                }\n            },\n            forceMinPriority: function (p) {\n                if (connected) {\n                    return;\n                }\n                if (_this.priority < p) {\n                    if (handshake) {\n                        handshake.close();\n                    }\n                    else {\n                        transport.close();\n                    }\n                }\n            }\n        };\n    };\n    return TransportStrategy;\n}());\n/* harmony default export */ var transport_strategy = (transport_strategy_TransportStrategy);\nfunction failAttempt(error, callback) {\n    util.defer(function () {\n        callback(error);\n    });\n    return {\n        abort: function () { },\n        forceMinPriority: function () { }\n    };\n}\n\n// CONCATENATED MODULE: ./src/core/strategies/strategy_builder.ts\n\n\n\n\n\nvar strategy_builder_Transports = runtime.Transports;\nvar strategy_builder_defineTransport = function (config, name, type, priority, options, manager) {\n    var transportClass = strategy_builder_Transports[type];\n    if (!transportClass) {\n        throw new UnsupportedTransport(type);\n    }\n    var enabled = (!config.enabledTransports ||\n        arrayIndexOf(config.enabledTransports, name) !== -1) &&\n        (!config.disabledTransports ||\n            arrayIndexOf(config.disabledTransports, name) === -1);\n    var transport;\n    if (enabled) {\n        options = Object.assign({ ignoreNullOrigin: config.ignoreNullOrigin }, options);\n        transport = new transport_strategy(name, priority, manager ? manager.getAssistant(transportClass) : transportClass, options);\n    }\n    else {\n        transport = strategy_builder_UnsupportedStrategy;\n    }\n    return transport;\n};\nvar strategy_builder_UnsupportedStrategy = {\n    isSupported: function () {\n        return false;\n    },\n    connect: function (_, callback) {\n        var deferred = util.defer(function () {\n            callback(new UnsupportedStrategy());\n        });\n        return {\n            abort: function () {\n                deferred.ensureAborted();\n            },\n            forceMinPriority: function () { }\n        };\n    }\n};\n\n// CONCATENATED MODULE: ./src/core/auth/user_authenticator.ts\n\n\nvar composeChannelQuery = function (params, authOptions) {\n    var query = 'socket_id=' + encodeURIComponent(params.socketId);\n    for (var key in authOptions.params) {\n        query +=\n            '&' +\n                encodeURIComponent(key) +\n                '=' +\n                encodeURIComponent(authOptions.params[key]);\n    }\n    if (authOptions.paramsProvider != null) {\n        var dynamicParams = authOptions.paramsProvider();\n        for (var key in dynamicParams) {\n            query +=\n                '&' +\n                    encodeURIComponent(key) +\n                    '=' +\n                    encodeURIComponent(dynamicParams[key]);\n        }\n    }\n    return query;\n};\nvar UserAuthenticator = function (authOptions) {\n    if (typeof runtime.getAuthorizers()[authOptions.transport] === 'undefined') {\n        throw \"'\" + authOptions.transport + \"' is not a recognized auth transport\";\n    }\n    return function (params, callback) {\n        var query = composeChannelQuery(params, authOptions);\n        runtime.getAuthorizers()[authOptions.transport](runtime, query, authOptions, AuthRequestType.UserAuthentication, callback);\n    };\n};\n/* harmony default export */ var user_authenticator = (UserAuthenticator);\n\n// CONCATENATED MODULE: ./src/core/auth/channel_authorizer.ts\n\n\nvar channel_authorizer_composeChannelQuery = function (params, authOptions) {\n    var query = 'socket_id=' + encodeURIComponent(params.socketId);\n    query += '&channel_name=' + encodeURIComponent(params.channelName);\n    for (var key in authOptions.params) {\n        query +=\n            '&' +\n                encodeURIComponent(key) +\n                '=' +\n                encodeURIComponent(authOptions.params[key]);\n    }\n    if (authOptions.paramsProvider != null) {\n        var dynamicParams = authOptions.paramsProvider();\n        for (var key in dynamicParams) {\n            query +=\n                '&' +\n                    encodeURIComponent(key) +\n                    '=' +\n                    encodeURIComponent(dynamicParams[key]);\n        }\n    }\n    return query;\n};\nvar ChannelAuthorizer = function (authOptions) {\n    if (typeof runtime.getAuthorizers()[authOptions.transport] === 'undefined') {\n        throw \"'\" + authOptions.transport + \"' is not a recognized auth transport\";\n    }\n    return function (params, callback) {\n        var query = channel_authorizer_composeChannelQuery(params, authOptions);\n        runtime.getAuthorizers()[authOptions.transport](runtime, query, authOptions, AuthRequestType.ChannelAuthorization, callback);\n    };\n};\n/* harmony default export */ var channel_authorizer = (ChannelAuthorizer);\n\n// CONCATENATED MODULE: ./src/core/auth/deprecated_channel_authorizer.ts\nvar ChannelAuthorizerProxy = function (pusher, authOptions, channelAuthorizerGenerator) {\n    var deprecatedAuthorizerOptions = {\n        authTransport: authOptions.transport,\n        authEndpoint: authOptions.endpoint,\n        auth: {\n            params: authOptions.params,\n            headers: authOptions.headers\n        }\n    };\n    return function (params, callback) {\n        var channel = pusher.channel(params.channelName);\n        var channelAuthorizer = channelAuthorizerGenerator(channel, deprecatedAuthorizerOptions);\n        channelAuthorizer.authorize(params.socketId, callback);\n    };\n};\n\n// CONCATENATED MODULE: ./src/core/config.ts\nvar __assign = ( false) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n\n\nfunction getConfig(opts, pusher) {\n    var config = {\n        activityTimeout: opts.activityTimeout || defaults.activityTimeout,\n        cluster: opts.cluster || defaults.cluster,\n        httpPath: opts.httpPath || defaults.httpPath,\n        httpPort: opts.httpPort || defaults.httpPort,\n        httpsPort: opts.httpsPort || defaults.httpsPort,\n        pongTimeout: opts.pongTimeout || defaults.pongTimeout,\n        statsHost: opts.statsHost || defaults.stats_host,\n        unavailableTimeout: opts.unavailableTimeout || defaults.unavailableTimeout,\n        wsPath: opts.wsPath || defaults.wsPath,\n        wsPort: opts.wsPort || defaults.wsPort,\n        wssPort: opts.wssPort || defaults.wssPort,\n        enableStats: getEnableStatsConfig(opts),\n        httpHost: getHttpHost(opts),\n        useTLS: shouldUseTLS(opts),\n        wsHost: getWebsocketHost(opts),\n        userAuthenticator: buildUserAuthenticator(opts),\n        channelAuthorizer: buildChannelAuthorizer(opts, pusher)\n    };\n    if ('disabledTransports' in opts)\n        config.disabledTransports = opts.disabledTransports;\n    if ('enabledTransports' in opts)\n        config.enabledTransports = opts.enabledTransports;\n    if ('ignoreNullOrigin' in opts)\n        config.ignoreNullOrigin = opts.ignoreNullOrigin;\n    if ('timelineParams' in opts)\n        config.timelineParams = opts.timelineParams;\n    if ('nacl' in opts) {\n        config.nacl = opts.nacl;\n    }\n    return config;\n}\nfunction getHttpHost(opts) {\n    if (opts.httpHost) {\n        return opts.httpHost;\n    }\n    if (opts.cluster) {\n        return \"sockjs-\" + opts.cluster + \".pusher.com\";\n    }\n    return defaults.httpHost;\n}\nfunction getWebsocketHost(opts) {\n    if (opts.wsHost) {\n        return opts.wsHost;\n    }\n    if (opts.cluster) {\n        return getWebsocketHostFromCluster(opts.cluster);\n    }\n    return getWebsocketHostFromCluster(defaults.cluster);\n}\nfunction getWebsocketHostFromCluster(cluster) {\n    return \"ws-\" + cluster + \".pusher.com\";\n}\nfunction shouldUseTLS(opts) {\n    if (runtime.getProtocol() === 'https:') {\n        return true;\n    }\n    else if (opts.forceTLS === false) {\n        return false;\n    }\n    return true;\n}\nfunction getEnableStatsConfig(opts) {\n    if ('enableStats' in opts) {\n        return opts.enableStats;\n    }\n    if ('disableStats' in opts) {\n        return !opts.disableStats;\n    }\n    return false;\n}\nfunction buildUserAuthenticator(opts) {\n    var userAuthentication = __assign(__assign({}, defaults.userAuthentication), opts.userAuthentication);\n    if ('customHandler' in userAuthentication &&\n        userAuthentication['customHandler'] != null) {\n        return userAuthentication['customHandler'];\n    }\n    return user_authenticator(userAuthentication);\n}\nfunction buildChannelAuth(opts, pusher) {\n    var channelAuthorization;\n    if ('channelAuthorization' in opts) {\n        channelAuthorization = __assign(__assign({}, defaults.channelAuthorization), opts.channelAuthorization);\n    }\n    else {\n        channelAuthorization = {\n            transport: opts.authTransport || defaults.authTransport,\n            endpoint: opts.authEndpoint || defaults.authEndpoint\n        };\n        if ('auth' in opts) {\n            if ('params' in opts.auth)\n                channelAuthorization.params = opts.auth.params;\n            if ('headers' in opts.auth)\n                channelAuthorization.headers = opts.auth.headers;\n        }\n        if ('authorizer' in opts)\n            channelAuthorization.customHandler = ChannelAuthorizerProxy(pusher, channelAuthorization, opts.authorizer);\n    }\n    return channelAuthorization;\n}\nfunction buildChannelAuthorizer(opts, pusher) {\n    var channelAuthorization = buildChannelAuth(opts, pusher);\n    if ('customHandler' in channelAuthorization &&\n        channelAuthorization['customHandler'] != null) {\n        return channelAuthorization['customHandler'];\n    }\n    return channel_authorizer(channelAuthorization);\n}\n\n// CONCATENATED MODULE: ./src/core/watchlist.ts\nvar watchlist_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\nvar watchlist_WatchlistFacade = (function (_super) {\n    watchlist_extends(WatchlistFacade, _super);\n    function WatchlistFacade(pusher) {\n        var _this = _super.call(this, function (eventName, data) {\n            logger.debug(\"No callbacks on watchlist events for \" + eventName);\n        }) || this;\n        _this.pusher = pusher;\n        _this.bindWatchlistInternalEvent();\n        return _this;\n    }\n    WatchlistFacade.prototype.handleEvent = function (pusherEvent) {\n        var _this = this;\n        pusherEvent.data.events.forEach(function (watchlistEvent) {\n            _this.emit(watchlistEvent.name, watchlistEvent);\n        });\n    };\n    WatchlistFacade.prototype.bindWatchlistInternalEvent = function () {\n        var _this = this;\n        this.pusher.connection.bind('message', function (pusherEvent) {\n            var eventName = pusherEvent.event;\n            if (eventName === 'pusher_internal:watchlist_events') {\n                _this.handleEvent(pusherEvent);\n            }\n        });\n    };\n    return WatchlistFacade;\n}(dispatcher));\n/* harmony default export */ var watchlist = (watchlist_WatchlistFacade);\n\n// CONCATENATED MODULE: ./src/core/utils/flat_promise.ts\nfunction flatPromise() {\n    var resolve, reject;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    return { promise: promise, resolve: resolve, reject: reject };\n}\n/* harmony default export */ var flat_promise = (flatPromise);\n\n// CONCATENATED MODULE: ./src/core/user.ts\nvar user_extends = ( false) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\nvar user_UserFacade = (function (_super) {\n    user_extends(UserFacade, _super);\n    function UserFacade(pusher) {\n        var _this = _super.call(this, function (eventName, data) {\n            logger.debug('No callbacks on user for ' + eventName);\n        }) || this;\n        _this.signin_requested = false;\n        _this.user_data = null;\n        _this.serverToUserChannel = null;\n        _this.signinDonePromise = null;\n        _this._signinDoneResolve = null;\n        _this._onAuthorize = function (err, authData) {\n            if (err) {\n                logger.warn(\"Error during signin: \" + err);\n                _this._cleanup();\n                return;\n            }\n            _this.pusher.send_event('pusher:signin', {\n                auth: authData.auth,\n                user_data: authData.user_data\n            });\n        };\n        _this.pusher = pusher;\n        _this.pusher.connection.bind('state_change', function (_a) {\n            var previous = _a.previous, current = _a.current;\n            if (previous !== 'connected' && current === 'connected') {\n                _this._signin();\n            }\n            if (previous === 'connected' && current !== 'connected') {\n                _this._cleanup();\n                _this._newSigninPromiseIfNeeded();\n            }\n        });\n        _this.watchlist = new watchlist(pusher);\n        _this.pusher.connection.bind('message', function (event) {\n            var eventName = event.event;\n            if (eventName === 'pusher:signin_success') {\n                _this._onSigninSuccess(event.data);\n            }\n            if (_this.serverToUserChannel &&\n                _this.serverToUserChannel.name === event.channel) {\n                _this.serverToUserChannel.handleEvent(event);\n            }\n        });\n        return _this;\n    }\n    UserFacade.prototype.signin = function () {\n        if (this.signin_requested) {\n            return;\n        }\n        this.signin_requested = true;\n        this._signin();\n    };\n    UserFacade.prototype._signin = function () {\n        if (!this.signin_requested) {\n            return;\n        }\n        this._newSigninPromiseIfNeeded();\n        if (this.pusher.connection.state !== 'connected') {\n            return;\n        }\n        this.pusher.config.userAuthenticator({\n            socketId: this.pusher.connection.socket_id\n        }, this._onAuthorize);\n    };\n    UserFacade.prototype._onSigninSuccess = function (data) {\n        try {\n            this.user_data = JSON.parse(data.user_data);\n        }\n        catch (e) {\n            logger.error(\"Failed parsing user data after signin: \" + data.user_data);\n            this._cleanup();\n            return;\n        }\n        if (typeof this.user_data.id !== 'string' || this.user_data.id === '') {\n            logger.error(\"user_data doesn't contain an id. user_data: \" + this.user_data);\n            this._cleanup();\n            return;\n        }\n        this._signinDoneResolve();\n        this._subscribeChannels();\n    };\n    UserFacade.prototype._subscribeChannels = function () {\n        var _this = this;\n        var ensure_subscribed = function (channel) {\n            if (channel.subscriptionPending && channel.subscriptionCancelled) {\n                channel.reinstateSubscription();\n            }\n            else if (!channel.subscriptionPending &&\n                _this.pusher.connection.state === 'connected') {\n                channel.subscribe();\n            }\n        };\n        this.serverToUserChannel = new channels_channel(\"#server-to-user-\" + this.user_data.id, this.pusher);\n        this.serverToUserChannel.bind_global(function (eventName, data) {\n            if (eventName.indexOf('pusher_internal:') === 0 ||\n                eventName.indexOf('pusher:') === 0) {\n                return;\n            }\n            _this.emit(eventName, data);\n        });\n        ensure_subscribed(this.serverToUserChannel);\n    };\n    UserFacade.prototype._cleanup = function () {\n        this.user_data = null;\n        if (this.serverToUserChannel) {\n            this.serverToUserChannel.unbind_all();\n            this.serverToUserChannel.disconnect();\n            this.serverToUserChannel = null;\n        }\n        if (this.signin_requested) {\n            this._signinDoneResolve();\n        }\n    };\n    UserFacade.prototype._newSigninPromiseIfNeeded = function () {\n        if (!this.signin_requested) {\n            return;\n        }\n        if (this.signinDonePromise && !this.signinDonePromise.done) {\n            return;\n        }\n        var _a = flat_promise(), promise = _a.promise, resolve = _a.resolve, _ = _a.reject;\n        promise.done = false;\n        var setDone = function () {\n            promise.done = true;\n        };\n        promise.then(setDone)[\"catch\"](setDone);\n        this.signinDonePromise = promise;\n        this._signinDoneResolve = resolve;\n    };\n    return UserFacade;\n}(dispatcher));\n/* harmony default export */ var user = (user_UserFacade);\n\n// CONCATENATED MODULE: ./src/core/pusher.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar pusher_Pusher = (function () {\n    function Pusher(app_key, options) {\n        var _this = this;\n        checkAppKey(app_key);\n        options = options || {};\n        if (!options.cluster && !(options.wsHost || options.httpHost)) {\n            var suffix = url_store.buildLogSuffix('javascriptQuickStart');\n            logger.warn(\"You should always specify a cluster when connecting. \" + suffix);\n        }\n        if ('disableStats' in options) {\n            logger.warn('The disableStats option is deprecated in favor of enableStats');\n        }\n        this.key = app_key;\n        this.config = getConfig(options, this);\n        this.channels = factory.createChannels();\n        this.global_emitter = new dispatcher();\n        this.sessionID = runtime.randomInt(1000000000);\n        this.timeline = new timeline_timeline(this.key, this.sessionID, {\n            cluster: this.config.cluster,\n            features: Pusher.getClientFeatures(),\n            params: this.config.timelineParams || {},\n            limit: 50,\n            level: timeline_level.INFO,\n            version: defaults.VERSION\n        });\n        if (this.config.enableStats) {\n            this.timelineSender = factory.createTimelineSender(this.timeline, {\n                host: this.config.statsHost,\n                path: '/timeline/v2/' + runtime.TimelineTransport.name\n            });\n        }\n        var getStrategy = function (options) {\n            return runtime.getDefaultStrategy(_this.config, options, strategy_builder_defineTransport);\n        };\n        this.connection = factory.createConnectionManager(this.key, {\n            getStrategy: getStrategy,\n            timeline: this.timeline,\n            activityTimeout: this.config.activityTimeout,\n            pongTimeout: this.config.pongTimeout,\n            unavailableTimeout: this.config.unavailableTimeout,\n            useTLS: Boolean(this.config.useTLS)\n        });\n        this.connection.bind('connected', function () {\n            _this.subscribeAll();\n            if (_this.timelineSender) {\n                _this.timelineSender.send(_this.connection.isUsingTLS());\n            }\n        });\n        this.connection.bind('message', function (event) {\n            var eventName = event.event;\n            var internal = eventName.indexOf('pusher_internal:') === 0;\n            if (event.channel) {\n                var channel = _this.channel(event.channel);\n                if (channel) {\n                    channel.handleEvent(event);\n                }\n            }\n            if (!internal) {\n                _this.global_emitter.emit(event.event, event.data);\n            }\n        });\n        this.connection.bind('connecting', function () {\n            _this.channels.disconnect();\n        });\n        this.connection.bind('disconnected', function () {\n            _this.channels.disconnect();\n        });\n        this.connection.bind('error', function (err) {\n            logger.warn(err);\n        });\n        Pusher.instances.push(this);\n        this.timeline.info({ instances: Pusher.instances.length });\n        this.user = new user(this);\n        if (Pusher.isReady) {\n            this.connect();\n        }\n    }\n    Pusher.ready = function () {\n        Pusher.isReady = true;\n        for (var i = 0, l = Pusher.instances.length; i < l; i++) {\n            Pusher.instances[i].connect();\n        }\n    };\n    Pusher.getClientFeatures = function () {\n        return keys(filterObject({ ws: runtime.Transports.ws }, function (t) {\n            return t.isSupported({});\n        }));\n    };\n    Pusher.prototype.channel = function (name) {\n        return this.channels.find(name);\n    };\n    Pusher.prototype.allChannels = function () {\n        return this.channels.all();\n    };\n    Pusher.prototype.connect = function () {\n        this.connection.connect();\n        if (this.timelineSender) {\n            if (!this.timelineSenderTimer) {\n                var usingTLS = this.connection.isUsingTLS();\n                var timelineSender = this.timelineSender;\n                this.timelineSenderTimer = new PeriodicTimer(60000, function () {\n                    timelineSender.send(usingTLS);\n                });\n            }\n        }\n    };\n    Pusher.prototype.disconnect = function () {\n        this.connection.disconnect();\n        if (this.timelineSenderTimer) {\n            this.timelineSenderTimer.ensureAborted();\n            this.timelineSenderTimer = null;\n        }\n    };\n    Pusher.prototype.bind = function (event_name, callback, context) {\n        this.global_emitter.bind(event_name, callback, context);\n        return this;\n    };\n    Pusher.prototype.unbind = function (event_name, callback, context) {\n        this.global_emitter.unbind(event_name, callback, context);\n        return this;\n    };\n    Pusher.prototype.bind_global = function (callback) {\n        this.global_emitter.bind_global(callback);\n        return this;\n    };\n    Pusher.prototype.unbind_global = function (callback) {\n        this.global_emitter.unbind_global(callback);\n        return this;\n    };\n    Pusher.prototype.unbind_all = function (callback) {\n        this.global_emitter.unbind_all();\n        return this;\n    };\n    Pusher.prototype.subscribeAll = function () {\n        var channelName;\n        for (channelName in this.channels.channels) {\n            if (this.channels.channels.hasOwnProperty(channelName)) {\n                this.subscribe(channelName);\n            }\n        }\n    };\n    Pusher.prototype.subscribe = function (channel_name) {\n        var channel = this.channels.add(channel_name, this);\n        if (channel.subscriptionPending && channel.subscriptionCancelled) {\n            channel.reinstateSubscription();\n        }\n        else if (!channel.subscriptionPending &&\n            this.connection.state === 'connected') {\n            channel.subscribe();\n        }\n        return channel;\n    };\n    Pusher.prototype.unsubscribe = function (channel_name) {\n        var channel = this.channels.find(channel_name);\n        if (channel && channel.subscriptionPending) {\n            channel.cancelSubscription();\n        }\n        else {\n            channel = this.channels.remove(channel_name);\n            if (channel && channel.subscribed) {\n                channel.unsubscribe();\n            }\n        }\n    };\n    Pusher.prototype.send_event = function (event_name, data, channel) {\n        return this.connection.send_event(event_name, data, channel);\n    };\n    Pusher.prototype.shouldUseTLS = function () {\n        return this.config.useTLS;\n    };\n    Pusher.prototype.signin = function () {\n        this.user.signin();\n    };\n    Pusher.instances = [];\n    Pusher.isReady = false;\n    Pusher.logToConsole = false;\n    Pusher.Runtime = runtime;\n    Pusher.ScriptReceivers = runtime.ScriptReceivers;\n    Pusher.DependenciesReceivers = runtime.DependenciesReceivers;\n    Pusher.auth_callbacks = runtime.auth_callbacks;\n    return Pusher;\n}());\n/* harmony default export */ var core_pusher = __nested_webpack_exports__[\"default\"] = (pusher_Pusher);\nfunction checkAppKey(key) {\n    if (key === null || key === undefined) {\n        throw 'You must pass your app key when you instantiate Pusher.';\n    }\n}\nruntime.setup(pusher_Pusher);\n\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=pusher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/pusher-js/dist/web/pusher.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"./node_modules/uuid/dist/esm-browser/v1.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ \"./node_modules/uuid/dist/esm-browser/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ \"./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ \"./node_modules/uuid/dist/esm-browser/v5.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ \"./node_modules/uuid/dist/esm-browser/nil.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ \"./node_modules/uuid/dist/esm-browser/version.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/esm-browser/validate.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/esm-browser/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ \"./node_modules/uuid/dist/esm-browser/parse.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QztBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ1E7QUFDRTtBQUNFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9pbmRleC5qcz8zYzczIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgdjEgfSBmcm9tICcuL3YxLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjMgfSBmcm9tICcuL3YzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjQgfSBmcm9tICcuL3Y0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjUgfSBmcm9tICcuL3Y1LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTklMIH0gZnJvbSAnLi9uaWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsaWRhdGUgfSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZSB9IGZyb20gJy4vcGFyc2UuanMnOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/index.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/md5.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25pbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uaWwuanM/ODQ1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/nil.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/esm-browser/validate.js\");\n\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3BhcnNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDOztBQUVyQztBQUNBLE9BQU8sd0RBQVE7QUFDZjtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9wYXJzZS5qcz85ZGE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHZhciB2O1xuICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/parse.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JlZ2V4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEdBQUcseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcz81ODdhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/regex.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanM/NTI3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbnZhciBnZXRSYW5kb21WYWx1ZXM7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbiAgICAvLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykgfHwgdHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/rng.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3NoYTEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1EQUFtRDs7QUFFbkQ7O0FBRUEsb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsUUFBUTtBQUMzQjs7QUFFQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixTQUFTO0FBQzdCOztBQUVBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7O0FBRUEsc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixVQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUVBQWUsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc2hhMS5qcz8xYzU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFkYXB0ZWQgZnJvbSBDaHJpcyBWZW5lc3MnIFNIQTEgY29kZSBhdFxuLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9zaGExLmh0bWxcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4geCAmIHkgXiB+eCAmIHo7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHggJiB5IF4geCAmIHogXiB5ICYgejtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG4gIH1cbn1cblxuZnVuY3Rpb24gUk9UTCh4LCBuKSB7XG4gIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47XG59XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgdmFyIEsgPSBbMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhjYTYyYzFkNl07XG4gIHZhciBIID0gWzB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjBdO1xuXG4gIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlcy5wdXNoKG1zZy5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgLy8gQ29udmVydCBBcnJheS1saWtlIHRvIEFycmF5XG4gICAgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChieXRlcyk7XG4gIH1cblxuICBieXRlcy5wdXNoKDB4ODApO1xuICB2YXIgbCA9IGJ5dGVzLmxlbmd0aCAvIDQgKyAyO1xuICB2YXIgTiA9IE1hdGguY2VpbChsIC8gMTYpO1xuICB2YXIgTSA9IG5ldyBBcnJheShOKTtcblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgTjsgKytfaSkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDMyQXJyYXkoMTYpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICBhcnJbal0gPSBieXRlc1tfaSAqIDY0ICsgaiAqIDRdIDw8IDI0IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgMV0gPDwgMTYgfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAyXSA8PCA4IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgM107XG4gICAgfVxuXG4gICAgTVtfaV0gPSBhcnI7XG4gIH1cblxuICBNW04gLSAxXVsxNF0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4IC8gTWF0aC5wb3coMiwgMzIpO1xuICBNW04gLSAxXVsxNF0gPSBNYXRoLmZsb29yKE1bTiAtIDFdWzE0XSk7XG4gIE1bTiAtIDFdWzE1XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggJiAweGZmZmZmZmZmO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IE47ICsrX2kyKSB7XG4gICAgdmFyIFcgPSBuZXcgVWludDMyQXJyYXkoODApO1xuXG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCAxNjsgKyt0KSB7XG4gICAgICBXW3RdID0gTVtfaTJdW3RdO1xuICAgIH1cblxuICAgIGZvciAodmFyIF90ID0gMTY7IF90IDwgODA7ICsrX3QpIHtcbiAgICAgIFdbX3RdID0gUk9UTChXW190IC0gM10gXiBXW190IC0gOF0gXiBXW190IC0gMTRdIF4gV1tfdCAtIDE2XSwgMSk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBIWzBdO1xuICAgIHZhciBiID0gSFsxXTtcbiAgICB2YXIgYyA9IEhbMl07XG4gICAgdmFyIGQgPSBIWzNdO1xuICAgIHZhciBlID0gSFs0XTtcblxuICAgIGZvciAodmFyIF90MiA9IDA7IF90MiA8IDgwOyArK190Mikge1xuICAgICAgdmFyIHMgPSBNYXRoLmZsb29yKF90MiAvIDIwKTtcbiAgICAgIHZhciBUID0gUk9UTChhLCA1KSArIGYocywgYiwgYywgZCkgKyBlICsgS1tzXSArIFdbX3QyXSA+Pj4gMDtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gUk9UTChiLCAzMCkgPj4+IDA7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSBUO1xuICAgIH1cblxuICAgIEhbMF0gPSBIWzBdICsgYSA+Pj4gMDtcbiAgICBIWzFdID0gSFsxXSArIGIgPj4+IDA7XG4gICAgSFsyXSA9IEhbMl0gKyBjID4+PiAwO1xuICAgIEhbM10gPSBIWzNdICsgZCA+Pj4gMDtcbiAgICBIWzRdID0gSFs0XSArIGUgPj4+IDA7XG4gIH1cblxuICByZXR1cm4gW0hbMF0gPj4gMjQgJiAweGZmLCBIWzBdID4+IDE2ICYgMHhmZiwgSFswXSA+PiA4ICYgMHhmZiwgSFswXSAmIDB4ZmYsIEhbMV0gPj4gMjQgJiAweGZmLCBIWzFdID4+IDE2ICYgMHhmZiwgSFsxXSA+PiA4ICYgMHhmZiwgSFsxXSAmIDB4ZmYsIEhbMl0gPj4gMjQgJiAweGZmLCBIWzJdID4+IDE2ICYgMHhmZiwgSFsyXSA+PiA4ICYgMHhmZiwgSFsyXSAmIDB4ZmYsIEhbM10gPj4gMjQgJiAweGZmLCBIWzNdID4+IDE2ICYgMHhmZiwgSFszXSA+PiA4ICYgMHhmZiwgSFszXSAmIDB4ZmYsIEhbNF0gPj4gMjQgJiAweGZmLCBIWzRdID4+IDE2ICYgMHhmZiwgSFs0XSA+PiA4ICYgMHhmZiwgSFs0XSAmIDB4ZmZdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaGExOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/sha1.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/esm-browser/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMGdCQUEwZ0I7QUFDMWdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sd0RBQVE7QUFDZjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUVBQWUsU0FBUyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzPzYzMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFycikge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgdmFyIHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/stringify.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(b);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YxLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNZLENBQUM7QUFDeEM7QUFDQTtBQUNBOztBQUVBOztBQUVBLGVBQWU7OztBQUdmO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7O0FBRUE7QUFDQSxzREFBc0QsK0NBQUc7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7O0FBR0Esd0VBQXdFO0FBQ3hFOztBQUVBLDRFQUE0RTs7QUFFNUUsOERBQThEOztBQUU5RDtBQUNBO0FBQ0EsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCLG9DQUFvQzs7QUFFcEMsOEJBQThCOztBQUU5QixrQ0FBa0M7O0FBRWxDLDRCQUE0Qjs7QUFFNUIsa0JBQWtCLE9BQU87QUFDekI7QUFDQTs7QUFFQSxnQkFBZ0IseURBQVM7QUFDekI7O0FBRUEsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjEuanM/NTBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnOyAvLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbnZhciBfbm9kZUlkO1xuXG52YXIgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG52YXIgX2xhc3RNU2VjcyA9IDA7XG52YXIgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICB2YXIgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW3NlZWRCeXRlc1swXSB8IDB4MDEsIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcbiAgICB9XG5cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH0gLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG5cblxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogRGF0ZS5ub3coKTsgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTsgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuXG4gIHZhciBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICB2YXIgdG1oID0gbXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwICYgMHhmZmZmZmZmO1xuICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bWggJiAweGZmOyAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb25cblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjsgLy8gYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgIChQZXIgNC4yLjIgLSBpbmNsdWRlIHZhcmlhbnQpXG5cbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwOyAvLyBgY2xvY2tfc2VxX2xvd2BcblxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7IC8vIGBub2RlYFxuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBzdHJpbmdpZnkoYik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHYxOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/v1.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"./node_modules/uuid/dist/esm-browser/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"./node_modules/uuid/dist/esm-browser/md5.js\");\n\n\nvar v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNBO0FBQzNCLFNBQVMsbURBQUcsYUFBYSwrQ0FBRztBQUM1QixpRUFBZSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92My5qcz8yZWRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IG1kNSBmcm9tICcuL21kNS5qcyc7XG52YXIgdjMgPSB2MzUoJ3YzJywgMHgzMCwgbWQ1KTtcbmV4cG9ydCBkZWZhdWx0IHYzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/v3.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/esm-browser/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"./node_modules/uuid/dist/esm-browser/parse.js\");\n\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nvar DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nvar URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF1QztBQUNSOztBQUUvQjtBQUNBLDJDQUEyQzs7QUFFM0M7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDQTtBQUNQLDZCQUFlLG9DQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHFEQUFLO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFdBQVcseURBQVM7QUFDcEIsSUFBSTs7O0FBR0o7QUFDQSw4QkFBOEI7QUFDOUIsSUFBSSxlQUFlOzs7QUFHbkI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzNS5qcz9kNzlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgdmFyIGJ5dGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IHZhciBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCB2YXIgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/v35.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNZOztBQUV2QztBQUNBO0FBQ0EsK0NBQStDLCtDQUFHLEtBQUs7O0FBRXZEO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBOztBQUVBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTLHlEQUFTO0FBQ2xCOztBQUVBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzP2YwNTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/v4.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"./node_modules/uuid/dist/esm-browser/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"./node_modules/uuid/dist/esm-browser/sha1.js\");\n\n\nvar v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNFO0FBQzdCLFNBQVMsbURBQUcsYUFBYSxnREFBSTtBQUM3QixpRUFBZSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NS5qcz9hMDcxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbnZhciB2NSA9IHYzNSgndjUnLCAweDUwLCBzaGExKTtcbmV4cG9ydCBkZWZhdWx0IHY1OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/v5.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"./node_modules/uuid/dist/esm-browser/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStCOztBQUUvQjtBQUNBLHFDQUFxQyxpREFBSztBQUMxQzs7QUFFQSxpRUFBZSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcz80ZTk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/validate.js\n");

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/esm-browser/validate.js\");\n\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7O0FBRXJDO0FBQ0EsT0FBTyx3REFBUTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpRUFBZSxPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92ZXJzaW9uLmpzPzgyZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VJbnQodXVpZC5zdWJzdHIoMTQsIDEpLCAxNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uuid/dist/esm-browser/version.js\n");

/***/ }),

/***/ "./node_modules/axios/dist/browser/axios.cjs":
/*!***************************************************!*\
  !*** ./node_modules/axios/dist/browser/axios.cjs ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n// Axios v1.7.2 Copyright (c) 2024 Matt Zabriskie and contributors\n\n\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n};\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n};\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\nconst [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : __webpack_require__.g)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n};\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n};\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n};\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n};\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n};\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n};\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n};\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n};\n\nconst noop = () => {};\n\nconst toFiniteNumber = (value, defaultValue) => {\n  return value != null && Number.isFinite(value = +value) ? value : defaultValue;\n};\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz';\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0];\n  }\n\n  return str;\n};\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  };\n\n  return visit(obj, 0);\n};\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nvar utils$1 = {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isReadableStream,\n  isRequest,\n  isResponse,\n  isHeaders,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils$1.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils$1.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype$1 = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype$1, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype$1);\n\n  utils$1.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\n// eslint-disable-next-line strict\nvar httpAdapter = null;\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils$1.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils$1.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils$1.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils$1.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);\n\n  if (!utils$1.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils$1.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils$1.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils$1.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils$1.isArray(value) && isFlatArray(value)) ||\n        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils$1.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils$1.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils$1.forEach(value, function each(el, key) {\n      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils$1.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode$1(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode$1);\n  } : encode$1;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nfunction buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils$1.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils$1.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nvar InterceptorManager$1 = InterceptorManager;\n\nvar transitionalDefaults = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n\nvar URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n\nvar FormData$1 = typeof FormData !== 'undefined' ? FormData : null;\n\nvar Blob$1 = typeof Blob !== 'undefined' ? Blob : null;\n\nvar platform$1 = {\n  isBrowser: true,\n  classes: {\n    URLSearchParams: URLSearchParams$1,\n    FormData: FormData$1,\n    Blob: Blob$1\n  },\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n\nconst hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst hasStandardBrowserEnv = (\n  (product) => {\n    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0\n  })(typeof navigator !== 'undefined' && navigator.product);\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\nconst hasStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\nconst origin = hasBrowserEnv && window.location.href || 'http://localhost';\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  hasBrowserEnv: hasBrowserEnv,\n  hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,\n  hasStandardBrowserEnv: hasStandardBrowserEnv,\n  origin: origin\n});\n\nvar platform = {\n  ...utils,\n  ...platform$1\n};\n\nfunction toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils$1.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils$1.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n\n    if (name === '__proto__') return true;\n\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils$1.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils$1.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils$1.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils$1.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils$1.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils$1.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils$1.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http', 'fetch'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils$1.isObject(data);\n\n    if (isObjectPayload && utils$1.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils$1.isFormData(data);\n\n    if (isFormData) {\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils$1.isArrayBuffer(data) ||\n      utils$1.isBuffer(data) ||\n      utils$1.isStream(data) ||\n      utils$1.isFile(data) ||\n      utils$1.isBlob(data) ||\n      utils$1.isReadableStream(data)\n    ) {\n      return data;\n    }\n    if (utils$1.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils$1.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {\n      return data;\n    }\n\n    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nvar defaults$1 = defaults;\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils$1.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nvar parseHeaders = rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils$1.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils$1.isString(value)) return;\n\n  if (utils$1.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils$1.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils$1.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils$1.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else if (utils$1.isHeaders(header)) {\n      for (const [key, value] of header.entries()) {\n        setHeader(value, key, rewrite);\n      }\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils$1.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils$1.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils$1.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils$1.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils$1.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils$1.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils$1.forEach(this, (value, header) => {\n      const key = utils$1.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils$1.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils$1.freezeMethods(AxiosHeaders);\n\nvar AxiosHeaders$1 = AxiosHeaders;\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nfunction transformData(fns, response) {\n  const config = this || defaults$1;\n  const context = response || config;\n  const headers = AxiosHeaders$1.from(context.headers);\n  let data = context.data;\n\n  utils$1.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils$1.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nfunction settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  const threshold = 1000 / freq;\n  let timer = null;\n  return function throttled() {\n    const force = this === true;\n\n    const now = Date.now();\n    if (force || now - timestamp > threshold) {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      timestamp = now;\n      return fn.apply(null, arguments);\n    }\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        timestamp = Date.now();\n        return fn.apply(null, arguments);\n      }, threshold - (now - timestamp));\n    }\n  };\n}\n\nvar progressEventReducer = (listener, isDownloadStream, freq = 3) => {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return throttle(e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e,\n      lengthComputable: total != null\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  }, freq);\n};\n\nvar isURLSameOrigin = platform.hasStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover its components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils$1.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n\nvar cookies = platform.hasStandardBrowserEnv ?\n\n  // Standard browser envs support document.cookie\n  {\n    write(name, value, expires, path, domain, secure) {\n      const cookie = [name + '=' + encodeURIComponent(value)];\n\n      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());\n\n      utils$1.isString(path) && cookie.push('path=' + path);\n\n      utils$1.isString(domain) && cookie.push('domain=' + domain);\n\n      secure === true && cookie.push('secure');\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read(name) {\n      const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return (match ? decodeURIComponent(match[3]) : null);\n    },\n\n    remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    }\n  }\n\n  :\n\n  // Non-standard browser env (web workers, react-native) lack needed support.\n  {\n    write() {},\n    read() {\n      return null;\n    },\n    remove() {}\n  };\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nfunction isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/?\\/$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nfunction buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nfunction mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {\n      return utils$1.merge.call({caseless}, target, source);\n    } else if (utils$1.isPlainObject(source)) {\n      return utils$1.merge({}, source);\n    } else if (utils$1.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils$1.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils$1.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils$1.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils$1.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils$1.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n\nvar resolveConfig = (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders$1.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils$1.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n};\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nvar xhrAdapter = isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();\n    let {responseType} = _config;\n    let onCanceled;\n    function done() {\n      if (_config.cancelToken) {\n        _config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (_config.signal) {\n        _config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders$1.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, _config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        _config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils$1.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof _config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(_config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof _config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(_config.onUploadProgress));\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n};\n\nconst composeSignals = (signals, timeout) => {\n  let controller = new AbortController();\n\n  let aborted;\n\n  const onabort = function (cancel) {\n    if (!aborted) {\n      aborted = true;\n      unsubscribe();\n      const err = cancel instanceof Error ? cancel : this.reason;\n      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n    }\n  };\n\n  let timer = timeout && setTimeout(() => {\n    onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));\n  }, timeout);\n\n  const unsubscribe = () => {\n    if (signals) {\n      timer && clearTimeout(timer);\n      timer = null;\n      signals.forEach(signal => {\n        signal &&\n        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));\n      });\n      signals = null;\n    }\n  };\n\n  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));\n\n  const {signal} = controller;\n\n  signal.unsubscribe = unsubscribe;\n\n  return [signal, () => {\n    timer && clearTimeout(timer);\n    timer = null;\n  }];\n};\n\nvar composeSignals$1 = composeSignals;\n\nconst streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\n\nconst readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);\n  }\n};\n\nconst trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n\n  let bytes = 0;\n\n  return new ReadableStream({\n    type: 'bytes',\n\n    async pull(controller) {\n      const {done, value} = await iterator.next();\n\n      if (done) {\n        controller.close();\n        onFinish();\n        return;\n      }\n\n      let len = value.byteLength;\n      onProgress && onProgress(bytes += len);\n      controller.enqueue(new Uint8Array(value));\n    },\n    cancel(reason) {\n      onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n};\n\nconst fetchProgressDecorator = (total, fn) => {\n  const lengthComputable = total != null;\n  return (loaded) => setTimeout(() => fn({\n    lengthComputable,\n    total,\n    loaded\n  }));\n};\n\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?\n    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :\n    async (str) => new Uint8Array(await new Response(str).arrayBuffer())\n);\n\nconst supportsRequestStream = isReadableStreamSupported && (() => {\n  let duplexAccessed = false;\n\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    },\n  }).headers.has('Content-Type');\n\n  return duplexAccessed && !hasContentType;\n})();\n\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst supportsResponseStream = isReadableStreamSupported && !!(()=> {\n  try {\n    return utils$1.isReadableStream(new Response('').body);\n  } catch(err) {\n    // return undefined\n  }\n})();\n\nconst resolvers = {\n  stream: supportsResponseStream && ((res) => res.body)\n};\n\nisFetchSupported && (((res) => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res) => res[type]() :\n      (_, config) => {\n        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n      });\n  });\n})(new Response));\n\nconst getBodyLength = async (body) => {\n  if (body == null) {\n    return 0;\n  }\n\n  if(utils$1.isBlob(body)) {\n    return body.size;\n  }\n\n  if(utils$1.isSpecCompliantForm(body)) {\n    return (await new Request(body).arrayBuffer()).byteLength;\n  }\n\n  if(utils$1.isArrayBufferView(body)) {\n    return body.byteLength;\n  }\n\n  if(utils$1.isURLSearchParams(body)) {\n    body = body + '';\n  }\n\n  if(utils$1.isString(body)) {\n    return (await encodeText(body)).byteLength;\n  }\n};\n\nconst resolveBodyLength = async (headers, body) => {\n  const length = utils$1.toFiniteNumber(headers.getContentLength());\n\n  return length == null ? getBodyLength(body) : length;\n};\n\nvar fetchAdapter = isFetchSupported && (async (config) => {\n  let {\n    url,\n    method,\n    data,\n    signal,\n    cancelToken,\n    timeout,\n    onDownloadProgress,\n    onUploadProgress,\n    responseType,\n    headers,\n    withCredentials = 'same-origin',\n    fetchOptions\n  } = resolveConfig(config);\n\n  responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n\n  let [composedSignal, stopTimeout] = (signal || cancelToken || timeout) ?\n    composeSignals$1([signal, cancelToken], timeout) : [];\n\n  let finished, request;\n\n  const onFinish = () => {\n    !finished && setTimeout(() => {\n      composedSignal && composedSignal.unsubscribe();\n    });\n\n    finished = true;\n  };\n\n  let requestContentLength;\n\n  try {\n    if (\n      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&\n      (requestContentLength = await resolveBodyLength(headers, data)) !== 0\n    ) {\n      let _request = new Request(url, {\n        method: 'POST',\n        body: data,\n        duplex: \"half\"\n      });\n\n      let contentTypeHeader;\n\n      if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n        headers.setContentType(contentTypeHeader);\n      }\n\n      if (_request.body) {\n        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(\n          requestContentLength,\n          progressEventReducer(onUploadProgress)\n        ), null, encodeText);\n      }\n    }\n\n    if (!utils$1.isString(withCredentials)) {\n      withCredentials = withCredentials ? 'cors' : 'omit';\n    }\n\n    request = new Request(url, {\n      ...fetchOptions,\n      signal: composedSignal,\n      method: method.toUpperCase(),\n      headers: headers.normalize().toJSON(),\n      body: data,\n      duplex: \"half\",\n      withCredentials\n    });\n\n    let response = await fetch(request);\n\n    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n\n    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {\n      const options = {};\n\n      ['status', 'statusText', 'headers'].forEach(prop => {\n        options[prop] = response[prop];\n      });\n\n      const responseContentLength = utils$1.toFiniteNumber(response.headers.get('content-length'));\n\n      response = new Response(\n        trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(\n          responseContentLength,\n          progressEventReducer(onDownloadProgress, true)\n        ), isStreamResponse && onFinish, encodeText),\n        options\n      );\n    }\n\n    responseType = responseType || 'text';\n\n    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](response, config);\n\n    !isStreamResponse && onFinish();\n\n    stopTimeout && stopTimeout();\n\n    return await new Promise((resolve, reject) => {\n      settle(resolve, reject, {\n        data: responseData,\n        headers: AxiosHeaders$1.from(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        config,\n        request\n      });\n    })\n  } catch (err) {\n    onFinish();\n\n    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n      throw Object.assign(\n        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),\n        {\n          cause: err.cause || err\n        }\n      )\n    }\n\n    throw AxiosError.from(err, err && err.code, config, request);\n  }\n});\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter,\n  fetch: fetchAdapter\n};\n\nutils$1.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;\n\nvar adapters = {\n  getAdapter: (adapters) => {\n    adapters = utils$1.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n};\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders$1.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders$1.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n\nconst VERSION = \"1.7.2\";\n\nconst validators$1 = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators$1[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators$1.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nvar validator = {\n  assertOptions,\n  validators: validators$1\n};\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager$1(),\n      response: new InterceptorManager$1()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy;\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack;\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils$1.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils$1.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils$1.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nvar Axios$1 = Axios;\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nvar CancelToken$1 = CancelToken;\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nfunction isAxiosError(payload) {\n  return utils$1.isObject(payload) && (payload.isAxiosError === true);\n}\n\nconst HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nvar HttpStatusCode$1 = HttpStatusCode;\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios$1(defaultConfig);\n  const instance = bind(Axios$1.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils$1.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils$1.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults$1);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios$1;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken$1;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders$1;\n\naxios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode$1;\n\naxios.default = axios;\n\nmodule.exports = axios;\n//# sourceMappingURL=axios.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvZGlzdC9icm93c2VyL2F4aW9zLmNqcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU8sVUFBVTtBQUNqQixPQUFPLGdCQUFnQjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxPQUFPLFNBQVM7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBOztBQUVBO0FB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Q0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxRQUFRO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25C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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkIsbUJBQW1CO0FBQzlDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7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Q0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBOztBQUVBLFNBQVMsUUFBUTs7QUFFakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGFBQWE7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxLQUFLO0FBQ3BELE9BQU87QUFDUCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQOztBQUVBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdEQUF3RCxpQkFBaUI7O0FBRXpFO0FBQ0EsMkNBQTJDLGlCQUFpQjs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9kaXN0L2Jyb3dzZXIvYXhpb3MuY2pzPzFjMjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQXhpb3MgdjEuNy4yIENvcHlyaWdodCAoYykgMjAyNCBNYXR0IFphYnJpc2tpZSBhbmQgY29udHJpYnV0b3JzXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn07XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufTtcblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59O1xuXG4vKipcbiAqIEl0IHRha2VzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBhIHN0cmluZywgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHRoZSBtYXRjaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ0V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIHNlYXJjaC5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8Ym9vbGVhbj59XG4gKi9cbmNvbnN0IG1hdGNoQWxsID0gKHJlZ0V4cCwgc3RyKSA9PiB7XG4gIGxldCBtYXRjaGVzO1xuICBjb25zdCBhcnIgPSBbXTtcblxuICB3aGlsZSAoKG1hdGNoZXMgPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIGFyci5wdXNoKG1hdGNoZXMpO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn07XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufTtcblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCB0b09iamVjdFNldCA9IChhcnJheU9yU3RyaW5nLCBkZWxpbWl0ZXIpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG5cbiAgY29uc3QgZGVmaW5lID0gKGFycikgPT4ge1xuICAgIGFyci5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgIG9ialt2YWx1ZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59O1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbmNvbnN0IHRvRmluaXRlTnVtYmVyID0gKHZhbHVlLCBkZWZhdWx0VmFsdWUpID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgTnVtYmVyLmlzRmluaXRlKHZhbHVlID0gK3ZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufTtcblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59O1xuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF07XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH07XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59O1xuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbnZhciB1dGlscyQxID0ge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzJDEuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMkMS50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSQxID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSQxLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSQxKTtcblxuICB1dGlscyQxLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG52YXIgaHR0cEFkYXB0ZXIgPSBudWxsO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzJDEuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMkMS5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMkMS5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzJDEuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscyQxLnRvRmxhdE9iamVjdCh1dGlscyQxLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMkMS5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMkMS50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgIG1ldGFUb2tlbnM6IHRydWUsXG4gICAgZG90czogZmFsc2UsXG4gICAgaW5kZXhlczogZmFsc2VcbiAgfSwgZmFsc2UsIGZ1bmN0aW9uIGRlZmluZWQob3B0aW9uLCBzb3VyY2UpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgICByZXR1cm4gIXV0aWxzJDEuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscyQxLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMkMS5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzJDEuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzJDEuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzJDEuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMkMS5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMkMS5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzJDEuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAoKHV0aWxzJDEuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMkMS5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMkMS50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICEodXRpbHMkMS5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzJDEuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscyQxLmZvckVhY2godmFsdWUsIGZ1bmN0aW9uIGVhY2goZWwsIGtleSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gISh1dGlscyQxLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzJDEuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscyQxLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSQxKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlJDEpO1xuICB9IDogZW5jb2RlJDE7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzJDEuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzJDEuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyJDEgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG5cbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtcyQxID0gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcblxudmFyIEZvcm1EYXRhJDEgPSB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuXG52YXIgQmxvYiQxID0gdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGw7XG5cbnZhciBwbGF0Zm9ybSQxID0ge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcyQxLFxuICAgIEZvcm1EYXRhOiBGb3JtRGF0YSQxLFxuICAgIEJsb2I6IEJsb2IkMVxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcblxuY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoXG4gIChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIGhhc0Jyb3dzZXJFbnYgJiYgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKHByb2R1Y3QpIDwgMFxuICB9KSh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmNvbnN0IG9yaWdpbiA9IGhhc0Jyb3dzZXJFbnYgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG52YXIgdXRpbHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgaGFzQnJvd3NlckVudjogaGFzQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52OiBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudjogaGFzU3RhbmRhcmRCcm93c2VyRW52LFxuICBvcmlnaW46IG9yaWdpblxufSk7XG5cbnZhciBwbGF0Zm9ybSA9IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtJDFcbn07XG5cbmZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscyQxLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMkMS5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoWzBdID09PSAnW10nID8gJycgOiBtYXRjaFsxXSB8fCBtYXRjaFswXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY29udmVydCB0byBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhbmQgdmFsdWVzIGFzIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb09iamVjdChhcnIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBsZXQgaTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGxldCBrZXk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgb2JqW2tleV0gPSBhcnJba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgRm9ybURhdGEgb2JqZWN0IGFuZCByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgVGhlIEZvcm1EYXRhIG9iamVjdCB0byBjb252ZXJ0IHRvIEpTT04uXG4gKlxuICogQHJldHVybnMge09iamVjdDxzdHJpbmcsIGFueT4gfCBudWxsfSBUaGUgY29udmVydGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZm9ybURhdGFUb0pTT04oZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgbGV0IG5hbWUgPSBwYXRoW2luZGV4KytdO1xuXG4gICAgaWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IGlzTnVtZXJpY0tleSA9IE51bWJlci5pc0Zpbml0ZSgrbmFtZSk7XG4gICAgY29uc3QgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzJDEuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMkMS5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscyQxLmlzT2JqZWN0KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0W25hbWVdLCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0ICYmIHV0aWxzJDEuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMkMS5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscyQxLmlzRnVuY3Rpb24oZm9ybURhdGEuZW50cmllcykpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIHV0aWxzJDEuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzJDEuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzJDEudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMkMS5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMkMS5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscyQxLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzJDEuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMkMS5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMkMS5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMkMS5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNCbG9iKGRhdGEpIHx8XG4gICAgICB1dGlscyQxLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMkMS5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMkMS5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMkMS5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMkMS5pc1Jlc3BvbnNlKGRhdGEpIHx8IHV0aWxzJDEuaXNSZWFkYWJsZVN0cmVhbShkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMkMS5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscyQxLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgKG1ldGhvZCkgPT4ge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG52YXIgZGVmYXVsdHMkMSA9IGRlZmF1bHRzO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzJDEudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xudmFyIHBhcnNlSGVhZGVycyA9IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscyQxLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMkMS5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzJDEuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzJDEuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzJDEuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMkMS50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscyQxLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscyQxLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscyQxLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZih1dGlscyQxLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscyQxLmlzSGVhZGVycyhoZWFkZXIpKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBoZWFkZXIuZW50cmllcygpKSB7XG4gICAgICAgIHNldEhlYWRlcih2YWx1ZSwga2V5LCByZXdyaXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscyQxLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzJDEuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzJDEuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzJDEuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzJDEuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMkMS5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMkMS5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscyQxLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMkMS5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMkMS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMkMS5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzJDEucmVkdWNlRGVzY3JpcHRvcnMoQXhpb3NIZWFkZXJzLnByb3RvdHlwZSwgKHt2YWx1ZX0sIGtleSkgPT4ge1xuICBsZXQgbWFwcGVkID0ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7IC8vIG1hcCBgc2V0YCA9PiBgU2V0YFxuICByZXR1cm4ge1xuICAgIGdldDogKCkgPT4gdmFsdWUsXG4gICAgc2V0KGhlYWRlclZhbHVlKSB7XG4gICAgICB0aGlzW21hcHBlZF0gPSBoZWFkZXJWYWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG51dGlscyQxLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxudmFyIEF4aW9zSGVhZGVycyQxID0gQXhpb3NIZWFkZXJzO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZm5zLCByZXNwb25zZSkge1xuICBjb25zdCBjb25maWcgPSB0aGlzIHx8IGRlZmF1bHRzJDE7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzJDEuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscyQxLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5mdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgY29uc3QgdGhyZXNob2xkID0gMTAwMCAvIGZyZXE7XG4gIGxldCB0aW1lciA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiB0aHJvdHRsZWQoKSB7XG4gICAgY29uc3QgZm9yY2UgPSB0aGlzID09PSB0cnVlO1xuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoZm9yY2UgfHwgbm93IC0gdGltZXN0YW1wID4gdGhyZXNob2xkKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGltZXN0YW1wID0gbm93O1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGlmICghdGltZXIpIHtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICB9LCB0aHJlc2hvbGQgLSAobm93IC0gdGltZXN0YW1wKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgPSAobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0sIGZyZXEgPSAzKSA9PiB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIHRocm90dGxlKGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGUsXG4gICAgICBsZW5ndGhDb21wdXRhYmxlOiB0b3RhbCAhPSBudWxsXG4gICAgfTtcblxuICAgIGRhdGFbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ10gPSB0cnVlO1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH0sIGZyZXEpO1xufTtcblxudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMkMS5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG5cbnZhciBjb29raWVzID0gcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAge1xuICAgIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgY29uc3QgY29va2llID0gW25hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcblxuICAgICAgdXRpbHMkMS5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzJDEuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscyQxLmlzU3RyaW5nKGRvbWFpbikgJiYgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcblxuICAgICAgc2VjdXJlID09PSB0cnVlICYmIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcblxuICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgfSxcblxuICAgIHJlYWQobmFtZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgOlxuXG4gIC8vIE5vbi1zdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAge1xuICAgIHdyaXRlKCkge30sXG4gICAgcmVhZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlKCkge31cbiAgfTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5mdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzJDEgPyB7IC4uLnRoaW5nIH0gOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5mdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzJDEuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzJDEuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMkMS5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzJDEuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMkMS5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzJDEuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMkMS5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMkMS5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxudmFyIHJlc29sdmVDb25maWcgPSAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IG1lcmdlQ29uZmlnKHt9LCBjb25maWcpO1xuXG4gIGxldCB7ZGF0YSwgd2l0aFhTUkZUb2tlbiwgeHNyZkhlYWRlck5hbWUsIHhzcmZDb29raWVOYW1lLCBoZWFkZXJzLCBhdXRofSA9IG5ld0NvbmZpZztcblxuICBuZXdDb25maWcuaGVhZGVycyA9IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKGhlYWRlcnMpO1xuXG4gIG5ld0NvbmZpZy51cmwgPSBidWlsZFVSTChidWlsZEZ1bGxQYXRoKG5ld0NvbmZpZy5iYXNlVVJMLCBuZXdDb25maWcudXJsKSwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuXG4gIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgaWYgKGF1dGgpIHtcbiAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICtcbiAgICAgIGJ0b2EoKGF1dGgudXNlcm5hbWUgfHwgJycpICsgJzonICsgKGF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYXV0aC5wYXNzd29yZCkpIDogJycpKVxuICAgICk7XG4gIH1cblxuICBsZXQgY29udGVudFR5cGU7XG5cbiAgaWYgKHV0aWxzJDEuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMkMS5pc0Z1bmN0aW9uKHdpdGhYU1JGVG9rZW4pICYmICh3aXRoWFNSRlRva2VuID0gd2l0aFhTUkZUb2tlbihuZXdDb25maWcpKTtcblxuICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4obmV3Q29uZmlnLnVybCkpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IHhzcmZIZWFkZXJOYW1lICYmIHhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZCh4c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgaGVhZGVycy5zZXQoeHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn07XG5cbmNvbnN0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB4aHJBZGFwdGVyID0gaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oX2NvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZX0gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxdWVzdC5vcGVuKF9jb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIF9jb25maWcudXJsLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gX2NvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgX2NvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIF9jb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgX2NvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IF9jb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIF9jb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzJDEuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChfY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFfY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBfY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKF9jb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIF9jb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbiB8fCBfY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IF9jb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKF9jb25maWcudXJsKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59O1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGxldCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gIGxldCBhYm9ydGVkO1xuXG4gIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAoY2FuY2VsKSB7XG4gICAgaWYgKCFhYm9ydGVkKSB7XG4gICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICBjb25zdCBlcnIgPSBjYW5jZWwgaW5zdGFuY2VvZiBFcnJvciA/IGNhbmNlbCA6IHRoaXMucmVhc29uO1xuICAgICAgY29udHJvbGxlci5hYm9ydChlcnIgaW5zdGFuY2VvZiBBeGlvc0Vycm9yID8gZXJyIDogbmV3IENhbmNlbGVkRXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycikpO1xuICAgIH1cbiAgfTtcblxuICBsZXQgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIG9uYWJvcnQobmV3IEF4aW9zRXJyb3IoYHRpbWVvdXQgJHt0aW1lb3V0fSBvZiBtcyBleGNlZWRlZGAsIEF4aW9zRXJyb3IuRVRJTUVET1VUKSk7XG4gIH0sIHRpbWVvdXQpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgIGlmIChzaWduYWxzKSB7XG4gICAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgIHNpZ25hbCAmJlxuICAgICAgICAoc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSA6IHNpZ25hbC51bnN1YnNjcmliZShvbmFib3J0KSk7XG4gICAgICB9KTtcbiAgICAgIHNpZ25hbHMgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBzaWduYWxzLmZvckVhY2goKHNpZ25hbCkgPT4gc2lnbmFsICYmIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyICYmIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpKTtcblxuICBjb25zdCB7c2lnbmFsfSA9IGNvbnRyb2xsZXI7XG5cbiAgc2lnbmFsLnVuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG5cbiAgcmV0dXJuIFtzaWduYWwsICgpID0+IHtcbiAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRpbWVyID0gbnVsbDtcbiAgfV07XG59O1xuXG52YXIgY29tcG9zZVNpZ25hbHMkMSA9IGNvbXBvc2VTaWduYWxzO1xuXG5jb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn07XG5cbmNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSwgZW5jb2RlKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcmFibGUpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoQXJyYXlCdWZmZXIuaXNWaWV3KGNodW5rKSA/IGNodW5rIDogKGF3YWl0IGVuY29kZShTdHJpbmcoY2h1bmspKSksIGNodW5rU2l6ZSk7XG4gIH1cbn07XG5cbmNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCwgZW5jb2RlKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplLCBlbmNvZGUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgdHlwZTogJ2J5dGVzJyxcblxuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICBvbkZpbmlzaCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgb25Qcm9ncmVzcyAmJiBvblByb2dyZXNzKGJ5dGVzICs9IGxlbik7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIG9uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufTtcblxuY29uc3QgZmV0Y2hQcm9ncmVzc0RlY29yYXRvciA9ICh0b3RhbCwgZm4pID0+IHtcbiAgY29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9IG51bGw7XG4gIHJldHVybiAobG9hZGVkKSA9PiBzZXRUaW1lb3V0KCgpID0+IGZuKHtcbiAgICBsZW5ndGhDb21wdXRhYmxlLFxuICAgIHRvdGFsLFxuICAgIGxvYWRlZFxuICB9KSk7XG59O1xuXG5jb25zdCBpc0ZldGNoU3VwcG9ydGVkID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkICYmIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ2Z1bmN0aW9uJztcblxuLy8gdXNlZCBvbmx5IGluc2lkZSB0aGUgZmV0Y2ggYWRhcHRlclxuY29uc3QgZW5jb2RlVGV4dCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKHR5cGVvZiBUZXh0RW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgKChlbmNvZGVyKSA9PiAoc3RyKSA9PiBlbmNvZGVyLmVuY29kZShzdHIpKShuZXcgVGV4dEVuY29kZXIoKSkgOlxuICAgIGFzeW5jIChzdHIpID0+IG5ldyBVaW50OEFycmF5KGF3YWl0IG5ldyBSZXNwb25zZShzdHIpLmFycmF5QnVmZmVyKCkpXG4pO1xuXG5jb25zdCBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KSgpO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmICEhKCgpPT4ge1xuICB0cnkge1xuICAgIHJldHVybiB1dGlscyQxLmlzUmVhZGFibGVTdHJlYW0obmV3IFJlc3BvbnNlKCcnKS5ib2R5KTtcbiAgfSBjYXRjaChlcnIpIHtcbiAgICAvLyByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn0pKCk7XG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgc3RyZWFtOiBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmICgocmVzKSA9PiByZXMuYm9keSlcbn07XG5cbmlzRmV0Y2hTdXBwb3J0ZWQgJiYgKCgocmVzKSA9PiB7XG4gIFsndGV4dCcsICdhcnJheUJ1ZmZlcicsICdibG9iJywgJ2Zvcm1EYXRhJywgJ3N0cmVhbSddLmZvckVhY2godHlwZSA9PiB7XG4gICAgIXJlc29sdmVyc1t0eXBlXSAmJiAocmVzb2x2ZXJzW3R5cGVdID0gdXRpbHMkMS5pc0Z1bmN0aW9uKHJlc1t0eXBlXSkgPyAocmVzKSA9PiByZXNbdHlwZV0oKSA6XG4gICAgICAoXywgY29uZmlnKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBSZXNwb25zZSB0eXBlICcke3R5cGV9JyBpcyBub3Qgc3VwcG9ydGVkYCwgQXhpb3NFcnJvci5FUlJfTk9UX1NVUFBPUlQsIGNvbmZpZyk7XG4gICAgICB9KTtcbiAgfSk7XG59KShuZXcgUmVzcG9uc2UpKTtcblxuY29uc3QgZ2V0Qm9keUxlbmd0aCA9IGFzeW5jIChib2R5KSA9PiB7XG4gIGlmIChib2R5ID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmKHV0aWxzJDEuaXNCbG9iKGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuc2l6ZTtcbiAgfVxuXG4gIGlmKHV0aWxzJDEuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgbmV3IFJlcXVlc3QoYm9keSkuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzJDEuaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMkMS5pc1VSTFNlYXJjaFBhcmFtcyhib2R5KSkge1xuICAgIGJvZHkgPSBib2R5ICsgJyc7XG4gIH1cblxuICBpZih1dGlscyQxLmlzU3RyaW5nKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBlbmNvZGVUZXh0KGJvZHkpKS5ieXRlTGVuZ3RoO1xuICB9XG59O1xuXG5jb25zdCByZXNvbHZlQm9keUxlbmd0aCA9IGFzeW5jIChoZWFkZXJzLCBib2R5KSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IHV0aWxzJDEudG9GaW5pdGVOdW1iZXIoaGVhZGVycy5nZXRDb250ZW50TGVuZ3RoKCkpO1xuXG4gIHJldHVybiBsZW5ndGggPT0gbnVsbCA/IGdldEJvZHlMZW5ndGgoYm9keSkgOiBsZW5ndGg7XG59O1xuXG52YXIgZmV0Y2hBZGFwdGVyID0gaXNGZXRjaFN1cHBvcnRlZCAmJiAoYXN5bmMgKGNvbmZpZykgPT4ge1xuICBsZXQge1xuICAgIHVybCxcbiAgICBtZXRob2QsXG4gICAgZGF0YSxcbiAgICBzaWduYWwsXG4gICAgY2FuY2VsVG9rZW4sXG4gICAgdGltZW91dCxcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3MsXG4gICAgb25VcGxvYWRQcm9ncmVzcyxcbiAgICByZXNwb25zZVR5cGUsXG4gICAgaGVhZGVycyxcbiAgICB3aXRoQ3JlZGVudGlhbHMgPSAnc2FtZS1vcmlnaW4nLFxuICAgIGZldGNoT3B0aW9uc1xuICB9ID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuXG4gIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSA/IChyZXNwb25zZVR5cGUgKyAnJykudG9Mb3dlckNhc2UoKSA6ICd0ZXh0JztcblxuICBsZXQgW2NvbXBvc2VkU2lnbmFsLCBzdG9wVGltZW91dF0gPSAoc2lnbmFsIHx8IGNhbmNlbFRva2VuIHx8IHRpbWVvdXQpID9cbiAgICBjb21wb3NlU2lnbmFscyQxKFtzaWduYWwsIGNhbmNlbFRva2VuXSwgdGltZW91dCkgOiBbXTtcblxuICBsZXQgZmluaXNoZWQsIHJlcXVlc3Q7XG5cbiAgY29uc3Qgb25GaW5pc2ggPSAoKSA9PiB7XG4gICAgIWZpbmlzaGVkICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29tcG9zZWRTaWduYWwgJiYgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUoKTtcbiAgICB9KTtcblxuICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgfTtcblxuICBsZXQgcmVxdWVzdENvbnRlbnRMZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICBvblVwbG9hZFByb2dyZXNzICYmIHN1cHBvcnRzUmVxdWVzdFN0cmVhbSAmJiBtZXRob2QgIT09ICdnZXQnICYmIG1ldGhvZCAhPT0gJ2hlYWQnICYmXG4gICAgICAocmVxdWVzdENvbnRlbnRMZW5ndGggPSBhd2FpdCByZXNvbHZlQm9keUxlbmd0aChoZWFkZXJzLCBkYXRhKSkgIT09IDBcbiAgICApIHtcbiAgICAgIGxldCBfcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICAgICAgZHVwbGV4OiBcImhhbGZcIlxuICAgICAgfSk7XG5cbiAgICAgIGxldCBjb250ZW50VHlwZUhlYWRlcjtcblxuICAgICAgaWYgKHV0aWxzJDEuaXNGb3JtRGF0YShkYXRhKSAmJiAoY29udGVudFR5cGVIZWFkZXIgPSBfcmVxdWVzdC5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoY29udGVudFR5cGVIZWFkZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3JlcXVlc3QuYm9keSkge1xuICAgICAgICBkYXRhID0gdHJhY2tTdHJlYW0oX3JlcXVlc3QuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBmZXRjaFByb2dyZXNzRGVjb3JhdG9yKFxuICAgICAgICAgIHJlcXVlc3RDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uVXBsb2FkUHJvZ3Jlc3MpXG4gICAgICAgICksIG51bGwsIGVuY29kZVRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXRpbHMkMS5pc1N0cmluZyh3aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICB3aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHMgPyAnY29ycycgOiAnb21pdCc7XG4gICAgfVxuXG4gICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgLi4uZmV0Y2hPcHRpb25zLFxuICAgICAgc2lnbmFsOiBjb21wb3NlZFNpZ25hbCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLm5vcm1hbGl6ZSgpLnRvSlNPTigpLFxuICAgICAgYm9keTogZGF0YSxcbiAgICAgIGR1cGxleDogXCJoYWxmXCIsXG4gICAgICB3aXRoQ3JlZGVudGlhbHNcbiAgICB9KTtcblxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHJlcXVlc3QpO1xuXG4gICAgY29uc3QgaXNTdHJlYW1SZXNwb25zZSA9IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKHJlc3BvbnNlVHlwZSA9PT0gJ3N0cmVhbScgfHwgcmVzcG9uc2VUeXBlID09PSAncmVzcG9uc2UnKTtcblxuICAgIGlmIChzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChvbkRvd25sb2FkUHJvZ3Jlc3MgfHwgaXNTdHJlYW1SZXNwb25zZSkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICAgICAgWydzdGF0dXMnLCAnc3RhdHVzVGV4dCcsICdoZWFkZXJzJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgb3B0aW9uc1twcm9wXSA9IHJlc3BvbnNlW3Byb3BdO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlQ29udGVudExlbmd0aCA9IHV0aWxzJDEudG9GaW5pdGVOdW1iZXIocmVzcG9uc2UuaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJykpO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKVxuICAgICAgICApLCBpc1N0cmVhbVJlc3BvbnNlICYmIG9uRmluaXNoLCBlbmNvZGVUZXh0KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscyQxLmZpbmRLZXkocmVzb2x2ZXJzLCByZXNwb25zZVR5cGUpIHx8ICd0ZXh0J10ocmVzcG9uc2UsIGNvbmZpZyk7XG5cbiAgICAhaXNTdHJlYW1SZXNwb25zZSAmJiBvbkZpbmlzaCgpO1xuXG4gICAgc3RvcFRpbWVvdXQgJiYgc3RvcFRpbWVvdXQoKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgaGVhZGVyczogQXhpb3NIZWFkZXJzJDEuZnJvbShyZXNwb25zZS5oZWFkZXJzKSxcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfSk7XG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgb25GaW5pc2goKTtcblxuICAgIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InICYmIC9mZXRjaC9pLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYXVzZTogZXJyLmNhdXNlIHx8IGVyclxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGVyciwgZXJyICYmIGVyci5jb2RlLCBjb25maWcsIHJlcXVlc3QpO1xuICB9XG59KTtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlcixcbiAgZmV0Y2g6IGZldGNoQWRhcHRlclxufTtcblxudXRpbHMkMS5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMkMS5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbnZhciBhZGFwdGVycyA9IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscyQxLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59O1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzJDEuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG5cbmNvbnN0IFZFUlNJT04gPSBcIjEuNy4yXCI7XG5cbmNvbnN0IHZhbGlkYXRvcnMkMSA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9ycyQxW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMkMS50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbnZhciB2YWxpZGF0b3IgPSB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnMkMVxufTtcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlciQxKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlciQxKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2s7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaWdub3JlIHRoZSBjYXNlIHdoZXJlIFwic3RhY2tcIiBpcyBhbiB1bi13cml0YWJsZSBwcm9wZXJ0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscyQxLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMkMS5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzJDEuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMkMS5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzJDEuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG52YXIgQXhpb3MkMSA9IEF4aW9zO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbnZhciBDYW5jZWxUb2tlbiQxID0gQ2FuY2VsVG9rZW47XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMkMS5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuXG5jb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxudmFyIEh0dHBTdGF0dXNDb2RlJDEgPSBIdHRwU3RhdHVzQ29kZTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zJDEoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcyQxLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscyQxLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MkMS5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzJDEuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMkMSk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcyQxO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbiQxO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycyQxO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMkMS5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlJDE7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF4aW9zLmNqcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/dist/browser/axios.cjs\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./vendor/rtippin/messenger-ui/resources/js/app.js");
/******/ 	
/******/ })()
;